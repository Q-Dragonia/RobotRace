
RobotRace.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00000490  00000524  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000490  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080011a  0080011a  0000053e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000053e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000570  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  000005b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001120  00000000  00000000  00000698  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000087d  00000000  00000000  000017b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007f3  00000000  00000000  00002035  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000200  00000000  00000000  00002828  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000682  00000000  00000000  00002a28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000521  00000000  00000000  000030aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  000035cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e9       	ldi	r30, 0x90	; 144
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 31       	cpi	r26, 0x1A	; 26
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e1       	ldi	r26, 0x1A	; 26
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 31       	cpi	r26, 0x1B	; 27
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 8b 01 	call	0x316	; 0x316 <main>
  9e:	0c 94 46 02 	jmp	0x48c	; 0x48c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_ADC>:
	// Calculate pulse width
	float set = (float)angle / (float)max_angle; // Ratio of degrees
	set = (((float)SERVO_MAX - (float)SERVO_MIN) * set) + (float)SERVO_MIN; // Find the value for PWM
	uint16_t point = (uint16_t)set;
	update_pwm(point);
}
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	80 83       	st	Z, r24
  b0:	ea e7       	ldi	r30, 0x7A	; 122
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	87 60       	ori	r24, 0x07	; 7
  b8:	80 83       	st	Z, r24
  ba:	80 81       	ld	r24, Z
  bc:	80 68       	ori	r24, 0x80	; 128
  be:	80 83       	st	Z, r24
  c0:	08 95       	ret

000000c2 <readADC>:
  c2:	ec e7       	ldi	r30, 0x7C	; 124
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	90 81       	ld	r25, Z
  c8:	90 7f       	andi	r25, 0xF0	; 240
  ca:	8f 70       	andi	r24, 0x0F	; 15
  cc:	89 2b       	or	r24, r25
  ce:	80 83       	st	Z, r24
  d0:	ea e7       	ldi	r30, 0x7A	; 122
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	80 64       	ori	r24, 0x40	; 64
  d8:	80 83       	st	Z, r24
  da:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  de:	86 fd       	sbrc	r24, 6
  e0:	fc cf       	rjmp	.-8      	; 0xda <readADC+0x18>
  e2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  e6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  ea:	08 95       	ret

000000ec <custom_delay_ms>:
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	00 d0       	rcall	.+0      	; 0xf2 <custom_delay_ms+0x6>
  f2:	cd b7       	in	r28, 0x3d	; 61
  f4:	de b7       	in	r29, 0x3e	; 62
  f6:	40 e0       	ldi	r20, 0x00	; 0
  f8:	50 e0       	ldi	r21, 0x00	; 0
  fa:	11 c0       	rjmp	.+34     	; 0x11e <custom_delay_ms+0x32>
  fc:	1a 82       	std	Y+2, r1	; 0x02
  fe:	19 82       	std	Y+1, r1	; 0x01
 100:	07 c0       	rjmp	.+14     	; 0x110 <custom_delay_ms+0x24>
 102:	00 00       	nop
 104:	29 81       	ldd	r18, Y+1	; 0x01
 106:	3a 81       	ldd	r19, Y+2	; 0x02
 108:	2f 5f       	subi	r18, 0xFF	; 255
 10a:	3f 4f       	sbci	r19, 0xFF	; 255
 10c:	3a 83       	std	Y+2, r19	; 0x02
 10e:	29 83       	std	Y+1, r18	; 0x01
 110:	29 81       	ldd	r18, Y+1	; 0x01
 112:	3a 81       	ldd	r19, Y+2	; 0x02
 114:	22 35       	cpi	r18, 0x52	; 82
 116:	33 40       	sbci	r19, 0x03	; 3
 118:	a0 f3       	brcs	.-24     	; 0x102 <custom_delay_ms+0x16>
 11a:	4f 5f       	subi	r20, 0xFF	; 255
 11c:	5f 4f       	sbci	r21, 0xFF	; 255
 11e:	48 17       	cp	r20, r24
 120:	59 07       	cpc	r21, r25
 122:	60 f3       	brcs	.-40     	; 0xfc <custom_delay_ms+0x10>
 124:	0f 90       	pop	r0
 126:	0f 90       	pop	r0
 128:	df 91       	pop	r29
 12a:	cf 91       	pop	r28
 12c:	08 95       	ret

0000012e <init_USART>:
 12e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 132:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 136:	88 e1       	ldi	r24, 0x18	; 24
 138:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 13c:	86 e0       	ldi	r24, 0x06	; 6
 13e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 142:	08 95       	ret

00000144 <receiveMessage>:
 144:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 148:	88 23       	and	r24, r24
 14a:	1c f4       	brge	.+6      	; 0x152 <receiveMessage+0xe>
 14c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 150:	08 95       	ret
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	08 95       	ret

00000156 <init_driving_PWM>:
 156:	8a b1       	in	r24, 0x0a	; 10
 158:	80 66       	ori	r24, 0x60	; 96
 15a:	8a b9       	out	0x0a, r24	; 10
 15c:	84 b5       	in	r24, 0x24	; 36
 15e:	83 6a       	ori	r24, 0xA3	; 163
 160:	84 bd       	out	0x24, r24	; 36
 162:	85 b5       	in	r24, 0x25	; 37
 164:	83 60       	ori	r24, 0x03	; 3
 166:	85 bd       	out	0x25, r24	; 37
 168:	84 b1       	in	r24, 0x04	; 4
 16a:	8c 60       	ori	r24, 0x0C	; 12
 16c:	84 b9       	out	0x04, r24	; 4
 16e:	08 95       	ret

00000170 <setMotorASpeed>:
 170:	81 11       	cpse	r24, r1
 172:	02 c0       	rjmp	.+4      	; 0x178 <setMotorASpeed+0x8>
 174:	18 bc       	out	0x28, r1	; 40
 176:	08 95       	ret
 178:	88 bd       	out	0x28, r24	; 40
 17a:	08 95       	ret

0000017c <setMotorBSpeed>:
 17c:	81 11       	cpse	r24, r1
 17e:	02 c0       	rjmp	.+4      	; 0x184 <setMotorBSpeed+0x8>
 180:	17 bc       	out	0x27, r1	; 39
 182:	08 95       	ret
 184:	87 bd       	out	0x27, r24	; 39
 186:	08 95       	ret

00000188 <setMotorADirection>:
 188:	81 30       	cpi	r24, 0x01	; 1
 18a:	21 f4       	brne	.+8      	; 0x194 <setMotorADirection+0xc>
 18c:	85 b1       	in	r24, 0x05	; 5
 18e:	84 60       	ori	r24, 0x04	; 4
 190:	85 b9       	out	0x05, r24	; 5
 192:	08 95       	ret
 194:	85 b1       	in	r24, 0x05	; 5
 196:	8b 7f       	andi	r24, 0xFB	; 251
 198:	85 b9       	out	0x05, r24	; 5
 19a:	08 95       	ret

0000019c <setMotorBDirection>:
 19c:	81 30       	cpi	r24, 0x01	; 1
 19e:	21 f4       	brne	.+8      	; 0x1a8 <setMotorBDirection+0xc>
 1a0:	85 b1       	in	r24, 0x05	; 5
 1a2:	88 60       	ori	r24, 0x08	; 8
 1a4:	85 b9       	out	0x05, r24	; 5
 1a6:	08 95       	ret
 1a8:	85 b1       	in	r24, 0x05	; 5
 1aa:	87 7f       	andi	r24, 0xF7	; 247
 1ac:	85 b9       	out	0x05, r24	; 5
 1ae:	08 95       	ret

000001b0 <Forward>:
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	c8 e1       	ldi	r28, 0x18	; 24
 1b6:	d1 e0       	ldi	r29, 0x01	; 1
 1b8:	88 81       	ld	r24, Y
 1ba:	0e 94 b8 00 	call	0x170	; 0x170 <setMotorASpeed>
 1be:	88 81       	ld	r24, Y
 1c0:	0e 94 be 00 	call	0x17c	; 0x17c <setMotorBSpeed>
 1c4:	df 91       	pop	r29
 1c6:	cf 91       	pop	r28
 1c8:	08 95       	ret

000001ca <turnRight>:
 1ca:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <turningSpeed>
 1ce:	0e 94 b8 00 	call	0x170	; 0x170 <setMotorASpeed>
 1d2:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <regularTruningSpeed>
 1d6:	0e 94 be 00 	call	0x17c	; 0x17c <setMotorBSpeed>
 1da:	08 95       	ret

000001dc <turnRighty>:
 1dc:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <Turn>
 1e0:	0e 94 b8 00 	call	0x170	; 0x170 <setMotorASpeed>
 1e4:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <Drive>
 1e8:	0e 94 be 00 	call	0x17c	; 0x17c <setMotorBSpeed>
 1ec:	08 95       	ret

000001ee <turnHardRight>:
 1ee:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <hardTurningSPeed>
 1f2:	0e 94 b8 00 	call	0x170	; 0x170 <setMotorASpeed>
 1f6:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <driveSpeedTruning>
 1fa:	0e 94 be 00 	call	0x17c	; 0x17c <setMotorBSpeed>
 1fe:	08 95       	ret

00000200 <turnLeft>:
 200:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <regularTruningSpeed>
 204:	0e 94 b8 00 	call	0x170	; 0x170 <setMotorASpeed>
 208:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <turningSpeed>
 20c:	0e 94 be 00 	call	0x17c	; 0x17c <setMotorBSpeed>
 210:	08 95       	ret

00000212 <turnLefty>:
 212:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <Drive>
 216:	0e 94 b8 00 	call	0x170	; 0x170 <setMotorASpeed>
 21a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <Turn>
 21e:	0e 94 be 00 	call	0x17c	; 0x17c <setMotorBSpeed>
 222:	08 95       	ret

00000224 <turnHardLeft>:
 224:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <driveSpeedTruning>
 228:	0e 94 b8 00 	call	0x170	; 0x170 <setMotorASpeed>
 22c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <hardTurningSPeed>
 230:	0e 94 be 00 	call	0x17c	; 0x17c <setMotorBSpeed>
 234:	08 95       	ret

00000236 <move>:
 236:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <whiteOuterLimit>
 23a:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <whiteOuterLimit+0x1>
 23e:	82 17       	cp	r24, r18
 240:	93 07       	cpc	r25, r19
 242:	1c f4       	brge	.+6      	; 0x24a <move+0x14>
 244:	0e 94 f7 00 	call	0x1ee	; 0x1ee <turnHardRight>
 248:	34 c0       	rjmp	.+104    	; 0x2b2 <move+0x7c>
 24a:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <white_limit>
 24e:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <white_limit+0x1>
 252:	82 17       	cp	r24, r18
 254:	93 07       	cpc	r25, r19
 256:	1c f4       	brge	.+6      	; 0x25e <move+0x28>
 258:	0e 94 ee 00 	call	0x1dc	; 0x1dc <turnRighty>
 25c:	2a c0       	rjmp	.+84     	; 0x2b2 <move+0x7c>
 25e:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <whiteInnerLimit>
 262:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <whiteInnerLimit+0x1>
 266:	82 17       	cp	r24, r18
 268:	93 07       	cpc	r25, r19
 26a:	1c f4       	brge	.+6      	; 0x272 <move+0x3c>
 26c:	0e 94 e5 00 	call	0x1ca	; 0x1ca <turnRight>
 270:	20 c0       	rjmp	.+64     	; 0x2b2 <move+0x7c>
 272:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <blackOuterLimit>
 276:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <blackOuterLimit+0x1>
 27a:	28 17       	cp	r18, r24
 27c:	39 07       	cpc	r19, r25
 27e:	1c f4       	brge	.+6      	; 0x286 <move+0x50>
 280:	0e 94 12 01 	call	0x224	; 0x224 <turnHardLeft>
 284:	16 c0       	rjmp	.+44     	; 0x2b2 <move+0x7c>
 286:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <black_limit>
 28a:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <black_limit+0x1>
 28e:	28 17       	cp	r18, r24
 290:	39 07       	cpc	r19, r25
 292:	1c f4       	brge	.+6      	; 0x29a <move+0x64>
 294:	0e 94 09 01 	call	0x212	; 0x212 <turnLefty>
 298:	0c c0       	rjmp	.+24     	; 0x2b2 <move+0x7c>
 29a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 29e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2a2:	28 17       	cp	r18, r24
 2a4:	39 07       	cpc	r19, r25
 2a6:	1c f4       	brge	.+6      	; 0x2ae <move+0x78>
 2a8:	0e 94 00 01 	call	0x200	; 0x200 <turnLeft>
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <move+0x7c>
 2ae:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <Forward>
 2b2:	8a e0       	ldi	r24, 0x0A	; 10
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	0e 94 76 00 	call	0xec	; 0xec <custom_delay_ms>
 2ba:	08 95       	ret

000002bc <ultrasonic_init>:
#include "servo.h"
#include "usart.h"

void ultrasonic_init() {
	// Set trigger pin as output and echo pin as input for ultrasonic sensor
	DDRB |= (1 << TRIG_PIN); // Trigger pin as output
 2bc:	84 b1       	in	r24, 0x04	; 4
 2be:	80 62       	ori	r24, 0x20	; 32
 2c0:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1 << ECHO_PIN); // Echo pin as input
 2c2:	84 b1       	in	r24, 0x04	; 4
 2c4:	8f 7e       	andi	r24, 0xEF	; 239
 2c6:	84 b9       	out	0x04, r24	; 4
 2c8:	08 95       	ret

000002ca <timer1_init>:
}
void timer1_init(){
	TCCR1A = 0;
 2ca:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B |= (0b010<<CS10);
 2ce:	e1 e8       	ldi	r30, 0x81	; 129
 2d0:	f0 e0       	ldi	r31, 0x00	; 0
 2d2:	80 81       	ld	r24, Z
 2d4:	82 60       	ori	r24, 0x02	; 2
 2d6:	80 83       	st	Z, r24
 2d8:	08 95       	ret

000002da <measure_distance>:
	
}
int measure_distance() {
	// Send a 10us pulse to the ultrasonic sensor
	PORTB |= (1 << TRIG_PIN);
 2da:	85 b1       	in	r24, 0x05	; 5
 2dc:	80 62       	ori	r24, 0x20	; 32
 2de:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2e0:	83 e0       	ldi	r24, 0x03	; 3
 2e2:	8a 95       	dec	r24
 2e4:	f1 f7       	brne	.-4      	; 0x2e2 <measure_distance+0x8>
 2e6:	00 00       	nop
	_delay_us(10);
	PORTB &= ~(1 << TRIG_PIN);
 2e8:	85 b1       	in	r24, 0x05	; 5
 2ea:	8f 7d       	andi	r24, 0xDF	; 223
 2ec:	85 b9       	out	0x05, r24	; 5

	// Measure pulse duration
	while (!(PINB & (1 << ECHO_PIN))); // Wait for echo pin to go high
 2ee:	1c 9b       	sbis	0x03, 4	; 3
 2f0:	fe cf       	rjmp	.-4      	; 0x2ee <measure_distance+0x14>
	TCNT1 = 0; // Record start time
 2f2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 2f6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	while (PINB & (1 << ECHO_PIN)); // Wait for echo pin to go low
 2fa:	1c 99       	sbic	0x03, 4	; 3
 2fc:	fe cf       	rjmp	.-4      	; 0x2fa <measure_distance+0x20>
	int time = TCNT1/2;
 2fe:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 302:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 306:	96 95       	lsr	r25
 308:	87 95       	ror	r24

	// Calculate distance in cm
	int distance = (int)(time / 29);
 30a:	6d e1       	ldi	r22, 0x1D	; 29
 30c:	70 e0       	ldi	r23, 0x00	; 0
 30e:	0e 94 1e 02 	call	0x43c	; 0x43c <__divmodhi4>
 312:	cb 01       	movw	r24, r22

	return distance;
}
 314:	08 95       	ret

00000316 <main>:
#include "collision.h"

int main(void)
{
    
	init_ADC();
 316:	0e 94 53 00 	call	0xa6	; 0xa6 <init_ADC>
	init_USART(MYUBRR);
 31a:	87 e6       	ldi	r24, 0x67	; 103
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	0e 94 97 00 	call	0x12e	; 0x12e <init_USART>
 	init_driving_PWM();
 322:	0e 94 ab 00 	call	0x156	; 0x156 <init_driving_PWM>
	ultrasonic_init();
 326:	0e 94 5e 01 	call	0x2bc	; 0x2bc <ultrasonic_init>
	timer1_init();
 32a:	0e 94 65 01 	call	0x2ca	; 0x2ca <timer1_init>
	int16_t i = 0;
	char var;
	int distance;
	
	setMotorADirection(1);
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	0e 94 c4 00 	call	0x188	; 0x188 <setMotorADirection>
	setMotorBDirection(1);
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	0e 94 ce 00 	call	0x19c	; 0x19c <setMotorBDirection>
	setMotorASpeed(0);
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	0e 94 b8 00 	call	0x170	; 0x170 <setMotorASpeed>
	setMotorBSpeed(0);
 340:	80 e0       	ldi	r24, 0x00	; 0
 342:	0e 94 be 00 	call	0x17c	; 0x17c <setMotorBSpeed>
	
	sei();
 346:	78 94       	sei
	
  while (1) 
    {
		var = receiveMessage();
 348:	0e 94 a2 00 	call	0x144	; 0x144 <receiveMessage>
		if(var == 'A' || var == 'B' || var == 'C'){receivedMessage = var;}
 34c:	9f eb       	ldi	r25, 0xBF	; 191
 34e:	98 0f       	add	r25, r24
 350:	93 30       	cpi	r25, 0x03	; 3
 352:	10 f4       	brcc	.+4      	; 0x358 <main+0x42>
 354:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end>
		setMotorASpeed(255);
 358:	8f ef       	ldi	r24, 0xFF	; 255
 35a:	0e 94 b8 00 	call	0x170	; 0x170 <setMotorASpeed>
		setMotorBSpeed(255);
 35e:	8f ef       	ldi	r24, 0xFF	; 255
 360:	0e 94 be 00 	call	0x17c	; 0x17c <setMotorBSpeed>
		
		while(receivedMessage == 'A'){
 364:	47 c0       	rjmp	.+142    	; 0x3f4 <main+0xde>
			int sensorLeft = (int)(readADC(SENSOR_LEFT_CHANNEL) - 30);
 366:	80 e0       	ldi	r24, 0x00	; 0
 368:	0e 94 61 00 	call	0xc2	; 0xc2 <readADC>
 36c:	4e 97       	sbiw	r24, 0x1e	; 30
 36e:	6c 01       	movw	r12, r24
			int lineTrackingSensorLeft = (int)readADC(LINE_TRACKING_SENSOR_LEFT_CHANNEL);
 370:	85 e0       	ldi	r24, 0x05	; 5
 372:	0e 94 61 00 	call	0xc2	; 0xc2 <readADC>
 376:	ec 01       	movw	r28, r24
			int lineTrackingSensorMiddle = (int)readADC(LINE_TRACKING_SENSOR_MIDDLE_CHANNEL);
 378:	82 e0       	ldi	r24, 0x02	; 2
 37a:	0e 94 61 00 	call	0xc2	; 0xc2 <readADC>
 37e:	7c 01       	movw	r14, r24
			int lineTrackingSensorRight = (int)(readADC(LINE_TRACKING_SENSOR_RIGHT_CHANNEL) - 30);
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	0e 94 61 00 	call	0xc2	; 0xc2 <readADC>
 386:	8c 01       	movw	r16, r24
 388:	0e 51       	subi	r16, 0x1E	; 30
 38a:	11 09       	sbc	r17, r1
			int sensorRight = (int)(readADC(SENSOR_RIGHT_CHANNEL) - 20);
 38c:	83 e0       	ldi	r24, 0x03	; 3
 38e:	0e 94 61 00 	call	0xc2	; 0xc2 <readADC>
 392:	44 97       	sbiw	r24, 0x14	; 20
			
			int averageValue = (int)((sensorLeft + lineTrackingSensorLeft + lineTrackingSensorMiddle + lineTrackingSensorRight +sensorRight) / 5);
 394:	96 01       	movw	r18, r12
 396:	2c 0f       	add	r18, r28
 398:	3d 1f       	adc	r19, r29
 39a:	e7 01       	movw	r28, r14
 39c:	c2 0f       	add	r28, r18
 39e:	d3 1f       	adc	r29, r19
 3a0:	c0 0f       	add	r28, r16
 3a2:	d1 1f       	adc	r29, r17
 3a4:	8c 0f       	add	r24, r28
 3a6:	9d 1f       	adc	r25, r29
 3a8:	65 e0       	ldi	r22, 0x05	; 5
 3aa:	70 e0       	ldi	r23, 0x00	; 0
 3ac:	0e 94 1e 02 	call	0x43c	; 0x43c <__divmodhi4>
 3b0:	8b 01       	movw	r16, r22
			
			distance = measure_distance();
 3b2:	0e 94 6d 01 	call	0x2da	; 0x2da <measure_distance>
 3b6:	ec 01       	movw	r28, r24
			//transferMessage(averageValue);
			custom_delay_ms(10);
 3b8:	8a e0       	ldi	r24, 0x0A	; 10
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	0e 94 76 00 	call	0xec	; 0xec <custom_delay_ms>
			if(distance < 60){
 3c0:	ec 97       	sbiw	r28, 0x3c	; 60
 3c2:	6c f4       	brge	.+26     	; 0x3de <main+0xc8>
				setMotorBSpeed(0);
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	0e 94 be 00 	call	0x17c	; 0x17c <setMotorBSpeed>
				setMotorASpeed(0);
 3ca:	80 e0       	ldi	r24, 0x00	; 0
 3cc:	0e 94 b8 00 	call	0x170	; 0x170 <setMotorASpeed>
				distance = measure_distance();
 3d0:	0e 94 6d 01 	call	0x2da	; 0x2da <measure_distance>
				custom_delay_ms(10);
 3d4:	8a e0       	ldi	r24, 0x0A	; 10
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	0e 94 76 00 	call	0xec	; 0xec <custom_delay_ms>
 3dc:	03 c0       	rjmp	.+6      	; 0x3e4 <main+0xce>
			}else{
				move(averageValue);
 3de:	c8 01       	movw	r24, r16
 3e0:	0e 94 1b 01 	call	0x236	; 0x236 <move>
		}
			var = receiveMessage();
 3e4:	0e 94 a2 00 	call	0x144	; 0x144 <receiveMessage>
			if(var == 'B' || var == 'C'){receivedMessage = var;}
 3e8:	9e eb       	ldi	r25, 0xBE	; 190
 3ea:	98 0f       	add	r25, r24
 3ec:	92 30       	cpi	r25, 0x02	; 2
 3ee:	10 f4       	brcc	.+4      	; 0x3f4 <main+0xde>
 3f0:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end>
		var = receiveMessage();
		if(var == 'A' || var == 'B' || var == 'C'){receivedMessage = var;}
		setMotorASpeed(255);
		setMotorBSpeed(255);
		
		while(receivedMessage == 'A'){
 3f4:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
 3f8:	81 34       	cpi	r24, 0x41	; 65
 3fa:	09 f4       	brne	.+2      	; 0x3fe <main+0xe8>
 3fc:	b4 cf       	rjmp	.-152    	; 0x366 <main+0x50>
				move(averageValue);
		}
			var = receiveMessage();
			if(var == 'B' || var == 'C'){receivedMessage = var;}
		}
		setMotorASpeed(0);
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	0e 94 b8 00 	call	0x170	; 0x170 <setMotorASpeed>
		setMotorBSpeed(0);
 404:	80 e0       	ldi	r24, 0x00	; 0
 406:	0e 94 be 00 	call	0x17c	; 0x17c <setMotorBSpeed>
		if(receivedMessage == 'B'){
 40a:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
 40e:	82 34       	cpi	r24, 0x42	; 66
 410:	81 f4       	brne	.+32     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
			custom_delay_ms(5000);
 412:	88 e8       	ldi	r24, 0x88	; 136
 414:	93 e1       	ldi	r25, 0x13	; 19
 416:	0e 94 76 00 	call	0xec	; 0xec <custom_delay_ms>
			receivedMessage = 'A';
 41a:	81 e4       	ldi	r24, 0x41	; 65
 41c:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end>
 420:	08 c0       	rjmp	.+16     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
		}
		while(receivedMessage == 'C'){
			var = receiveMessage();
 422:	0e 94 a2 00 	call	0x144	; 0x144 <receiveMessage>
			if(var == 'A' || var == 'B'){receivedMessage =var;}
 426:	9f eb       	ldi	r25, 0xBF	; 191
 428:	98 0f       	add	r25, r24
 42a:	92 30       	cpi	r25, 0x02	; 2
 42c:	10 f4       	brcc	.+4      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 42e:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end>
		setMotorBSpeed(0);
		if(receivedMessage == 'B'){
			custom_delay_ms(5000);
			receivedMessage = 'A';
		}
		while(receivedMessage == 'C'){
 432:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
 436:	83 34       	cpi	r24, 0x43	; 67
 438:	a1 f3       	breq	.-24     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 43a:	86 cf       	rjmp	.-244    	; 0x348 <main+0x32>

0000043c <__divmodhi4>:
 43c:	97 fb       	bst	r25, 7
 43e:	07 2e       	mov	r0, r23
 440:	16 f4       	brtc	.+4      	; 0x446 <__divmodhi4+0xa>
 442:	00 94       	com	r0
 444:	07 d0       	rcall	.+14     	; 0x454 <__divmodhi4_neg1>
 446:	77 fd       	sbrc	r23, 7
 448:	09 d0       	rcall	.+18     	; 0x45c <__divmodhi4_neg2>
 44a:	0e 94 32 02 	call	0x464	; 0x464 <__udivmodhi4>
 44e:	07 fc       	sbrc	r0, 7
 450:	05 d0       	rcall	.+10     	; 0x45c <__divmodhi4_neg2>
 452:	3e f4       	brtc	.+14     	; 0x462 <__divmodhi4_exit>

00000454 <__divmodhi4_neg1>:
 454:	90 95       	com	r25
 456:	81 95       	neg	r24
 458:	9f 4f       	sbci	r25, 0xFF	; 255
 45a:	08 95       	ret

0000045c <__divmodhi4_neg2>:
 45c:	70 95       	com	r23
 45e:	61 95       	neg	r22
 460:	7f 4f       	sbci	r23, 0xFF	; 255

00000462 <__divmodhi4_exit>:
 462:	08 95       	ret

00000464 <__udivmodhi4>:
 464:	aa 1b       	sub	r26, r26
 466:	bb 1b       	sub	r27, r27
 468:	51 e1       	ldi	r21, 0x11	; 17
 46a:	07 c0       	rjmp	.+14     	; 0x47a <__udivmodhi4_ep>

0000046c <__udivmodhi4_loop>:
 46c:	aa 1f       	adc	r26, r26
 46e:	bb 1f       	adc	r27, r27
 470:	a6 17       	cp	r26, r22
 472:	b7 07       	cpc	r27, r23
 474:	10 f0       	brcs	.+4      	; 0x47a <__udivmodhi4_ep>
 476:	a6 1b       	sub	r26, r22
 478:	b7 0b       	sbc	r27, r23

0000047a <__udivmodhi4_ep>:
 47a:	88 1f       	adc	r24, r24
 47c:	99 1f       	adc	r25, r25
 47e:	5a 95       	dec	r21
 480:	a9 f7       	brne	.-22     	; 0x46c <__udivmodhi4_loop>
 482:	80 95       	com	r24
 484:	90 95       	com	r25
 486:	bc 01       	movw	r22, r24
 488:	cd 01       	movw	r24, r26
 48a:	08 95       	ret

0000048c <_exit>:
 48c:	f8 94       	cli

0000048e <__stop_program>:
 48e:	ff cf       	rjmp	.-2      	; 0x48e <__stop_program>
