
RobotRace.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000a62  00000af6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a62  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800118  00800118  00000b0e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000b0e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b6c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000bac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e42  00000000  00000000  00000c24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007ff  00000000  00000000  00001a66  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000066a  00000000  00000000  00002265  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  000028d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000561  00000000  00000000  000029c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002af  00000000  00000000  00002f25  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  000031d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e6       	ldi	r30, 0x62	; 98
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 31       	cpi	r26, 0x18	; 24
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e1       	ldi	r26, 0x18	; 24
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 31       	cpi	r26, 0x1A	; 26
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <main>
  9e:	0c 94 2f 05 	jmp	0xa5e	; 0xa5e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_ADC>:

#ifndef ADC_H_
#define ADC_H_

void init_ADC(){
	ADMUX |= (1 << REFS0);
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
  b0:	ea e7       	ldi	r30, 0x7A	; 122
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	87 60       	ori	r24, 0x07	; 7
  b8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);
  ba:	80 81       	ld	r24, Z
  bc:	80 68       	ori	r24, 0x80	; 128
  be:	80 83       	st	Z, r24
  c0:	08 95       	ret

000000c2 <readADC>:
}

uint16_t readADC(uint8_t channel){
	ADMUX = (ADMUX & 0xF0) | (channel & 0x0F);
  c2:	ec e7       	ldi	r30, 0x7C	; 124
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	90 81       	ld	r25, Z
  c8:	90 7f       	andi	r25, 0xF0	; 240
  ca:	8f 70       	andi	r24, 0x0F	; 15
  cc:	89 2b       	or	r24, r25
  ce:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);
  d0:	ea e7       	ldi	r30, 0x7A	; 122
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	80 64       	ori	r24, 0x40	; 64
  d8:	80 83       	st	Z, r24
	// Wait for conversion to complete
	while (ADCSRA & (1 << ADSC));
  da:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  de:	86 fd       	sbrc	r24, 6
  e0:	fc cf       	rjmp	.-8      	; 0xda <readADC+0x18>
	// Return ADC result (10-bit)
	return ADC;
  e2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  e6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
  ea:	08 95       	ret

000000ec <custom_delay_ms>:


#ifndef USART_H_
#define USART_H_

void custom_delay_ms(uint16_t ms) {
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	00 d0       	rcall	.+0      	; 0xf2 <custom_delay_ms+0x6>
  f2:	cd b7       	in	r28, 0x3d	; 61
  f4:	de b7       	in	r29, 0x3e	; 62
	for (uint16_t i = 0; i < ms; i++) {
  f6:	40 e0       	ldi	r20, 0x00	; 0
  f8:	50 e0       	ldi	r21, 0x00	; 0
  fa:	11 c0       	rjmp	.+34     	; 0x11e <custom_delay_ms+0x32>
		for (volatile uint16_t j = 0; j < 850; j++) { // Adjust this value for the desired delay
  fc:	1a 82       	std	Y+2, r1	; 0x02
  fe:	19 82       	std	Y+1, r1	; 0x01
 100:	07 c0       	rjmp	.+14     	; 0x110 <custom_delay_ms+0x24>
			asm("nop"); // No operation, helps in preventing optimization
 102:	00 00       	nop
#ifndef USART_H_
#define USART_H_

void custom_delay_ms(uint16_t ms) {
	for (uint16_t i = 0; i < ms; i++) {
		for (volatile uint16_t j = 0; j < 850; j++) { // Adjust this value for the desired delay
 104:	29 81       	ldd	r18, Y+1	; 0x01
 106:	3a 81       	ldd	r19, Y+2	; 0x02
 108:	2f 5f       	subi	r18, 0xFF	; 255
 10a:	3f 4f       	sbci	r19, 0xFF	; 255
 10c:	3a 83       	std	Y+2, r19	; 0x02
 10e:	29 83       	std	Y+1, r18	; 0x01
 110:	29 81       	ldd	r18, Y+1	; 0x01
 112:	3a 81       	ldd	r19, Y+2	; 0x02
 114:	22 35       	cpi	r18, 0x52	; 82
 116:	33 40       	sbci	r19, 0x03	; 3
 118:	a0 f3       	brcs	.-24     	; 0x102 <custom_delay_ms+0x16>

#ifndef USART_H_
#define USART_H_

void custom_delay_ms(uint16_t ms) {
	for (uint16_t i = 0; i < ms; i++) {
 11a:	4f 5f       	subi	r20, 0xFF	; 255
 11c:	5f 4f       	sbci	r21, 0xFF	; 255
 11e:	48 17       	cp	r20, r24
 120:	59 07       	cpc	r21, r25
 122:	60 f3       	brcs	.-40     	; 0xfc <custom_delay_ms+0x10>
		for (volatile uint16_t j = 0; j < 850; j++) { // Adjust this value for the desired delay
			asm("nop"); // No operation, helps in preventing optimization
		}
	}
}
 124:	0f 90       	pop	r0
 126:	0f 90       	pop	r0
 128:	df 91       	pop	r29
 12a:	cf 91       	pop	r28
 12c:	08 95       	ret

0000012e <init_USART>:


void init_USART(unsigned int ubrr){
	// Set baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
 12e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
 132:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	// Enable transmitter and receiver
	UCSR0B = (1 << TXEN0) | (1 << RXEN0);
 136:	88 e1       	ldi	r24, 0x18	; 24
 138:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	// Set frame format: 8 data bits, 1 stop bit
	UCSR0C = (3 << UCSZ00);
 13c:	86 e0       	ldi	r24, 0x06	; 6
 13e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 142:	08 95       	ret

00000144 <transferMessage>:
}

void transferMessage(unsigned char data){
	while (!(UCSR0A & (1<<UDRE0)));
 144:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 148:	95 ff       	sbrs	r25, 5
 14a:	fc cf       	rjmp	.-8      	; 0x144 <transferMessage>
	UDR0 = data;
 14c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 150:	08 95       	ret

00000152 <receiveMessage>:
}

char receiveMessage(){
	// Wait for data to be received
	if (!(UCSR0A & (1 << RXC0))) {
 152:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 156:	88 23       	and	r24, r24
 158:	1c f4       	brge	.+6      	; 0x160 <receiveMessage+0xe>
		return '\0';
	}
	// Get and return received data from buffer
	return UDR0;
 15a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 15e:	08 95       	ret
}

char receiveMessage(){
	// Wait for data to be received
	if (!(UCSR0A & (1 << RXC0))) {
		return '\0';
 160:	80 e0       	ldi	r24, 0x00	; 0
	}
	// Get and return received data from buffer
	return UDR0;
}
 162:	08 95       	ret

00000164 <init_driving_PWM>:

#include "definitions.h"

void init_driving_PWM() {
	// Set OC0A (PD6) and OC0B (PD5) as output pins, motor speed pins
	DDRD |= (1 << DDD6) | (1 << DDD5);
 164:	8a b1       	in	r24, 0x0a	; 10
 166:	80 66       	ori	r24, 0x60	; 96
 168:	8a b9       	out	0x0a, r24	; 10
	// Configure Timer0 for Fast PWM mode, non-inverted output (WGM02:0 = 3)
	TCCR0A |= (1 << COM0A1) | (1 << COM0B1) | (1 << WGM01) | (1 << WGM00);
 16a:	84 b5       	in	r24, 0x24	; 36
 16c:	83 6a       	ori	r24, 0xA3	; 163
 16e:	84 bd       	out	0x24, r24	; 36
	//TCCR0B |= (1 << WGM02);

	// Set prescaler to 64
	TCCR0B |= (1 << CS01) | (1 << CS00);
 170:	85 b5       	in	r24, 0x25	; 37
 172:	83 60       	ori	r24, 0x03	; 3
 174:	85 bd       	out	0x25, r24	; 37
 176:	08 95       	ret

00000178 <setMotorASpeed>:
}

// Function to set speed of motor A
void setMotorASpeed(uint8_t speed) {
	if (speed == 0) {
 178:	81 11       	cpse	r24, r1
 17a:	02 c0       	rjmp	.+4      	; 0x180 <setMotorASpeed+0x8>
		OCR0B = 0; // Turn off PWM output
 17c:	18 bc       	out	0x28, r1	; 40
 17e:	08 95       	ret
		} else {
		OCR0B = speed; // Set PWM duty cycle
 180:	88 bd       	out	0x28, r24	; 40
 182:	08 95       	ret

00000184 <setMotorBSpeed>:
	}
}

// Function to set speed of motor B
void setMotorBSpeed(uint8_t speed) {
	if (speed == 0) {
 184:	81 11       	cpse	r24, r1
 186:	02 c0       	rjmp	.+4      	; 0x18c <setMotorBSpeed+0x8>
		OCR0A = 0; // Turn off PWM output
 188:	17 bc       	out	0x27, r1	; 39
 18a:	08 95       	ret
		} else {
		OCR0A = speed; // Set PWM duty cycle
 18c:	87 bd       	out	0x27, r24	; 39
 18e:	08 95       	ret

00000190 <setMotorADirection>:
	}
}

// Function to control direction of motor A
void setMotorADirection(uint8_t direction) {
	if (direction == 1) { // Forward
 190:	81 30       	cpi	r24, 0x01	; 1
 192:	21 f4       	brne	.+8      	; 0x19c <setMotorADirection+0xc>
		PORTB |= (1 << A_DIRECTION_PIN); // Set A_DIRECTION_PIN
 194:	85 b1       	in	r24, 0x05	; 5
 196:	84 60       	ori	r24, 0x04	; 4
 198:	85 b9       	out	0x05, r24	; 5
 19a:	08 95       	ret
		} else { // Reverse
		PORTB &= ~(1 << A_DIRECTION_PIN); // Clear A_DIRECTION_PIN
 19c:	85 b1       	in	r24, 0x05	; 5
 19e:	8b 7f       	andi	r24, 0xFB	; 251
 1a0:	85 b9       	out	0x05, r24	; 5
 1a2:	08 95       	ret

000001a4 <setMotorBDirection>:
	}
}

// Function to control direction of motor B
void setMotorBDirection(uint8_t direction) {
	if (direction == 1) { // Forward
 1a4:	81 30       	cpi	r24, 0x01	; 1
 1a6:	21 f4       	brne	.+8      	; 0x1b0 <setMotorBDirection+0xc>
		PORTB |= (1 << B_DIRECTION_PIN); // Set B_DIRECTION_PIN
 1a8:	85 b1       	in	r24, 0x05	; 5
 1aa:	88 60       	ori	r24, 0x08	; 8
 1ac:	85 b9       	out	0x05, r24	; 5
 1ae:	08 95       	ret
		} else { // Reverse
		PORTB &= ~(1 << B_DIRECTION_PIN); // Clear B_DIRECTION_PIN
 1b0:	85 b1       	in	r24, 0x05	; 5
 1b2:	87 7f       	andi	r24, 0xF7	; 247
 1b4:	85 b9       	out	0x05, r24	; 5
 1b6:	08 95       	ret

000001b8 <main>:
#include "usart.h"
#include "movement.h"
//#include "servo.h"

int main(void)
{
 1b8:	cf 93       	push	r28
 1ba:	df 93       	push	r29
 1bc:	cd b7       	in	r28, 0x3d	; 61
 1be:	de b7       	in	r29, 0x3e	; 62
 1c0:	c4 55       	subi	r28, 0x54	; 84
 1c2:	d1 09       	sbc	r29, r1
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	f8 94       	cli
 1c8:	de bf       	out	0x3e, r29	; 62
 1ca:	0f be       	out	0x3f, r0	; 63
 1cc:	cd bf       	out	0x3d, r28	; 61
    
	init_ADC();
 1ce:	0e 94 53 00 	call	0xa6	; 0xa6 <init_ADC>
	init_USART(MYUBRR);
 1d2:	87 e6       	ldi	r24, 0x67	; 103
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	0e 94 97 00 	call	0x12e	; 0x12e <init_USART>
 	init_driving_PWM();
 1da:	0e 94 b2 00 	call	0x164	; 0x164 <init_driving_PWM>
 	//init_servo_PWM();
	
	DDRB |= (1 << 2);
 1de:	84 b1       	in	r24, 0x04	; 4
 1e0:	84 60       	ori	r24, 0x04	; 4
 1e2:	84 b9       	out	0x04, r24	; 4
	
	
	int white_limit = (int)(WHITE + 30);
	int black_limit = (int)(BLACK - 30);
	//servo_set_angle(0,180);
	PORTB |= (1 << 2);
 1e4:	85 b1       	in	r24, 0x05	; 5
 1e6:	84 60       	ori	r24, 0x04	; 4
 1e8:	85 b9       	out	0x05, r24	; 5
	//int16_t i = 0;
	DDRB |= (1 << A_DIRECTION_PIN) | (1 << B_DIRECTION_PIN); //set direction pins as output
 1ea:	84 b1       	in	r24, 0x04	; 4
 1ec:	8c 60       	ori	r24, 0x0C	; 12
 1ee:	84 b9       	out	0x04, r24	; 4
	
	setMotorADirection(1);
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	0e 94 c8 00 	call	0x190	; 0x190 <setMotorADirection>
	setMotorBDirection(1);
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <setMotorBDirection>
	setMotorASpeed(0);
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	0e 94 bc 00 	call	0x178	; 0x178 <setMotorASpeed>
	setMotorBSpeed(0);
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	0e 94 c2 00 	call	0x184	; 0x184 <setMotorBSpeed>
	
	sei();
 208:	78 94       	sei
	init_USART(MYUBRR);
 	init_driving_PWM();
 	//init_servo_PWM();
	
	DDRB |= (1 << 2);
	int done = 1;
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	65 96       	adiw	r28, 0x15	; 21
 210:	9f af       	std	Y+63, r25	; 0x3f
 212:	8e af       	std	Y+62, r24	; 0x3e
 214:	65 97       	sbiw	r28, 0x15	; 21
// 		for (i=180;i>=0;i--){
// 			servo_set_angle(i,180);
// 			_delay_ms(40);
// 		}
		
		int sensorLeft = readADC(SENSOR_LEFT_CHANNEL) + 40;
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	0e 94 61 00 	call	0xc2	; 0xc2 <readADC>
 21c:	8c 01       	movw	r16, r24
 21e:	08 5d       	subi	r16, 0xD8	; 216
 220:	1f 4f       	sbci	r17, 0xFF	; 255
 222:	38 01       	movw	r6, r16
		int lineTrackingSensorLeft = readADC(LINE_TRACKING_SENSOR_LEFT_CHANNEL) + 120;
 224:	85 e0       	ldi	r24, 0x05	; 5
 226:	0e 94 61 00 	call	0xc2	; 0xc2 <readADC>
 22a:	88 58       	subi	r24, 0x88	; 136
 22c:	9f 4f       	sbci	r25, 0xFF	; 255
 22e:	7c 01       	movw	r14, r24
 230:	2c 01       	movw	r4, r24
		int lineTrackingSensorMiddle = readADC(LINE_TRACKING_SENSOR_MIDDLE_CHANNEL) + 90;
 232:	82 e0       	ldi	r24, 0x02	; 2
 234:	0e 94 61 00 	call	0xc2	; 0xc2 <readADC>
 238:	86 5a       	subi	r24, 0xA6	; 166
 23a:	9f 4f       	sbci	r25, 0xFF	; 255
 23c:	6c 01       	movw	r12, r24
 23e:	63 96       	adiw	r28, 0x13	; 19
 240:	9f af       	std	Y+63, r25	; 0x3f
 242:	8e af       	std	Y+62, r24	; 0x3e
 244:	63 97       	sbiw	r28, 0x13	; 19
		int lineTrackingSensorRight = readADC(LINE_TRACKING_SENSOR_RIGHT_CHANNEL);
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	0e 94 61 00 	call	0xc2	; 0xc2 <readADC>
 24c:	4c 01       	movw	r8, r24
		int sensorRight = readADC(SENSOR_RIGHT_CHANNEL) + 40;
 24e:	83 e0       	ldi	r24, 0x03	; 3
 250:	0e 94 61 00 	call	0xc2	; 0xc2 <readADC>
 254:	88 96       	adiw	r24, 0x28	; 40
 256:	5c 01       	movw	r10, r24
 258:	1c 01       	movw	r2, r24
		
		custom_delay_ms(50);
 25a:	82 e3       	ldi	r24, 0x32	; 50
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	0e 94 76 00 	call	0xec	; 0xec <custom_delay_ms>
		
		// Convert distance to string
		char buffer[80];
		snprintf(buffer, sizeof(buffer), "%d %d %d %d %d \n", sensorLeft, lineTrackingSensorLeft, lineTrackingSensorMiddle, lineTrackingSensorRight, sensorRight);
 262:	bf 92       	push	r11
 264:	af 92       	push	r10
 266:	9f 92       	push	r9
 268:	8f 92       	push	r8
 26a:	df 92       	push	r13
 26c:	cf 92       	push	r12
 26e:	ff 92       	push	r15
 270:	ef 92       	push	r14
 272:	1f 93       	push	r17
 274:	0f 93       	push	r16
 276:	86 e0       	ldi	r24, 0x06	; 6
 278:	91 e0       	ldi	r25, 0x01	; 1
 27a:	9f 93       	push	r25
 27c:	8f 93       	push	r24
 27e:	1f 92       	push	r1
 280:	80 e5       	ldi	r24, 0x50	; 80
 282:	8f 93       	push	r24
 284:	ce 01       	movw	r24, r28
 286:	01 96       	adiw	r24, 0x01	; 1
 288:	9f 93       	push	r25
 28a:	8f 93       	push	r24
 28c:	0e 94 37 02 	call	0x46e	; 0x46e <snprintf>
		
		// Transmit distance over UART
		for (int i = 0; buffer[i] != '\0'; i++) {
 290:	0f b6       	in	r0, 0x3f	; 63
 292:	f8 94       	cli
 294:	de bf       	out	0x3e, r29	; 62
 296:	0f be       	out	0x3f, r0	; 63
 298:	cd bf       	out	0x3d, r28	; 61
 29a:	00 e0       	ldi	r16, 0x00	; 0
 29c:	10 e0       	ldi	r17, 0x00	; 0
 29e:	04 c0       	rjmp	.+8      	; 0x2a8 <main+0xf0>
			transferMessage(buffer[i]);
 2a0:	0e 94 a2 00 	call	0x144	; 0x144 <transferMessage>
		// Convert distance to string
		char buffer[80];
		snprintf(buffer, sizeof(buffer), "%d %d %d %d %d \n", sensorLeft, lineTrackingSensorLeft, lineTrackingSensorMiddle, lineTrackingSensorRight, sensorRight);
		
		// Transmit distance over UART
		for (int i = 0; buffer[i] != '\0'; i++) {
 2a4:	0f 5f       	subi	r16, 0xFF	; 255
 2a6:	1f 4f       	sbci	r17, 0xFF	; 255
 2a8:	e1 e0       	ldi	r30, 0x01	; 1
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	ec 0f       	add	r30, r28
 2ae:	fd 1f       	adc	r31, r29
 2b0:	e0 0f       	add	r30, r16
 2b2:	f1 1f       	adc	r31, r17
 2b4:	80 81       	ld	r24, Z
 2b6:	81 11       	cpse	r24, r1
 2b8:	f3 cf       	rjmp	.-26     	; 0x2a0 <main+0xe8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ba:	87 e8       	ldi	r24, 0x87	; 135
 2bc:	93 e1       	ldi	r25, 0x13	; 19
 2be:	01 97       	sbiw	r24, 0x01	; 1
 2c0:	f1 f7       	brne	.-4      	; 0x2be <main+0x106>
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <main+0x10c>
 2c4:	00 00       	nop
			transferMessage(buffer[i]);
		}
		_delay_ms(20);
		// Delay before next measurement
		
		char receivedMessage = receiveMessage();
 2c6:	0e 94 a9 00 	call	0x152	; 0x152 <receiveMessage>
 2ca:	18 2f       	mov	r17, r24
 2cc:	e3 ec       	ldi	r30, 0xC3	; 195
 2ce:	f9 e0       	ldi	r31, 0x09	; 9
 2d0:	31 97       	sbiw	r30, 0x01	; 1
 2d2:	f1 f7       	brne	.-4      	; 0x2d0 <main+0x118>
 2d4:	00 c0       	rjmp	.+0      	; 0x2d6 <main+0x11e>
 2d6:	00 00       	nop
		
		_delay_ms(10);
		if(receivedMessage == 'A' || receivedMessage == 'B' && done == 1){
 2d8:	81 34       	cpi	r24, 0x41	; 65
 2da:	51 f0       	breq	.+20     	; 0x2f0 <main+0x138>
 2dc:	82 34       	cpi	r24, 0x42	; 66
 2de:	09 f0       	breq	.+2      	; 0x2e2 <main+0x12a>
 2e0:	86 c0       	rjmp	.+268    	; 0x3ee <main+0x236>
 2e2:	65 96       	adiw	r28, 0x15	; 21
 2e4:	8e ad       	ldd	r24, Y+62	; 0x3e
 2e6:	9f ad       	ldd	r25, Y+63	; 0x3f
 2e8:	65 97       	sbiw	r28, 0x15	; 21
 2ea:	01 97       	sbiw	r24, 0x01	; 1
 2ec:	09 f0       	breq	.+2      	; 0x2f0 <main+0x138>
 2ee:	7f c0       	rjmp	.+254    	; 0x3ee <main+0x236>
			
			if(receivedMessage == 'B' && done){
 2f0:	12 34       	cpi	r17, 0x42	; 66
 2f2:	a1 f4       	brne	.+40     	; 0x31c <main+0x164>
 2f4:	65 96       	adiw	r28, 0x15	; 21
 2f6:	ee ad       	ldd	r30, Y+62	; 0x3e
 2f8:	ff ad       	ldd	r31, Y+63	; 0x3f
 2fa:	65 97       	sbiw	r28, 0x15	; 21
 2fc:	ef 2b       	or	r30, r31
 2fe:	71 f0       	breq	.+28     	; 0x31c <main+0x164>
				setMotorASpeed(0);
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	0e 94 bc 00 	call	0x178	; 0x178 <setMotorASpeed>
				setMotorBSpeed(0);
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	0e 94 c2 00 	call	0x184	; 0x184 <setMotorBSpeed>
				custom_delay_ms(5000);
 30c:	88 e8       	ldi	r24, 0x88	; 136
 30e:	93 e1       	ldi	r25, 0x13	; 19
 310:	0e 94 76 00 	call	0xec	; 0xec <custom_delay_ms>
				done = 0;
 314:	65 96       	adiw	r28, 0x15	; 21
 316:	1f ae       	std	Y+63, r1	; 0x3f
 318:	1e ae       	std	Y+62, r1	; 0x3e
 31a:	65 97       	sbiw	r28, 0x15	; 21
			}
			if(receivedMessage == 'A'){done = 1;}
 31c:	11 34       	cpi	r17, 0x41	; 65
 31e:	31 f4       	brne	.+12     	; 0x32c <main+0x174>
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	65 96       	adiw	r28, 0x15	; 21
 326:	9f af       	std	Y+63, r25	; 0x3f
 328:	8e af       	std	Y+62, r24	; 0x3e
 32a:	65 97       	sbiw	r28, 0x15	; 21
			if(sensorLeft > white_limit && lineTrackingSensorLeft > white_limit && lineTrackingSensorMiddle > white_limit && lineTrackingSensorMiddle < black_limit && lineTrackingSensorRight < black_limit && sensorRight < black_limit){
 32c:	97 e2       	ldi	r25, 0x27	; 39
 32e:	69 16       	cp	r6, r25
 330:	92 e0       	ldi	r25, 0x02	; 2
 332:	79 06       	cpc	r7, r25
 334:	2c f1       	brlt	.+74     	; 0x380 <main+0x1c8>
 336:	e7 e2       	ldi	r30, 0x27	; 39
 338:	4e 16       	cp	r4, r30
 33a:	e2 e0       	ldi	r30, 0x02	; 2
 33c:	5e 06       	cpc	r5, r30
 33e:	04 f1       	brlt	.+64     	; 0x380 <main+0x1c8>
 340:	63 96       	adiw	r28, 0x13	; 19
 342:	8e ad       	ldd	r24, Y+62	; 0x3e
 344:	9f ad       	ldd	r25, Y+63	; 0x3f
 346:	63 97       	sbiw	r28, 0x13	; 19
 348:	87 32       	cpi	r24, 0x27	; 39
 34a:	e2 e0       	ldi	r30, 0x02	; 2
 34c:	9e 07       	cpc	r25, r30
 34e:	c4 f0       	brlt	.+48     	; 0x380 <main+0x1c8>
 350:	82 30       	cpi	r24, 0x02	; 2
 352:	93 40       	sbci	r25, 0x03	; 3
 354:	ac f4       	brge	.+42     	; 0x380 <main+0x1c8>
 356:	22 e0       	ldi	r18, 0x02	; 2
 358:	82 16       	cp	r8, r18
 35a:	23 e0       	ldi	r18, 0x03	; 3
 35c:	92 06       	cpc	r9, r18
 35e:	84 f4       	brge	.+32     	; 0x380 <main+0x1c8>
 360:	82 e0       	ldi	r24, 0x02	; 2
 362:	28 16       	cp	r2, r24
 364:	83 e0       	ldi	r24, 0x03	; 3
 366:	38 06       	cpc	r3, r24
 368:	5c f4       	brge	.+22     	; 0x380 <main+0x1c8>
				setMotorASpeed(driveSpeedFull); // RIGHT
 36a:	08 e1       	ldi	r16, 0x18	; 24
 36c:	11 e0       	ldi	r17, 0x01	; 1
 36e:	f8 01       	movw	r30, r16
 370:	80 81       	ld	r24, Z
 372:	0e 94 bc 00 	call	0x178	; 0x178 <setMotorASpeed>
				setMotorBSpeed(driveSpeedFull); // LEFT
 376:	f8 01       	movw	r30, r16
 378:	80 81       	ld	r24, Z
 37a:	0e 94 c2 00 	call	0x184	; 0x184 <setMotorBSpeed>
 37e:	70 c0       	rjmp	.+224    	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
				}else{
				if(sensorLeft < white_limit){
 380:	f6 e2       	ldi	r31, 0x26	; 38
 382:	6f 16       	cp	r6, r31
 384:	f2 e0       	ldi	r31, 0x02	; 2
 386:	7f 06       	cpc	r7, r31
 388:	bc f4       	brge	.+46     	; 0x3b8 <main+0x200>
					if(lineTrackingSensorLeft < white_limit){
 38a:	26 e2       	ldi	r18, 0x26	; 38
 38c:	42 16       	cp	r4, r18
 38e:	22 e0       	ldi	r18, 0x02	; 2
 390:	52 06       	cpc	r5, r18
 392:	4c f4       	brge	.+18     	; 0x3a6 <main+0x1ee>
						setMotorASpeed(driveSpeedTruning); // RIGHT
 394:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <driveSpeedTruning>
 398:	0e 94 bc 00 	call	0x178	; 0x178 <setMotorASpeed>
						setMotorBSpeed(hardTurningSPeed); // LEFT
 39c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3a0:	0e 94 c2 00 	call	0x184	; 0x184 <setMotorBSpeed>
 3a4:	5d c0       	rjmp	.+186    	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
						}else{
						setMotorASpeed(driveSpeedTruning); // RIGHT
 3a6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <driveSpeedTruning>
 3aa:	0e 94 bc 00 	call	0x178	; 0x178 <setMotorASpeed>
						setMotorBSpeed(turningSpeed); // LEFT
 3ae:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <turningSpeed>
 3b2:	0e 94 c2 00 	call	0x184	; 0x184 <setMotorBSpeed>
 3b6:	54 c0       	rjmp	.+168    	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
					}
				}else if(sensorRight > black_limit){
 3b8:	83 e0       	ldi	r24, 0x03	; 3
 3ba:	28 16       	cp	r2, r24
 3bc:	38 06       	cpc	r3, r24
 3be:	0c f4       	brge	.+2      	; 0x3c2 <main+0x20a>
 3c0:	4f c0       	rjmp	.+158    	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
					if(lineTrackingSensorRight > black_limit){
 3c2:	93 e0       	ldi	r25, 0x03	; 3
 3c4:	89 16       	cp	r8, r25
 3c6:	99 06       	cpc	r9, r25
 3c8:	4c f0       	brlt	.+18     	; 0x3dc <main+0x224>
						setMotorASpeed(hardTurningSPeed); // RIGHT
 3ca:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3ce:	0e 94 bc 00 	call	0x178	; 0x178 <setMotorASpeed>
						setMotorBSpeed(driveSpeedTruning); // LEFT
 3d2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <driveSpeedTruning>
 3d6:	0e 94 c2 00 	call	0x184	; 0x184 <setMotorBSpeed>
 3da:	42 c0       	rjmp	.+132    	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
						}else{
						setMotorASpeed(turningSpeed); // RIGHT
 3dc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <turningSpeed>
 3e0:	0e 94 bc 00 	call	0x178	; 0x178 <setMotorASpeed>
						setMotorBSpeed(driveSpeedTruning); // LEFT
 3e4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <driveSpeedTruning>
 3e8:	0e 94 c2 00 	call	0x184	; 0x184 <setMotorBSpeed>
 3ec:	39 c0       	rjmp	.+114    	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
					}
				}
			}
		}else if(receivedMessage == 'C'){
 3ee:	13 34       	cpi	r17, 0x43	; 67
 3f0:	39 f4       	brne	.+14     	; 0x400 <__EEPROM_REGION_LENGTH__>
			setMotorASpeed(0);
 3f2:	80 e0       	ldi	r24, 0x00	; 0
 3f4:	0e 94 bc 00 	call	0x178	; 0x178 <setMotorASpeed>
			setMotorBSpeed(0);
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	0e 94 c2 00 	call	0x184	; 0x184 <setMotorBSpeed>
 3fe:	30 c0       	rjmp	.+96     	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
		}else if(receivedMessage == '\0'){
 400:	11 11       	cpse	r17, r1
 402:	1f c0       	rjmp	.+62     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
			transferMessage('I');
 404:	89 e4       	ldi	r24, 0x49	; 73
 406:	0e 94 a2 00 	call	0x144	; 0x144 <transferMessage>
			transferMessage(' ');
 40a:	80 e2       	ldi	r24, 0x20	; 32
 40c:	0e 94 a2 00 	call	0x144	; 0x144 <transferMessage>
			transferMessage('A');
 410:	81 e4       	ldi	r24, 0x41	; 65
 412:	0e 94 a2 00 	call	0x144	; 0x144 <transferMessage>
			transferMessage('M');
 416:	8d e4       	ldi	r24, 0x4D	; 77
 418:	0e 94 a2 00 	call	0x144	; 0x144 <transferMessage>
			transferMessage(' ');
 41c:	80 e2       	ldi	r24, 0x20	; 32
 41e:	0e 94 a2 00 	call	0x144	; 0x144 <transferMessage>
			transferMessage('R');
 422:	82 e5       	ldi	r24, 0x52	; 82
 424:	0e 94 a2 00 	call	0x144	; 0x144 <transferMessage>
			transferMessage('E');
 428:	85 e4       	ldi	r24, 0x45	; 69
 42a:	0e 94 a2 00 	call	0x144	; 0x144 <transferMessage>
			transferMessage('A');
 42e:	81 e4       	ldi	r24, 0x41	; 65
 430:	0e 94 a2 00 	call	0x144	; 0x144 <transferMessage>
			transferMessage('D');
 434:	84 e4       	ldi	r24, 0x44	; 68
 436:	0e 94 a2 00 	call	0x144	; 0x144 <transferMessage>
			transferMessage('Y');
 43a:	89 e5       	ldi	r24, 0x59	; 89
 43c:	0e 94 a2 00 	call	0x144	; 0x144 <transferMessage>
 440:	0f c0       	rjmp	.+30     	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
		}else{
			transferMessage('E');
 442:	85 e4       	ldi	r24, 0x45	; 69
 444:	0e 94 a2 00 	call	0x144	; 0x144 <transferMessage>
			transferMessage('R');
 448:	82 e5       	ldi	r24, 0x52	; 82
 44a:	0e 94 a2 00 	call	0x144	; 0x144 <transferMessage>
			transferMessage('R');
 44e:	82 e5       	ldi	r24, 0x52	; 82
 450:	0e 94 a2 00 	call	0x144	; 0x144 <transferMessage>
			transferMessage('O');
 454:	8f e4       	ldi	r24, 0x4F	; 79
 456:	0e 94 a2 00 	call	0x144	; 0x144 <transferMessage>
			transferMessage('R');
 45a:	82 e5       	ldi	r24, 0x52	; 82
 45c:	0e 94 a2 00 	call	0x144	; 0x144 <transferMessage>
 460:	e7 ea       	ldi	r30, 0xA7	; 167
 462:	f1 e6       	ldi	r31, 0x61	; 97
 464:	31 97       	sbiw	r30, 0x01	; 1
 466:	f1 f7       	brne	.-4      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 468:	00 c0       	rjmp	.+0      	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
 46a:	00 00       	nop
// 		setMotorBSpeed(90);
// 		_delay_ms(2000);
// 		setMotorASpeed(0);
// 		setMotorBSpeed(0);
// 		_delay_ms(2000);
    }
 46c:	d4 ce       	rjmp	.-600    	; 0x216 <main+0x5e>

0000046e <snprintf>:
 46e:	ae e0       	ldi	r26, 0x0E	; 14
 470:	b0 e0       	ldi	r27, 0x00	; 0
 472:	ed e3       	ldi	r30, 0x3D	; 61
 474:	f2 e0       	ldi	r31, 0x02	; 2
 476:	0c 94 06 05 	jmp	0xa0c	; 0xa0c <__prologue_saves__+0x1c>
 47a:	0d 89       	ldd	r16, Y+21	; 0x15
 47c:	1e 89       	ldd	r17, Y+22	; 0x16
 47e:	8f 89       	ldd	r24, Y+23	; 0x17
 480:	98 8d       	ldd	r25, Y+24	; 0x18
 482:	26 e0       	ldi	r18, 0x06	; 6
 484:	2c 83       	std	Y+4, r18	; 0x04
 486:	1a 83       	std	Y+2, r17	; 0x02
 488:	09 83       	std	Y+1, r16	; 0x01
 48a:	97 ff       	sbrs	r25, 7
 48c:	02 c0       	rjmp	.+4      	; 0x492 <snprintf+0x24>
 48e:	80 e0       	ldi	r24, 0x00	; 0
 490:	90 e8       	ldi	r25, 0x80	; 128
 492:	01 97       	sbiw	r24, 0x01	; 1
 494:	9e 83       	std	Y+6, r25	; 0x06
 496:	8d 83       	std	Y+5, r24	; 0x05
 498:	ae 01       	movw	r20, r28
 49a:	45 5e       	subi	r20, 0xE5	; 229
 49c:	5f 4f       	sbci	r21, 0xFF	; 255
 49e:	69 8d       	ldd	r22, Y+25	; 0x19
 4a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
 4a2:	ce 01       	movw	r24, r28
 4a4:	01 96       	adiw	r24, 0x01	; 1
 4a6:	0e 94 67 02 	call	0x4ce	; 0x4ce <vfprintf>
 4aa:	4d 81       	ldd	r20, Y+5	; 0x05
 4ac:	5e 81       	ldd	r21, Y+6	; 0x06
 4ae:	57 fd       	sbrc	r21, 7
 4b0:	0a c0       	rjmp	.+20     	; 0x4c6 <snprintf+0x58>
 4b2:	2f 81       	ldd	r18, Y+7	; 0x07
 4b4:	38 85       	ldd	r19, Y+8	; 0x08
 4b6:	42 17       	cp	r20, r18
 4b8:	53 07       	cpc	r21, r19
 4ba:	0c f4       	brge	.+2      	; 0x4be <snprintf+0x50>
 4bc:	9a 01       	movw	r18, r20
 4be:	f8 01       	movw	r30, r16
 4c0:	e2 0f       	add	r30, r18
 4c2:	f3 1f       	adc	r31, r19
 4c4:	10 82       	st	Z, r1
 4c6:	2e 96       	adiw	r28, 0x0e	; 14
 4c8:	e4 e0       	ldi	r30, 0x04	; 4
 4ca:	0c 94 22 05 	jmp	0xa44	; 0xa44 <__epilogue_restores__+0x1c>

000004ce <vfprintf>:
 4ce:	ab e0       	ldi	r26, 0x0B	; 11
 4d0:	b0 e0       	ldi	r27, 0x00	; 0
 4d2:	ed e6       	ldi	r30, 0x6D	; 109
 4d4:	f2 e0       	ldi	r31, 0x02	; 2
 4d6:	0c 94 f8 04 	jmp	0x9f0	; 0x9f0 <__prologue_saves__>
 4da:	6c 01       	movw	r12, r24
 4dc:	7b 01       	movw	r14, r22
 4de:	8a 01       	movw	r16, r20
 4e0:	fc 01       	movw	r30, r24
 4e2:	17 82       	std	Z+7, r1	; 0x07
 4e4:	16 82       	std	Z+6, r1	; 0x06
 4e6:	83 81       	ldd	r24, Z+3	; 0x03
 4e8:	81 ff       	sbrs	r24, 1
 4ea:	cc c1       	rjmp	.+920    	; 0x884 <__DATA_REGION_LENGTH__+0x84>
 4ec:	ce 01       	movw	r24, r28
 4ee:	01 96       	adiw	r24, 0x01	; 1
 4f0:	3c 01       	movw	r6, r24
 4f2:	f6 01       	movw	r30, r12
 4f4:	93 81       	ldd	r25, Z+3	; 0x03
 4f6:	f7 01       	movw	r30, r14
 4f8:	93 fd       	sbrc	r25, 3
 4fa:	85 91       	lpm	r24, Z+
 4fc:	93 ff       	sbrs	r25, 3
 4fe:	81 91       	ld	r24, Z+
 500:	7f 01       	movw	r14, r30
 502:	88 23       	and	r24, r24
 504:	09 f4       	brne	.+2      	; 0x508 <vfprintf+0x3a>
 506:	ba c1       	rjmp	.+884    	; 0x87c <__DATA_REGION_LENGTH__+0x7c>
 508:	85 32       	cpi	r24, 0x25	; 37
 50a:	39 f4       	brne	.+14     	; 0x51a <vfprintf+0x4c>
 50c:	93 fd       	sbrc	r25, 3
 50e:	85 91       	lpm	r24, Z+
 510:	93 ff       	sbrs	r25, 3
 512:	81 91       	ld	r24, Z+
 514:	7f 01       	movw	r14, r30
 516:	85 32       	cpi	r24, 0x25	; 37
 518:	29 f4       	brne	.+10     	; 0x524 <vfprintf+0x56>
 51a:	b6 01       	movw	r22, r12
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	0e 94 5e 04 	call	0x8bc	; 0x8bc <fputc>
 522:	e7 cf       	rjmp	.-50     	; 0x4f2 <vfprintf+0x24>
 524:	91 2c       	mov	r9, r1
 526:	21 2c       	mov	r2, r1
 528:	31 2c       	mov	r3, r1
 52a:	ff e1       	ldi	r31, 0x1F	; 31
 52c:	f3 15       	cp	r31, r3
 52e:	d8 f0       	brcs	.+54     	; 0x566 <vfprintf+0x98>
 530:	8b 32       	cpi	r24, 0x2B	; 43
 532:	79 f0       	breq	.+30     	; 0x552 <vfprintf+0x84>
 534:	38 f4       	brcc	.+14     	; 0x544 <vfprintf+0x76>
 536:	80 32       	cpi	r24, 0x20	; 32
 538:	79 f0       	breq	.+30     	; 0x558 <vfprintf+0x8a>
 53a:	83 32       	cpi	r24, 0x23	; 35
 53c:	a1 f4       	brne	.+40     	; 0x566 <vfprintf+0x98>
 53e:	23 2d       	mov	r18, r3
 540:	20 61       	ori	r18, 0x10	; 16
 542:	1d c0       	rjmp	.+58     	; 0x57e <vfprintf+0xb0>
 544:	8d 32       	cpi	r24, 0x2D	; 45
 546:	61 f0       	breq	.+24     	; 0x560 <vfprintf+0x92>
 548:	80 33       	cpi	r24, 0x30	; 48
 54a:	69 f4       	brne	.+26     	; 0x566 <vfprintf+0x98>
 54c:	23 2d       	mov	r18, r3
 54e:	21 60       	ori	r18, 0x01	; 1
 550:	16 c0       	rjmp	.+44     	; 0x57e <vfprintf+0xb0>
 552:	83 2d       	mov	r24, r3
 554:	82 60       	ori	r24, 0x02	; 2
 556:	38 2e       	mov	r3, r24
 558:	e3 2d       	mov	r30, r3
 55a:	e4 60       	ori	r30, 0x04	; 4
 55c:	3e 2e       	mov	r3, r30
 55e:	2a c0       	rjmp	.+84     	; 0x5b4 <vfprintf+0xe6>
 560:	f3 2d       	mov	r31, r3
 562:	f8 60       	ori	r31, 0x08	; 8
 564:	1d c0       	rjmp	.+58     	; 0x5a0 <vfprintf+0xd2>
 566:	37 fc       	sbrc	r3, 7
 568:	2d c0       	rjmp	.+90     	; 0x5c4 <vfprintf+0xf6>
 56a:	20 ed       	ldi	r18, 0xD0	; 208
 56c:	28 0f       	add	r18, r24
 56e:	2a 30       	cpi	r18, 0x0A	; 10
 570:	40 f0       	brcs	.+16     	; 0x582 <vfprintf+0xb4>
 572:	8e 32       	cpi	r24, 0x2E	; 46
 574:	b9 f4       	brne	.+46     	; 0x5a4 <vfprintf+0xd6>
 576:	36 fc       	sbrc	r3, 6
 578:	81 c1       	rjmp	.+770    	; 0x87c <__DATA_REGION_LENGTH__+0x7c>
 57a:	23 2d       	mov	r18, r3
 57c:	20 64       	ori	r18, 0x40	; 64
 57e:	32 2e       	mov	r3, r18
 580:	19 c0       	rjmp	.+50     	; 0x5b4 <vfprintf+0xe6>
 582:	36 fe       	sbrs	r3, 6
 584:	06 c0       	rjmp	.+12     	; 0x592 <vfprintf+0xc4>
 586:	8a e0       	ldi	r24, 0x0A	; 10
 588:	98 9e       	mul	r9, r24
 58a:	20 0d       	add	r18, r0
 58c:	11 24       	eor	r1, r1
 58e:	92 2e       	mov	r9, r18
 590:	11 c0       	rjmp	.+34     	; 0x5b4 <vfprintf+0xe6>
 592:	ea e0       	ldi	r30, 0x0A	; 10
 594:	2e 9e       	mul	r2, r30
 596:	20 0d       	add	r18, r0
 598:	11 24       	eor	r1, r1
 59a:	22 2e       	mov	r2, r18
 59c:	f3 2d       	mov	r31, r3
 59e:	f0 62       	ori	r31, 0x20	; 32
 5a0:	3f 2e       	mov	r3, r31
 5a2:	08 c0       	rjmp	.+16     	; 0x5b4 <vfprintf+0xe6>
 5a4:	8c 36       	cpi	r24, 0x6C	; 108
 5a6:	21 f4       	brne	.+8      	; 0x5b0 <vfprintf+0xe2>
 5a8:	83 2d       	mov	r24, r3
 5aa:	80 68       	ori	r24, 0x80	; 128
 5ac:	38 2e       	mov	r3, r24
 5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <vfprintf+0xe6>
 5b0:	88 36       	cpi	r24, 0x68	; 104
 5b2:	41 f4       	brne	.+16     	; 0x5c4 <vfprintf+0xf6>
 5b4:	f7 01       	movw	r30, r14
 5b6:	93 fd       	sbrc	r25, 3
 5b8:	85 91       	lpm	r24, Z+
 5ba:	93 ff       	sbrs	r25, 3
 5bc:	81 91       	ld	r24, Z+
 5be:	7f 01       	movw	r14, r30
 5c0:	81 11       	cpse	r24, r1
 5c2:	b3 cf       	rjmp	.-154    	; 0x52a <vfprintf+0x5c>
 5c4:	98 2f       	mov	r25, r24
 5c6:	9f 7d       	andi	r25, 0xDF	; 223
 5c8:	95 54       	subi	r25, 0x45	; 69
 5ca:	93 30       	cpi	r25, 0x03	; 3
 5cc:	28 f4       	brcc	.+10     	; 0x5d8 <vfprintf+0x10a>
 5ce:	0c 5f       	subi	r16, 0xFC	; 252
 5d0:	1f 4f       	sbci	r17, 0xFF	; 255
 5d2:	9f e3       	ldi	r25, 0x3F	; 63
 5d4:	99 83       	std	Y+1, r25	; 0x01
 5d6:	0d c0       	rjmp	.+26     	; 0x5f2 <vfprintf+0x124>
 5d8:	83 36       	cpi	r24, 0x63	; 99
 5da:	31 f0       	breq	.+12     	; 0x5e8 <vfprintf+0x11a>
 5dc:	83 37       	cpi	r24, 0x73	; 115
 5de:	71 f0       	breq	.+28     	; 0x5fc <vfprintf+0x12e>
 5e0:	83 35       	cpi	r24, 0x53	; 83
 5e2:	09 f0       	breq	.+2      	; 0x5e6 <vfprintf+0x118>
 5e4:	59 c0       	rjmp	.+178    	; 0x698 <vfprintf+0x1ca>
 5e6:	21 c0       	rjmp	.+66     	; 0x62a <vfprintf+0x15c>
 5e8:	f8 01       	movw	r30, r16
 5ea:	80 81       	ld	r24, Z
 5ec:	89 83       	std	Y+1, r24	; 0x01
 5ee:	0e 5f       	subi	r16, 0xFE	; 254
 5f0:	1f 4f       	sbci	r17, 0xFF	; 255
 5f2:	88 24       	eor	r8, r8
 5f4:	83 94       	inc	r8
 5f6:	91 2c       	mov	r9, r1
 5f8:	53 01       	movw	r10, r6
 5fa:	13 c0       	rjmp	.+38     	; 0x622 <vfprintf+0x154>
 5fc:	28 01       	movw	r4, r16
 5fe:	f2 e0       	ldi	r31, 0x02	; 2
 600:	4f 0e       	add	r4, r31
 602:	51 1c       	adc	r5, r1
 604:	f8 01       	movw	r30, r16
 606:	a0 80       	ld	r10, Z
 608:	b1 80       	ldd	r11, Z+1	; 0x01
 60a:	36 fe       	sbrs	r3, 6
 60c:	03 c0       	rjmp	.+6      	; 0x614 <vfprintf+0x146>
 60e:	69 2d       	mov	r22, r9
 610:	70 e0       	ldi	r23, 0x00	; 0
 612:	02 c0       	rjmp	.+4      	; 0x618 <vfprintf+0x14a>
 614:	6f ef       	ldi	r22, 0xFF	; 255
 616:	7f ef       	ldi	r23, 0xFF	; 255
 618:	c5 01       	movw	r24, r10
 61a:	0e 94 53 04 	call	0x8a6	; 0x8a6 <strnlen>
 61e:	4c 01       	movw	r8, r24
 620:	82 01       	movw	r16, r4
 622:	f3 2d       	mov	r31, r3
 624:	ff 77       	andi	r31, 0x7F	; 127
 626:	3f 2e       	mov	r3, r31
 628:	16 c0       	rjmp	.+44     	; 0x656 <vfprintf+0x188>
 62a:	28 01       	movw	r4, r16
 62c:	22 e0       	ldi	r18, 0x02	; 2
 62e:	42 0e       	add	r4, r18
 630:	51 1c       	adc	r5, r1
 632:	f8 01       	movw	r30, r16
 634:	a0 80       	ld	r10, Z
 636:	b1 80       	ldd	r11, Z+1	; 0x01
 638:	36 fe       	sbrs	r3, 6
 63a:	03 c0       	rjmp	.+6      	; 0x642 <vfprintf+0x174>
 63c:	69 2d       	mov	r22, r9
 63e:	70 e0       	ldi	r23, 0x00	; 0
 640:	02 c0       	rjmp	.+4      	; 0x646 <vfprintf+0x178>
 642:	6f ef       	ldi	r22, 0xFF	; 255
 644:	7f ef       	ldi	r23, 0xFF	; 255
 646:	c5 01       	movw	r24, r10
 648:	0e 94 48 04 	call	0x890	; 0x890 <strnlen_P>
 64c:	4c 01       	movw	r8, r24
 64e:	f3 2d       	mov	r31, r3
 650:	f0 68       	ori	r31, 0x80	; 128
 652:	3f 2e       	mov	r3, r31
 654:	82 01       	movw	r16, r4
 656:	33 fc       	sbrc	r3, 3
 658:	1b c0       	rjmp	.+54     	; 0x690 <vfprintf+0x1c2>
 65a:	82 2d       	mov	r24, r2
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	88 16       	cp	r8, r24
 660:	99 06       	cpc	r9, r25
 662:	b0 f4       	brcc	.+44     	; 0x690 <vfprintf+0x1c2>
 664:	b6 01       	movw	r22, r12
 666:	80 e2       	ldi	r24, 0x20	; 32
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	0e 94 5e 04 	call	0x8bc	; 0x8bc <fputc>
 66e:	2a 94       	dec	r2
 670:	f4 cf       	rjmp	.-24     	; 0x65a <vfprintf+0x18c>
 672:	f5 01       	movw	r30, r10
 674:	37 fc       	sbrc	r3, 7
 676:	85 91       	lpm	r24, Z+
 678:	37 fe       	sbrs	r3, 7
 67a:	81 91       	ld	r24, Z+
 67c:	5f 01       	movw	r10, r30
 67e:	b6 01       	movw	r22, r12
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	0e 94 5e 04 	call	0x8bc	; 0x8bc <fputc>
 686:	21 10       	cpse	r2, r1
 688:	2a 94       	dec	r2
 68a:	21 e0       	ldi	r18, 0x01	; 1
 68c:	82 1a       	sub	r8, r18
 68e:	91 08       	sbc	r9, r1
 690:	81 14       	cp	r8, r1
 692:	91 04       	cpc	r9, r1
 694:	71 f7       	brne	.-36     	; 0x672 <vfprintf+0x1a4>
 696:	e8 c0       	rjmp	.+464    	; 0x868 <__DATA_REGION_LENGTH__+0x68>
 698:	84 36       	cpi	r24, 0x64	; 100
 69a:	11 f0       	breq	.+4      	; 0x6a0 <vfprintf+0x1d2>
 69c:	89 36       	cpi	r24, 0x69	; 105
 69e:	41 f5       	brne	.+80     	; 0x6f0 <vfprintf+0x222>
 6a0:	f8 01       	movw	r30, r16
 6a2:	37 fe       	sbrs	r3, 7
 6a4:	07 c0       	rjmp	.+14     	; 0x6b4 <vfprintf+0x1e6>
 6a6:	60 81       	ld	r22, Z
 6a8:	71 81       	ldd	r23, Z+1	; 0x01
 6aa:	82 81       	ldd	r24, Z+2	; 0x02
 6ac:	93 81       	ldd	r25, Z+3	; 0x03
 6ae:	0c 5f       	subi	r16, 0xFC	; 252
 6b0:	1f 4f       	sbci	r17, 0xFF	; 255
 6b2:	08 c0       	rjmp	.+16     	; 0x6c4 <vfprintf+0x1f6>
 6b4:	60 81       	ld	r22, Z
 6b6:	71 81       	ldd	r23, Z+1	; 0x01
 6b8:	07 2e       	mov	r0, r23
 6ba:	00 0c       	add	r0, r0
 6bc:	88 0b       	sbc	r24, r24
 6be:	99 0b       	sbc	r25, r25
 6c0:	0e 5f       	subi	r16, 0xFE	; 254
 6c2:	1f 4f       	sbci	r17, 0xFF	; 255
 6c4:	f3 2d       	mov	r31, r3
 6c6:	ff 76       	andi	r31, 0x6F	; 111
 6c8:	3f 2e       	mov	r3, r31
 6ca:	97 ff       	sbrs	r25, 7
 6cc:	09 c0       	rjmp	.+18     	; 0x6e0 <vfprintf+0x212>
 6ce:	90 95       	com	r25
 6d0:	80 95       	com	r24
 6d2:	70 95       	com	r23
 6d4:	61 95       	neg	r22
 6d6:	7f 4f       	sbci	r23, 0xFF	; 255
 6d8:	8f 4f       	sbci	r24, 0xFF	; 255
 6da:	9f 4f       	sbci	r25, 0xFF	; 255
 6dc:	f0 68       	ori	r31, 0x80	; 128
 6de:	3f 2e       	mov	r3, r31
 6e0:	2a e0       	ldi	r18, 0x0A	; 10
 6e2:	30 e0       	ldi	r19, 0x00	; 0
 6e4:	a3 01       	movw	r20, r6
 6e6:	0e 94 9a 04 	call	0x934	; 0x934 <__ultoa_invert>
 6ea:	88 2e       	mov	r8, r24
 6ec:	86 18       	sub	r8, r6
 6ee:	45 c0       	rjmp	.+138    	; 0x77a <vfprintf+0x2ac>
 6f0:	85 37       	cpi	r24, 0x75	; 117
 6f2:	31 f4       	brne	.+12     	; 0x700 <vfprintf+0x232>
 6f4:	23 2d       	mov	r18, r3
 6f6:	2f 7e       	andi	r18, 0xEF	; 239
 6f8:	b2 2e       	mov	r11, r18
 6fa:	2a e0       	ldi	r18, 0x0A	; 10
 6fc:	30 e0       	ldi	r19, 0x00	; 0
 6fe:	25 c0       	rjmp	.+74     	; 0x74a <vfprintf+0x27c>
 700:	93 2d       	mov	r25, r3
 702:	99 7f       	andi	r25, 0xF9	; 249
 704:	b9 2e       	mov	r11, r25
 706:	8f 36       	cpi	r24, 0x6F	; 111
 708:	c1 f0       	breq	.+48     	; 0x73a <vfprintf+0x26c>
 70a:	18 f4       	brcc	.+6      	; 0x712 <vfprintf+0x244>
 70c:	88 35       	cpi	r24, 0x58	; 88
 70e:	79 f0       	breq	.+30     	; 0x72e <vfprintf+0x260>
 710:	b5 c0       	rjmp	.+362    	; 0x87c <__DATA_REGION_LENGTH__+0x7c>
 712:	80 37       	cpi	r24, 0x70	; 112
 714:	19 f0       	breq	.+6      	; 0x71c <vfprintf+0x24e>
 716:	88 37       	cpi	r24, 0x78	; 120
 718:	21 f0       	breq	.+8      	; 0x722 <vfprintf+0x254>
 71a:	b0 c0       	rjmp	.+352    	; 0x87c <__DATA_REGION_LENGTH__+0x7c>
 71c:	e9 2f       	mov	r30, r25
 71e:	e0 61       	ori	r30, 0x10	; 16
 720:	be 2e       	mov	r11, r30
 722:	b4 fe       	sbrs	r11, 4
 724:	0d c0       	rjmp	.+26     	; 0x740 <vfprintf+0x272>
 726:	fb 2d       	mov	r31, r11
 728:	f4 60       	ori	r31, 0x04	; 4
 72a:	bf 2e       	mov	r11, r31
 72c:	09 c0       	rjmp	.+18     	; 0x740 <vfprintf+0x272>
 72e:	34 fe       	sbrs	r3, 4
 730:	0a c0       	rjmp	.+20     	; 0x746 <vfprintf+0x278>
 732:	29 2f       	mov	r18, r25
 734:	26 60       	ori	r18, 0x06	; 6
 736:	b2 2e       	mov	r11, r18
 738:	06 c0       	rjmp	.+12     	; 0x746 <vfprintf+0x278>
 73a:	28 e0       	ldi	r18, 0x08	; 8
 73c:	30 e0       	ldi	r19, 0x00	; 0
 73e:	05 c0       	rjmp	.+10     	; 0x74a <vfprintf+0x27c>
 740:	20 e1       	ldi	r18, 0x10	; 16
 742:	30 e0       	ldi	r19, 0x00	; 0
 744:	02 c0       	rjmp	.+4      	; 0x74a <vfprintf+0x27c>
 746:	20 e1       	ldi	r18, 0x10	; 16
 748:	32 e0       	ldi	r19, 0x02	; 2
 74a:	f8 01       	movw	r30, r16
 74c:	b7 fe       	sbrs	r11, 7
 74e:	07 c0       	rjmp	.+14     	; 0x75e <vfprintf+0x290>
 750:	60 81       	ld	r22, Z
 752:	71 81       	ldd	r23, Z+1	; 0x01
 754:	82 81       	ldd	r24, Z+2	; 0x02
 756:	93 81       	ldd	r25, Z+3	; 0x03
 758:	0c 5f       	subi	r16, 0xFC	; 252
 75a:	1f 4f       	sbci	r17, 0xFF	; 255
 75c:	06 c0       	rjmp	.+12     	; 0x76a <vfprintf+0x29c>
 75e:	60 81       	ld	r22, Z
 760:	71 81       	ldd	r23, Z+1	; 0x01
 762:	80 e0       	ldi	r24, 0x00	; 0
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	0e 5f       	subi	r16, 0xFE	; 254
 768:	1f 4f       	sbci	r17, 0xFF	; 255
 76a:	a3 01       	movw	r20, r6
 76c:	0e 94 9a 04 	call	0x934	; 0x934 <__ultoa_invert>
 770:	88 2e       	mov	r8, r24
 772:	86 18       	sub	r8, r6
 774:	fb 2d       	mov	r31, r11
 776:	ff 77       	andi	r31, 0x7F	; 127
 778:	3f 2e       	mov	r3, r31
 77a:	36 fe       	sbrs	r3, 6
 77c:	0d c0       	rjmp	.+26     	; 0x798 <vfprintf+0x2ca>
 77e:	23 2d       	mov	r18, r3
 780:	2e 7f       	andi	r18, 0xFE	; 254
 782:	a2 2e       	mov	r10, r18
 784:	89 14       	cp	r8, r9
 786:	58 f4       	brcc	.+22     	; 0x79e <vfprintf+0x2d0>
 788:	34 fe       	sbrs	r3, 4
 78a:	0b c0       	rjmp	.+22     	; 0x7a2 <vfprintf+0x2d4>
 78c:	32 fc       	sbrc	r3, 2
 78e:	09 c0       	rjmp	.+18     	; 0x7a2 <vfprintf+0x2d4>
 790:	83 2d       	mov	r24, r3
 792:	8e 7e       	andi	r24, 0xEE	; 238
 794:	a8 2e       	mov	r10, r24
 796:	05 c0       	rjmp	.+10     	; 0x7a2 <vfprintf+0x2d4>
 798:	b8 2c       	mov	r11, r8
 79a:	a3 2c       	mov	r10, r3
 79c:	03 c0       	rjmp	.+6      	; 0x7a4 <vfprintf+0x2d6>
 79e:	b8 2c       	mov	r11, r8
 7a0:	01 c0       	rjmp	.+2      	; 0x7a4 <vfprintf+0x2d6>
 7a2:	b9 2c       	mov	r11, r9
 7a4:	a4 fe       	sbrs	r10, 4
 7a6:	0f c0       	rjmp	.+30     	; 0x7c6 <vfprintf+0x2f8>
 7a8:	fe 01       	movw	r30, r28
 7aa:	e8 0d       	add	r30, r8
 7ac:	f1 1d       	adc	r31, r1
 7ae:	80 81       	ld	r24, Z
 7b0:	80 33       	cpi	r24, 0x30	; 48
 7b2:	21 f4       	brne	.+8      	; 0x7bc <vfprintf+0x2ee>
 7b4:	9a 2d       	mov	r25, r10
 7b6:	99 7e       	andi	r25, 0xE9	; 233
 7b8:	a9 2e       	mov	r10, r25
 7ba:	09 c0       	rjmp	.+18     	; 0x7ce <vfprintf+0x300>
 7bc:	a2 fe       	sbrs	r10, 2
 7be:	06 c0       	rjmp	.+12     	; 0x7cc <vfprintf+0x2fe>
 7c0:	b3 94       	inc	r11
 7c2:	b3 94       	inc	r11
 7c4:	04 c0       	rjmp	.+8      	; 0x7ce <vfprintf+0x300>
 7c6:	8a 2d       	mov	r24, r10
 7c8:	86 78       	andi	r24, 0x86	; 134
 7ca:	09 f0       	breq	.+2      	; 0x7ce <vfprintf+0x300>
 7cc:	b3 94       	inc	r11
 7ce:	a3 fc       	sbrc	r10, 3
 7d0:	11 c0       	rjmp	.+34     	; 0x7f4 <vfprintf+0x326>
 7d2:	a0 fe       	sbrs	r10, 0
 7d4:	06 c0       	rjmp	.+12     	; 0x7e2 <vfprintf+0x314>
 7d6:	b2 14       	cp	r11, r2
 7d8:	88 f4       	brcc	.+34     	; 0x7fc <vfprintf+0x32e>
 7da:	28 0c       	add	r2, r8
 7dc:	92 2c       	mov	r9, r2
 7de:	9b 18       	sub	r9, r11
 7e0:	0e c0       	rjmp	.+28     	; 0x7fe <vfprintf+0x330>
 7e2:	b2 14       	cp	r11, r2
 7e4:	60 f4       	brcc	.+24     	; 0x7fe <vfprintf+0x330>
 7e6:	b6 01       	movw	r22, r12
 7e8:	80 e2       	ldi	r24, 0x20	; 32
 7ea:	90 e0       	ldi	r25, 0x00	; 0
 7ec:	0e 94 5e 04 	call	0x8bc	; 0x8bc <fputc>
 7f0:	b3 94       	inc	r11
 7f2:	f7 cf       	rjmp	.-18     	; 0x7e2 <vfprintf+0x314>
 7f4:	b2 14       	cp	r11, r2
 7f6:	18 f4       	brcc	.+6      	; 0x7fe <vfprintf+0x330>
 7f8:	2b 18       	sub	r2, r11
 7fa:	02 c0       	rjmp	.+4      	; 0x800 <__DATA_REGION_LENGTH__>
 7fc:	98 2c       	mov	r9, r8
 7fe:	21 2c       	mov	r2, r1
 800:	a4 fe       	sbrs	r10, 4
 802:	10 c0       	rjmp	.+32     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 804:	b6 01       	movw	r22, r12
 806:	80 e3       	ldi	r24, 0x30	; 48
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	0e 94 5e 04 	call	0x8bc	; 0x8bc <fputc>
 80e:	a2 fe       	sbrs	r10, 2
 810:	17 c0       	rjmp	.+46     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
 812:	a1 fc       	sbrc	r10, 1
 814:	03 c0       	rjmp	.+6      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 816:	88 e7       	ldi	r24, 0x78	; 120
 818:	90 e0       	ldi	r25, 0x00	; 0
 81a:	02 c0       	rjmp	.+4      	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 81c:	88 e5       	ldi	r24, 0x58	; 88
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	b6 01       	movw	r22, r12
 822:	0c c0       	rjmp	.+24     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 824:	8a 2d       	mov	r24, r10
 826:	86 78       	andi	r24, 0x86	; 134
 828:	59 f0       	breq	.+22     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
 82a:	a1 fe       	sbrs	r10, 1
 82c:	02 c0       	rjmp	.+4      	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 82e:	8b e2       	ldi	r24, 0x2B	; 43
 830:	01 c0       	rjmp	.+2      	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 832:	80 e2       	ldi	r24, 0x20	; 32
 834:	a7 fc       	sbrc	r10, 7
 836:	8d e2       	ldi	r24, 0x2D	; 45
 838:	b6 01       	movw	r22, r12
 83a:	90 e0       	ldi	r25, 0x00	; 0
 83c:	0e 94 5e 04 	call	0x8bc	; 0x8bc <fputc>
 840:	89 14       	cp	r8, r9
 842:	38 f4       	brcc	.+14     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
 844:	b6 01       	movw	r22, r12
 846:	80 e3       	ldi	r24, 0x30	; 48
 848:	90 e0       	ldi	r25, 0x00	; 0
 84a:	0e 94 5e 04 	call	0x8bc	; 0x8bc <fputc>
 84e:	9a 94       	dec	r9
 850:	f7 cf       	rjmp	.-18     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
 852:	8a 94       	dec	r8
 854:	f3 01       	movw	r30, r6
 856:	e8 0d       	add	r30, r8
 858:	f1 1d       	adc	r31, r1
 85a:	80 81       	ld	r24, Z
 85c:	b6 01       	movw	r22, r12
 85e:	90 e0       	ldi	r25, 0x00	; 0
 860:	0e 94 5e 04 	call	0x8bc	; 0x8bc <fputc>
 864:	81 10       	cpse	r8, r1
 866:	f5 cf       	rjmp	.-22     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
 868:	22 20       	and	r2, r2
 86a:	09 f4       	brne	.+2      	; 0x86e <__DATA_REGION_LENGTH__+0x6e>
 86c:	42 ce       	rjmp	.-892    	; 0x4f2 <vfprintf+0x24>
 86e:	b6 01       	movw	r22, r12
 870:	80 e2       	ldi	r24, 0x20	; 32
 872:	90 e0       	ldi	r25, 0x00	; 0
 874:	0e 94 5e 04 	call	0x8bc	; 0x8bc <fputc>
 878:	2a 94       	dec	r2
 87a:	f6 cf       	rjmp	.-20     	; 0x868 <__DATA_REGION_LENGTH__+0x68>
 87c:	f6 01       	movw	r30, r12
 87e:	86 81       	ldd	r24, Z+6	; 0x06
 880:	97 81       	ldd	r25, Z+7	; 0x07
 882:	02 c0       	rjmp	.+4      	; 0x888 <__DATA_REGION_LENGTH__+0x88>
 884:	8f ef       	ldi	r24, 0xFF	; 255
 886:	9f ef       	ldi	r25, 0xFF	; 255
 888:	2b 96       	adiw	r28, 0x0b	; 11
 88a:	e2 e1       	ldi	r30, 0x12	; 18
 88c:	0c 94 14 05 	jmp	0xa28	; 0xa28 <__epilogue_restores__>

00000890 <strnlen_P>:
 890:	fc 01       	movw	r30, r24
 892:	05 90       	lpm	r0, Z+
 894:	61 50       	subi	r22, 0x01	; 1
 896:	70 40       	sbci	r23, 0x00	; 0
 898:	01 10       	cpse	r0, r1
 89a:	d8 f7       	brcc	.-10     	; 0x892 <strnlen_P+0x2>
 89c:	80 95       	com	r24
 89e:	90 95       	com	r25
 8a0:	8e 0f       	add	r24, r30
 8a2:	9f 1f       	adc	r25, r31
 8a4:	08 95       	ret

000008a6 <strnlen>:
 8a6:	fc 01       	movw	r30, r24
 8a8:	61 50       	subi	r22, 0x01	; 1
 8aa:	70 40       	sbci	r23, 0x00	; 0
 8ac:	01 90       	ld	r0, Z+
 8ae:	01 10       	cpse	r0, r1
 8b0:	d8 f7       	brcc	.-10     	; 0x8a8 <strnlen+0x2>
 8b2:	80 95       	com	r24
 8b4:	90 95       	com	r25
 8b6:	8e 0f       	add	r24, r30
 8b8:	9f 1f       	adc	r25, r31
 8ba:	08 95       	ret

000008bc <fputc>:
 8bc:	0f 93       	push	r16
 8be:	1f 93       	push	r17
 8c0:	cf 93       	push	r28
 8c2:	df 93       	push	r29
 8c4:	fb 01       	movw	r30, r22
 8c6:	23 81       	ldd	r18, Z+3	; 0x03
 8c8:	21 fd       	sbrc	r18, 1
 8ca:	03 c0       	rjmp	.+6      	; 0x8d2 <fputc+0x16>
 8cc:	8f ef       	ldi	r24, 0xFF	; 255
 8ce:	9f ef       	ldi	r25, 0xFF	; 255
 8d0:	2c c0       	rjmp	.+88     	; 0x92a <__stack+0x2b>
 8d2:	22 ff       	sbrs	r18, 2
 8d4:	16 c0       	rjmp	.+44     	; 0x902 <__stack+0x3>
 8d6:	46 81       	ldd	r20, Z+6	; 0x06
 8d8:	57 81       	ldd	r21, Z+7	; 0x07
 8da:	24 81       	ldd	r18, Z+4	; 0x04
 8dc:	35 81       	ldd	r19, Z+5	; 0x05
 8de:	42 17       	cp	r20, r18
 8e0:	53 07       	cpc	r21, r19
 8e2:	44 f4       	brge	.+16     	; 0x8f4 <fputc+0x38>
 8e4:	a0 81       	ld	r26, Z
 8e6:	b1 81       	ldd	r27, Z+1	; 0x01
 8e8:	9d 01       	movw	r18, r26
 8ea:	2f 5f       	subi	r18, 0xFF	; 255
 8ec:	3f 4f       	sbci	r19, 0xFF	; 255
 8ee:	31 83       	std	Z+1, r19	; 0x01
 8f0:	20 83       	st	Z, r18
 8f2:	8c 93       	st	X, r24
 8f4:	26 81       	ldd	r18, Z+6	; 0x06
 8f6:	37 81       	ldd	r19, Z+7	; 0x07
 8f8:	2f 5f       	subi	r18, 0xFF	; 255
 8fa:	3f 4f       	sbci	r19, 0xFF	; 255
 8fc:	37 83       	std	Z+7, r19	; 0x07
 8fe:	26 83       	std	Z+6, r18	; 0x06
 900:	14 c0       	rjmp	.+40     	; 0x92a <__stack+0x2b>
 902:	8b 01       	movw	r16, r22
 904:	ec 01       	movw	r28, r24
 906:	fb 01       	movw	r30, r22
 908:	00 84       	ldd	r0, Z+8	; 0x08
 90a:	f1 85       	ldd	r31, Z+9	; 0x09
 90c:	e0 2d       	mov	r30, r0
 90e:	09 95       	icall
 910:	89 2b       	or	r24, r25
 912:	e1 f6       	brne	.-72     	; 0x8cc <fputc+0x10>
 914:	d8 01       	movw	r26, r16
 916:	16 96       	adiw	r26, 0x06	; 6
 918:	8d 91       	ld	r24, X+
 91a:	9c 91       	ld	r25, X
 91c:	17 97       	sbiw	r26, 0x07	; 7
 91e:	01 96       	adiw	r24, 0x01	; 1
 920:	17 96       	adiw	r26, 0x07	; 7
 922:	9c 93       	st	X, r25
 924:	8e 93       	st	-X, r24
 926:	16 97       	sbiw	r26, 0x06	; 6
 928:	ce 01       	movw	r24, r28
 92a:	df 91       	pop	r29
 92c:	cf 91       	pop	r28
 92e:	1f 91       	pop	r17
 930:	0f 91       	pop	r16
 932:	08 95       	ret

00000934 <__ultoa_invert>:
 934:	fa 01       	movw	r30, r20
 936:	aa 27       	eor	r26, r26
 938:	28 30       	cpi	r18, 0x08	; 8
 93a:	51 f1       	breq	.+84     	; 0x990 <__ultoa_invert+0x5c>
 93c:	20 31       	cpi	r18, 0x10	; 16
 93e:	81 f1       	breq	.+96     	; 0x9a0 <__ultoa_invert+0x6c>
 940:	e8 94       	clt
 942:	6f 93       	push	r22
 944:	6e 7f       	andi	r22, 0xFE	; 254
 946:	6e 5f       	subi	r22, 0xFE	; 254
 948:	7f 4f       	sbci	r23, 0xFF	; 255
 94a:	8f 4f       	sbci	r24, 0xFF	; 255
 94c:	9f 4f       	sbci	r25, 0xFF	; 255
 94e:	af 4f       	sbci	r26, 0xFF	; 255
 950:	b1 e0       	ldi	r27, 0x01	; 1
 952:	3e d0       	rcall	.+124    	; 0x9d0 <__ultoa_invert+0x9c>
 954:	b4 e0       	ldi	r27, 0x04	; 4
 956:	3c d0       	rcall	.+120    	; 0x9d0 <__ultoa_invert+0x9c>
 958:	67 0f       	add	r22, r23
 95a:	78 1f       	adc	r23, r24
 95c:	89 1f       	adc	r24, r25
 95e:	9a 1f       	adc	r25, r26
 960:	a1 1d       	adc	r26, r1
 962:	68 0f       	add	r22, r24
 964:	79 1f       	adc	r23, r25
 966:	8a 1f       	adc	r24, r26
 968:	91 1d       	adc	r25, r1
 96a:	a1 1d       	adc	r26, r1
 96c:	6a 0f       	add	r22, r26
 96e:	71 1d       	adc	r23, r1
 970:	81 1d       	adc	r24, r1
 972:	91 1d       	adc	r25, r1
 974:	a1 1d       	adc	r26, r1
 976:	20 d0       	rcall	.+64     	; 0x9b8 <__ultoa_invert+0x84>
 978:	09 f4       	brne	.+2      	; 0x97c <__ultoa_invert+0x48>
 97a:	68 94       	set
 97c:	3f 91       	pop	r19
 97e:	2a e0       	ldi	r18, 0x0A	; 10
 980:	26 9f       	mul	r18, r22
 982:	11 24       	eor	r1, r1
 984:	30 19       	sub	r19, r0
 986:	30 5d       	subi	r19, 0xD0	; 208
 988:	31 93       	st	Z+, r19
 98a:	de f6       	brtc	.-74     	; 0x942 <__ultoa_invert+0xe>
 98c:	cf 01       	movw	r24, r30
 98e:	08 95       	ret
 990:	46 2f       	mov	r20, r22
 992:	47 70       	andi	r20, 0x07	; 7
 994:	40 5d       	subi	r20, 0xD0	; 208
 996:	41 93       	st	Z+, r20
 998:	b3 e0       	ldi	r27, 0x03	; 3
 99a:	0f d0       	rcall	.+30     	; 0x9ba <__ultoa_invert+0x86>
 99c:	c9 f7       	brne	.-14     	; 0x990 <__ultoa_invert+0x5c>
 99e:	f6 cf       	rjmp	.-20     	; 0x98c <__ultoa_invert+0x58>
 9a0:	46 2f       	mov	r20, r22
 9a2:	4f 70       	andi	r20, 0x0F	; 15
 9a4:	40 5d       	subi	r20, 0xD0	; 208
 9a6:	4a 33       	cpi	r20, 0x3A	; 58
 9a8:	18 f0       	brcs	.+6      	; 0x9b0 <__ultoa_invert+0x7c>
 9aa:	49 5d       	subi	r20, 0xD9	; 217
 9ac:	31 fd       	sbrc	r19, 1
 9ae:	40 52       	subi	r20, 0x20	; 32
 9b0:	41 93       	st	Z+, r20
 9b2:	02 d0       	rcall	.+4      	; 0x9b8 <__ultoa_invert+0x84>
 9b4:	a9 f7       	brne	.-22     	; 0x9a0 <__ultoa_invert+0x6c>
 9b6:	ea cf       	rjmp	.-44     	; 0x98c <__ultoa_invert+0x58>
 9b8:	b4 e0       	ldi	r27, 0x04	; 4
 9ba:	a6 95       	lsr	r26
 9bc:	97 95       	ror	r25
 9be:	87 95       	ror	r24
 9c0:	77 95       	ror	r23
 9c2:	67 95       	ror	r22
 9c4:	ba 95       	dec	r27
 9c6:	c9 f7       	brne	.-14     	; 0x9ba <__ultoa_invert+0x86>
 9c8:	00 97       	sbiw	r24, 0x00	; 0
 9ca:	61 05       	cpc	r22, r1
 9cc:	71 05       	cpc	r23, r1
 9ce:	08 95       	ret
 9d0:	9b 01       	movw	r18, r22
 9d2:	ac 01       	movw	r20, r24
 9d4:	0a 2e       	mov	r0, r26
 9d6:	06 94       	lsr	r0
 9d8:	57 95       	ror	r21
 9da:	47 95       	ror	r20
 9dc:	37 95       	ror	r19
 9de:	27 95       	ror	r18
 9e0:	ba 95       	dec	r27
 9e2:	c9 f7       	brne	.-14     	; 0x9d6 <__ultoa_invert+0xa2>
 9e4:	62 0f       	add	r22, r18
 9e6:	73 1f       	adc	r23, r19
 9e8:	84 1f       	adc	r24, r20
 9ea:	95 1f       	adc	r25, r21
 9ec:	a0 1d       	adc	r26, r0
 9ee:	08 95       	ret

000009f0 <__prologue_saves__>:
 9f0:	2f 92       	push	r2
 9f2:	3f 92       	push	r3
 9f4:	4f 92       	push	r4
 9f6:	5f 92       	push	r5
 9f8:	6f 92       	push	r6
 9fa:	7f 92       	push	r7
 9fc:	8f 92       	push	r8
 9fe:	9f 92       	push	r9
 a00:	af 92       	push	r10
 a02:	bf 92       	push	r11
 a04:	cf 92       	push	r12
 a06:	df 92       	push	r13
 a08:	ef 92       	push	r14
 a0a:	ff 92       	push	r15
 a0c:	0f 93       	push	r16
 a0e:	1f 93       	push	r17
 a10:	cf 93       	push	r28
 a12:	df 93       	push	r29
 a14:	cd b7       	in	r28, 0x3d	; 61
 a16:	de b7       	in	r29, 0x3e	; 62
 a18:	ca 1b       	sub	r28, r26
 a1a:	db 0b       	sbc	r29, r27
 a1c:	0f b6       	in	r0, 0x3f	; 63
 a1e:	f8 94       	cli
 a20:	de bf       	out	0x3e, r29	; 62
 a22:	0f be       	out	0x3f, r0	; 63
 a24:	cd bf       	out	0x3d, r28	; 61
 a26:	09 94       	ijmp

00000a28 <__epilogue_restores__>:
 a28:	2a 88       	ldd	r2, Y+18	; 0x12
 a2a:	39 88       	ldd	r3, Y+17	; 0x11
 a2c:	48 88       	ldd	r4, Y+16	; 0x10
 a2e:	5f 84       	ldd	r5, Y+15	; 0x0f
 a30:	6e 84       	ldd	r6, Y+14	; 0x0e
 a32:	7d 84       	ldd	r7, Y+13	; 0x0d
 a34:	8c 84       	ldd	r8, Y+12	; 0x0c
 a36:	9b 84       	ldd	r9, Y+11	; 0x0b
 a38:	aa 84       	ldd	r10, Y+10	; 0x0a
 a3a:	b9 84       	ldd	r11, Y+9	; 0x09
 a3c:	c8 84       	ldd	r12, Y+8	; 0x08
 a3e:	df 80       	ldd	r13, Y+7	; 0x07
 a40:	ee 80       	ldd	r14, Y+6	; 0x06
 a42:	fd 80       	ldd	r15, Y+5	; 0x05
 a44:	0c 81       	ldd	r16, Y+4	; 0x04
 a46:	1b 81       	ldd	r17, Y+3	; 0x03
 a48:	aa 81       	ldd	r26, Y+2	; 0x02
 a4a:	b9 81       	ldd	r27, Y+1	; 0x01
 a4c:	ce 0f       	add	r28, r30
 a4e:	d1 1d       	adc	r29, r1
 a50:	0f b6       	in	r0, 0x3f	; 63
 a52:	f8 94       	cli
 a54:	de bf       	out	0x3e, r29	; 62
 a56:	0f be       	out	0x3f, r0	; 63
 a58:	cd bf       	out	0x3d, r28	; 61
 a5a:	ed 01       	movw	r28, r26
 a5c:	08 95       	ret

00000a5e <_exit>:
 a5e:	f8 94       	cli

00000a60 <__stop_program>:
 a60:	ff cf       	rjmp	.-2      	; 0xa60 <__stop_program>
