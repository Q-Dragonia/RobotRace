
RobotRace.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000023e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ea  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000023e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000270  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000989  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000078c  00000000  00000000  00000c89  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000410  00000000  00000000  00001415  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00001828  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000043c  00000000  00000000  000018bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000153  00000000  00000000  00001cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001e4b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 30       	cpi	r26, 0x00	; 0
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 a7 00 	call	0x14e	; 0x14e <main>
  88:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <init_ADC>:

#ifndef ADC_H_
#define ADC_H_

void init_ADC(){
	ADMUX |= (1 << REFS0);
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	80 64       	ori	r24, 0x40	; 64
  98:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
  9a:	ea e7       	ldi	r30, 0x7A	; 122
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	87 60       	ori	r24, 0x07	; 7
  a2:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);
  a4:	80 81       	ld	r24, Z
  a6:	80 68       	ori	r24, 0x80	; 128
  a8:	80 83       	st	Z, r24
  aa:	08 95       	ret

000000ac <readADC>:
}

uint16_t readADC(uint8_t channel){
	ADMUX = (ADMUX & 0xF0) | (channel & 0x0F);
  ac:	ec e7       	ldi	r30, 0x7C	; 124
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	90 81       	ld	r25, Z
  b2:	90 7f       	andi	r25, 0xF0	; 240
  b4:	8f 70       	andi	r24, 0x0F	; 15
  b6:	89 2b       	or	r24, r25
  b8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);
  ba:	ea e7       	ldi	r30, 0x7A	; 122
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	80 64       	ori	r24, 0x40	; 64
  c2:	80 83       	st	Z, r24
	// Wait for conversion to complete
	while (ADCSRA & (1 << ADSC));
  c4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  c8:	86 fd       	sbrc	r24, 6
  ca:	fc cf       	rjmp	.-8      	; 0xc4 <readADC+0x18>
	// Return ADC result (10-bit)
	return ADC;
  cc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  d0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
  d4:	08 95       	ret

000000d6 <custom_delay_ms>:


#ifndef USART_H_
#define USART_H_

void custom_delay_ms(uint16_t ms) {
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
  da:	00 d0       	rcall	.+0      	; 0xdc <custom_delay_ms+0x6>
  dc:	cd b7       	in	r28, 0x3d	; 61
  de:	de b7       	in	r29, 0x3e	; 62
	for (uint16_t i = 0; i < ms; i++) {
  e0:	40 e0       	ldi	r20, 0x00	; 0
  e2:	50 e0       	ldi	r21, 0x00	; 0
  e4:	11 c0       	rjmp	.+34     	; 0x108 <custom_delay_ms+0x32>
		for (volatile uint16_t j = 0; j < 850; j++) { // Adjust this value for the desired delay
  e6:	1a 82       	std	Y+2, r1	; 0x02
  e8:	19 82       	std	Y+1, r1	; 0x01
  ea:	07 c0       	rjmp	.+14     	; 0xfa <custom_delay_ms+0x24>
			asm("nop"); // No operation, helps in preventing optimization
  ec:	00 00       	nop
#ifndef USART_H_
#define USART_H_

void custom_delay_ms(uint16_t ms) {
	for (uint16_t i = 0; i < ms; i++) {
		for (volatile uint16_t j = 0; j < 850; j++) { // Adjust this value for the desired delay
  ee:	29 81       	ldd	r18, Y+1	; 0x01
  f0:	3a 81       	ldd	r19, Y+2	; 0x02
  f2:	2f 5f       	subi	r18, 0xFF	; 255
  f4:	3f 4f       	sbci	r19, 0xFF	; 255
  f6:	3a 83       	std	Y+2, r19	; 0x02
  f8:	29 83       	std	Y+1, r18	; 0x01
  fa:	29 81       	ldd	r18, Y+1	; 0x01
  fc:	3a 81       	ldd	r19, Y+2	; 0x02
  fe:	22 35       	cpi	r18, 0x52	; 82
 100:	33 40       	sbci	r19, 0x03	; 3
 102:	a0 f3       	brcs	.-24     	; 0xec <custom_delay_ms+0x16>

#ifndef USART_H_
#define USART_H_

void custom_delay_ms(uint16_t ms) {
	for (uint16_t i = 0; i < ms; i++) {
 104:	4f 5f       	subi	r20, 0xFF	; 255
 106:	5f 4f       	sbci	r21, 0xFF	; 255
 108:	48 17       	cp	r20, r24
 10a:	59 07       	cpc	r21, r25
 10c:	60 f3       	brcs	.-40     	; 0xe6 <custom_delay_ms+0x10>
		for (volatile uint16_t j = 0; j < 850; j++) { // Adjust this value for the desired delay
			asm("nop"); // No operation, helps in preventing optimization
		}
	}
}
 10e:	0f 90       	pop	r0
 110:	0f 90       	pop	r0
 112:	df 91       	pop	r29
 114:	cf 91       	pop	r28
 116:	08 95       	ret

00000118 <init_USART>:


void init_USART(unsigned int ubrr){
	// Set baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
 118:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
 11c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	// Enable transmitter
	UCSR0B = (1 << TXEN0) | (1 << RXEN0);
 120:	88 e1       	ldi	r24, 0x18	; 24
 122:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	// Set frame format: 8 data bits, 1 stop bit
	UCSR0C = (3 << UCSZ00);
 126:	86 e0       	ldi	r24, 0x06	; 6
 128:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 12c:	08 95       	ret

0000012e <transferMessage>:
// 	// Enable USART Receive Complete (RXC) interrupt
// 	UCSR0B |= (1 << RXCIE0);
}

void transferMessage(unsigned char data){
	while (!(UCSR0A & (1<<UDRE0)));
 12e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 132:	95 ff       	sbrs	r25, 5
 134:	fc cf       	rjmp	.-8      	; 0x12e <transferMessage>
	UDR0 = data;
 136:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 13a:	08 95       	ret

0000013c <receiveMessage>:
}

char receiveMessage(){
	if (!(UCSR0A & (1<<RXC0))){
 13c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 140:	88 23       	and	r24, r24
 142:	1c f4       	brge	.+6      	; 0x14a <receiveMessage+0xe>
		return '\0';
		} else {
		return UDR0;
 144:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 148:	08 95       	ret
	UDR0 = data;
}

char receiveMessage(){
	if (!(UCSR0A & (1<<RXC0))){
		return '\0';
 14a:	80 e0       	ldi	r24, 0x00	; 0
		} else {
		return UDR0;
	}
}
 14c:	08 95       	ret

0000014e <main>:
#include "usart.h"

int main(void)
{
    
	init_ADC();
 14e:	0e 94 48 00 	call	0x90	; 0x90 <init_ADC>
	init_USART(MYUBRR);
 152:	87 e6       	ldi	r24, 0x67	; 103
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 8c 00 	call	0x118	; 0x118 <init_USART>
	//initCollision();
	//initMovement();
	//initServo();
	
	DDRB |= (1 << 2);
 15a:	84 b1       	in	r24, 0x04	; 4
 15c:	84 60       	ori	r24, 0x04	; 4
 15e:	84 b9       	out	0x04, r24	; 4
	
	sei();
 160:	78 94       	sei
	
    while (1) 
    {
		
		int sensorLeft = readADC(SENSOR_LEFT_CHANNEL);
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	0e 94 56 00 	call	0xac	; 0xac <readADC>
		int lineTrackingSensorLeft = readADC(LINE_TRACKING_SENSOR_LEFT_CHANNEL);
 168:	85 e0       	ldi	r24, 0x05	; 5
 16a:	0e 94 56 00 	call	0xac	; 0xac <readADC>
		int lineTrackingSensorMiddle = readADC(LINE_TRACKING_SENSOR_MIDDLE_CHANNEL);
 16e:	82 e0       	ldi	r24, 0x02	; 2
 170:	0e 94 56 00 	call	0xac	; 0xac <readADC>
		int lineTrackingSensorRight = readADC(LINE_TRACKING_SENSOR_RIGHT_CHANNEL);
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	0e 94 56 00 	call	0xac	; 0xac <readADC>
		int sensorRight = readADC(SENSOR_RIGHT_CHANNEL);
 17a:	83 e0       	ldi	r24, 0x03	; 3
 17c:	0e 94 56 00 	call	0xac	; 0xac <readADC>
// 			transferMessage(buffer[i]);
// 		}

		// Delay before next measurement
		
		char receivedMessage = receiveMessage();
 180:	0e 94 9e 00 	call	0x13c	; 0x13c <receiveMessage>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 184:	e7 ea       	ldi	r30, 0xA7	; 167
 186:	f1 e6       	ldi	r31, 0x61	; 97
 188:	31 97       	sbiw	r30, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <main+0x3a>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <main+0x40>
 18e:	00 00       	nop
		
		_delay_ms(100);
		if(receivedMessage == 'A'){
 190:	81 34       	cpi	r24, 0x41	; 65
 192:	21 f4       	brne	.+8      	; 0x19c <main+0x4e>
			PORTB |= (1 << 2);
 194:	85 b1       	in	r24, 0x05	; 5
 196:	84 60       	ori	r24, 0x04	; 4
 198:	85 b9       	out	0x05, r24	; 5
 19a:	e3 cf       	rjmp	.-58     	; 0x162 <main+0x14>
			receivedMessage = '\n';
		}else if(receivedMessage == 'B'){
 19c:	82 34       	cpi	r24, 0x42	; 66
 19e:	59 f4       	brne	.+22     	; 0x1b6 <main+0x68>
			PORTB &= ~(1 << 2);
 1a0:	85 b1       	in	r24, 0x05	; 5
 1a2:	8b 7f       	andi	r24, 0xFB	; 251
 1a4:	85 b9       	out	0x05, r24	; 5
			custom_delay_ms(5000);
 1a6:	88 e8       	ldi	r24, 0x88	; 136
 1a8:	93 e1       	ldi	r25, 0x13	; 19
 1aa:	0e 94 6b 00 	call	0xd6	; 0xd6 <custom_delay_ms>
			PORTB |= (1 << 2);
 1ae:	85 b1       	in	r24, 0x05	; 5
 1b0:	84 60       	ori	r24, 0x04	; 4
 1b2:	85 b9       	out	0x05, r24	; 5
 1b4:	d6 cf       	rjmp	.-84     	; 0x162 <main+0x14>
			receivedMessage = '\n';
		}else if(receivedMessage == 'C'){
 1b6:	83 34       	cpi	r24, 0x43	; 67
 1b8:	21 f4       	brne	.+8      	; 0x1c2 <main+0x74>
			PORTB &= ~(1 << 2);
 1ba:	85 b1       	in	r24, 0x05	; 5
 1bc:	8b 7f       	andi	r24, 0xFB	; 251
 1be:	85 b9       	out	0x05, r24	; 5
 1c0:	d0 cf       	rjmp	.-96     	; 0x162 <main+0x14>
			receivedMessage = '\n';
		}else if(receivedMessage == '\0'){
 1c2:	88 23       	and	r24, r24
 1c4:	71 f2       	breq	.-100    	; 0x162 <main+0x14>
// 			transferMessage('E');
// 			transferMessage('A');
// 			transferMessage('D');
// 			transferMessage('Y');
		}else{
			transferMessage('E');
 1c6:	85 e4       	ldi	r24, 0x45	; 69
 1c8:	0e 94 97 00 	call	0x12e	; 0x12e <transferMessage>
			transferMessage('R');
 1cc:	82 e5       	ldi	r24, 0x52	; 82
 1ce:	0e 94 97 00 	call	0x12e	; 0x12e <transferMessage>
			transferMessage('R');
 1d2:	82 e5       	ldi	r24, 0x52	; 82
 1d4:	0e 94 97 00 	call	0x12e	; 0x12e <transferMessage>
			transferMessage('O');
 1d8:	8f e4       	ldi	r24, 0x4F	; 79
 1da:	0e 94 97 00 	call	0x12e	; 0x12e <transferMessage>
			transferMessage('R');
 1de:	82 e5       	ldi	r24, 0x52	; 82
 1e0:	0e 94 97 00 	call	0x12e	; 0x12e <transferMessage>
 1e4:	be cf       	rjmp	.-132    	; 0x162 <main+0x14>

000001e6 <_exit>:
 1e6:	f8 94       	cli

000001e8 <__stop_program>:
 1e8:	ff cf       	rjmp	.-2      	; 0x1e8 <__stop_program>
