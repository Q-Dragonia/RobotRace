
RobotRace.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000003e0  00000474  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800108  00800108  0000047c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000047c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000004ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fad  00000000  00000000  00000564  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007bd  00000000  00000000  00001511  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000063a  00000000  00000000  00001cce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e4  00000000  00000000  00002308  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ed  00000000  00000000  000023ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000484  00000000  00000000  000028d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002d5d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ee       	ldi	r30, 0xE0	; 224
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e0       	ldi	r26, 0x08	; 8
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 30       	cpi	r26, 0x09	; 9
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 bb 00 	call	0x176	; 0x176 <main>
  9e:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_ADC>:
	for (uint16_t i = 0; i < ms; i++) {
		for (volatile uint16_t j = 0; j < 850; j++) { // Adjust this value for the desired delay
			asm("nop"); // No operation, helps in preventing optimization
		}
	}
}
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	80 83       	st	Z, r24
  b0:	ea e7       	ldi	r30, 0x7A	; 122
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	87 60       	ori	r24, 0x07	; 7
  b8:	80 83       	st	Z, r24
  ba:	80 81       	ld	r24, Z
  bc:	80 68       	ori	r24, 0x80	; 128
  be:	80 83       	st	Z, r24
  c0:	08 95       	ret

000000c2 <readADC>:
  c2:	ec e7       	ldi	r30, 0x7C	; 124
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	90 81       	ld	r25, Z
  c8:	90 7f       	andi	r25, 0xF0	; 240
  ca:	8f 70       	andi	r24, 0x0F	; 15
  cc:	89 2b       	or	r24, r25
  ce:	80 83       	st	Z, r24
  d0:	ea e7       	ldi	r30, 0x7A	; 122
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	80 64       	ori	r24, 0x40	; 64
  d8:	80 83       	st	Z, r24
  da:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  de:	86 fd       	sbrc	r24, 6
  e0:	fc cf       	rjmp	.-8      	; 0xda <readADC+0x18>
  e2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  e6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  ea:	08 95       	ret

000000ec <init_USART>:


void init_USART(unsigned int ubrr){
	// Set baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
  ec:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
  f0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	// Enable transmitter and receiver
	UCSR0B = (1 << TXEN0) | (1 << RXEN0);
  f4:	88 e1       	ldi	r24, 0x18	; 24
  f6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	// Set frame format: 8 data bits, 1 stop bit
	UCSR0C = (3 << UCSZ00);
  fa:	86 e0       	ldi	r24, 0x06	; 6
  fc:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 100:	08 95       	ret

00000102 <transferMessage>:
}

void transferMessage(unsigned char data){
	while (!(UCSR0A & (1<<UDRE0)));
 102:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 106:	95 ff       	sbrs	r25, 5
 108:	fc cf       	rjmp	.-8      	; 0x102 <transferMessage>
	UDR0 = data;
 10a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 10e:	08 95       	ret

00000110 <receiveMessage>:
}

char receiveMessage(){
	// Wait for data to be received
	if (!(UCSR0A & (1 << RXC0))) {
 110:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 114:	88 23       	and	r24, r24
 116:	1c f4       	brge	.+6      	; 0x11e <receiveMessage+0xe>
		return '\0';
	}
	// Get and return received data from buffer
	return UDR0;
 118:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 11c:	08 95       	ret
}

char receiveMessage(){
	// Wait for data to be received
	if (!(UCSR0A & (1 << RXC0))) {
		return '\0';
 11e:	80 e0       	ldi	r24, 0x00	; 0
	}
	// Get and return received data from buffer
	return UDR0;
}
 120:	08 95       	ret

00000122 <init_driving_PWM>:

#include "definitions.h"

void init_driving_PWM() {
	// Set OC0A (PD6) and OC0B (PD5) as output pins, motor speed pins
	DDRD |= (1 << DDD6) | (1 << DDD5);
 122:	8a b1       	in	r24, 0x0a	; 10
 124:	80 66       	ori	r24, 0x60	; 96
 126:	8a b9       	out	0x0a, r24	; 10
	// Configure Timer0 for Fast PWM mode, non-inverted output (WGM02:0 = 3)
	TCCR0A |= (1 << COM0A1) | (1 << COM0B1) | (1 << WGM01) | (1 << WGM00);
 128:	84 b5       	in	r24, 0x24	; 36
 12a:	83 6a       	ori	r24, 0xA3	; 163
 12c:	84 bd       	out	0x24, r24	; 36
	//TCCR0B |= (1 << WGM02);

	// Set prescaler to 64
	TCCR0B |= (1 << CS01) | (1 << CS00);
 12e:	85 b5       	in	r24, 0x25	; 37
 130:	83 60       	ori	r24, 0x03	; 3
 132:	85 bd       	out	0x25, r24	; 37
 134:	08 95       	ret

00000136 <setMotorASpeed>:
}

// Function to set speed of motor A
void setMotorASpeed(uint8_t speed) {
	if (speed == 0) {
 136:	81 11       	cpse	r24, r1
 138:	02 c0       	rjmp	.+4      	; 0x13e <setMotorASpeed+0x8>
		OCR0B = 0; // Turn off PWM output
 13a:	18 bc       	out	0x28, r1	; 40
 13c:	08 95       	ret
		} else {
		OCR0B = speed; // Set PWM duty cycle
 13e:	88 bd       	out	0x28, r24	; 40
 140:	08 95       	ret

00000142 <setMotorBSpeed>:
	}
}

// Function to set speed of motor B
void setMotorBSpeed(uint8_t speed) {
	if (speed == 0) {
 142:	81 11       	cpse	r24, r1
 144:	02 c0       	rjmp	.+4      	; 0x14a <setMotorBSpeed+0x8>
		OCR0A = 0; // Turn off PWM output
 146:	17 bc       	out	0x27, r1	; 39
 148:	08 95       	ret
		} else {
		OCR0A = speed; // Set PWM duty cycle
 14a:	87 bd       	out	0x27, r24	; 39
 14c:	08 95       	ret

0000014e <setMotorADirection>:
	}
}

// Function to control direction of motor A
void setMotorADirection(uint8_t direction) {
	if (direction == 1) { // Forward
 14e:	81 30       	cpi	r24, 0x01	; 1
 150:	21 f4       	brne	.+8      	; 0x15a <setMotorADirection+0xc>
		PORTB |= (1 << A_DIRECTION_PIN); // Set A_DIRECTION_PIN
 152:	85 b1       	in	r24, 0x05	; 5
 154:	84 60       	ori	r24, 0x04	; 4
 156:	85 b9       	out	0x05, r24	; 5
 158:	08 95       	ret
		} else { // Reverse
		PORTB &= ~(1 << A_DIRECTION_PIN); // Clear A_DIRECTION_PIN
 15a:	85 b1       	in	r24, 0x05	; 5
 15c:	8b 7f       	andi	r24, 0xFB	; 251
 15e:	85 b9       	out	0x05, r24	; 5
 160:	08 95       	ret

00000162 <setMotorBDirection>:
	}
}

// Function to control direction of motor B
void setMotorBDirection(uint8_t direction) {
	if (direction == 1) { // Forward
 162:	81 30       	cpi	r24, 0x01	; 1
 164:	21 f4       	brne	.+8      	; 0x16e <setMotorBDirection+0xc>
		PORTB |= (1 << B_DIRECTION_PIN); // Set B_DIRECTION_PIN
 166:	85 b1       	in	r24, 0x05	; 5
 168:	88 60       	ori	r24, 0x08	; 8
 16a:	85 b9       	out	0x05, r24	; 5
 16c:	08 95       	ret
		} else { // Reverse
		PORTB &= ~(1 << B_DIRECTION_PIN); // Clear B_DIRECTION_PIN
 16e:	85 b1       	in	r24, 0x05	; 5
 170:	87 7f       	andi	r24, 0xF7	; 247
 172:	85 b9       	out	0x05, r24	; 5
 174:	08 95       	ret

00000176 <main>:
//#include "servo.h"

int main(void)
{
    
	init_ADC();
 176:	0e 94 53 00 	call	0xa6	; 0xa6 <init_ADC>
	init_USART(MYUBRR);
 17a:	87 e6       	ldi	r24, 0x67	; 103
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0e 94 76 00 	call	0xec	; 0xec <init_USART>
 	init_driving_PWM();
 182:	0e 94 91 00 	call	0x122	; 0x122 <init_driving_PWM>
 	//init_servo_PWM();
	
	DDRB |= (1 << 2);
 186:	84 b1       	in	r24, 0x04	; 4
 188:	84 60       	ori	r24, 0x04	; 4
 18a:	84 b9       	out	0x04, r24	; 4
	
	
	int white_limit = (int)(WHITE + 30);
	int black_limit = (int)(BLACK - 30);
	//servo_set_angle(0,180);
	PORTB |= (1 << 2);
 18c:	85 b1       	in	r24, 0x05	; 5
 18e:	84 60       	ori	r24, 0x04	; 4
 190:	85 b9       	out	0x05, r24	; 5
	//int16_t i = 0;
	DDRB |= (1 << A_DIRECTION_PIN) | (1 << B_DIRECTION_PIN); //set direction pins as output
 192:	84 b1       	in	r24, 0x04	; 4
 194:	8c 60       	ori	r24, 0x0C	; 12
 196:	84 b9       	out	0x04, r24	; 4
	
	setMotorADirection(1);
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	0e 94 a7 00 	call	0x14e	; 0x14e <setMotorADirection>
	setMotorBDirection(1);
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	0e 94 b1 00 	call	0x162	; 0x162 <setMotorBDirection>
	setMotorASpeed(0);
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	0e 94 9b 00 	call	0x136	; 0x136 <setMotorASpeed>
	setMotorBSpeed(0);
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	0e 94 a1 00 	call	0x142	; 0x142 <setMotorBSpeed>
	
	sei();
 1b0:	78 94       	sei
// 		for (int i = 0; buffer[i] != '\0'; i++) {
// 			transferMessage(buffer[i]);
// 		}
// 		_delay_ms(20);
		// Delay before next measurement
		var = receiveMessage();
 1b2:	0e 94 88 00 	call	0x110	; 0x110 <receiveMessage>
		if(var != '\0'){receivedMessage = var;}
 1b6:	81 11       	cpse	r24, r1
 1b8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1bc:	87 e8       	ldi	r24, 0x87	; 135
 1be:	93 e1       	ldi	r25, 0x13	; 19
 1c0:	01 97       	sbiw	r24, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <main+0x4a>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <main+0x50>
 1c6:	00 00       	nop
		
		_delay_ms(20);
		if(receivedMessage == 'A'){
 1c8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 1cc:	81 34       	cpi	r24, 0x41	; 65
 1ce:	09 f0       	breq	.+2      	; 0x1d2 <main+0x5c>
 1d0:	b0 c0       	rjmp	.+352    	; 0x332 <main+0x1bc>
			if(readADC(SENSOR_LEFT_CHANNEL) > white_limit && (readADC(LINE_TRACKING_SENSOR_LEFT_CHANNEL) + 100) > white_limit && (readADC(LINE_TRACKING_SENSOR_MIDDLE_CHANNEL) + 90) > white_limit && (readADC(LINE_TRACKING_SENSOR_MIDDLE_CHANNEL) + 90) < black_limit && readADC(LINE_TRACKING_SENSOR_RIGHT_CHANNEL) < black_limit && (readADC(SENSOR_RIGHT_CHANNEL) + 40) < black_limit){
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	0e 94 61 00 	call	0xc2	; 0xc2 <readADC>
 1d8:	8f 3a       	cpi	r24, 0xAF	; 175
 1da:	91 40       	sbci	r25, 0x01	; 1
 1dc:	d0 f1       	brcs	.+116    	; 0x252 <main+0xdc>
 1de:	85 e0       	ldi	r24, 0x05	; 5
 1e0:	0e 94 61 00 	call	0xc2	; 0xc2 <readADC>
 1e4:	8c 59       	subi	r24, 0x9C	; 156
 1e6:	9f 4f       	sbci	r25, 0xFF	; 255
 1e8:	8f 3a       	cpi	r24, 0xAF	; 175
 1ea:	91 40       	sbci	r25, 0x01	; 1
 1ec:	90 f1       	brcs	.+100    	; 0x252 <main+0xdc>
 1ee:	82 e0       	ldi	r24, 0x02	; 2
 1f0:	0e 94 61 00 	call	0xc2	; 0xc2 <readADC>
 1f4:	86 5a       	subi	r24, 0xA6	; 166
 1f6:	9f 4f       	sbci	r25, 0xFF	; 255
 1f8:	8f 3a       	cpi	r24, 0xAF	; 175
 1fa:	91 40       	sbci	r25, 0x01	; 1
 1fc:	50 f1       	brcs	.+84     	; 0x252 <main+0xdc>
 1fe:	82 e0       	ldi	r24, 0x02	; 2
 200:	0e 94 61 00 	call	0xc2	; 0xc2 <readADC>
 204:	86 5a       	subi	r24, 0xA6	; 166
 206:	9f 4f       	sbci	r25, 0xFF	; 255
 208:	8e 3e       	cpi	r24, 0xEE	; 238
 20a:	92 40       	sbci	r25, 0x02	; 2
 20c:	10 f5       	brcc	.+68     	; 0x252 <main+0xdc>
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	0e 94 61 00 	call	0xc2	; 0xc2 <readADC>
 214:	8e 3e       	cpi	r24, 0xEE	; 238
 216:	92 40       	sbci	r25, 0x02	; 2
 218:	e0 f4       	brcc	.+56     	; 0x252 <main+0xdc>
 21a:	83 e0       	ldi	r24, 0x03	; 3
 21c:	0e 94 61 00 	call	0xc2	; 0xc2 <readADC>
 220:	88 96       	adiw	r24, 0x28	; 40
 222:	8e 3e       	cpi	r24, 0xEE	; 238
 224:	92 40       	sbci	r25, 0x02	; 2
 226:	a8 f4       	brcc	.+42     	; 0x252 <main+0xdc>
 228:	83 ec       	ldi	r24, 0xC3	; 195
 22a:	99 e0       	ldi	r25, 0x09	; 9
 22c:	01 97       	sbiw	r24, 0x01	; 1
 22e:	f1 f7       	brne	.-4      	; 0x22c <main+0xb6>
 230:	00 c0       	rjmp	.+0      	; 0x232 <main+0xbc>
 232:	00 00       	nop
				_delay_ms(10);
				setMotorASpeed(driveSpeedFull); // RIGHT
 234:	c6 e0       	ldi	r28, 0x06	; 6
 236:	d1 e0       	ldi	r29, 0x01	; 1
 238:	88 81       	ld	r24, Y
 23a:	0e 94 9b 00 	call	0x136	; 0x136 <setMotorASpeed>
				setMotorBSpeed(driveSpeedFull); // LEFT
 23e:	88 81       	ld	r24, Y
 240:	0e 94 a1 00 	call	0x142	; 0x142 <setMotorBSpeed>
 244:	83 ec       	ldi	r24, 0xC3	; 195
 246:	99 e0       	ldi	r25, 0x09	; 9
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <main+0xd2>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <main+0xd8>
 24e:	00 00       	nop
 250:	be c0       	rjmp	.+380    	; 0x3ce <main+0x258>
				_delay_ms(10);
				}else{
				if(readADC(SENSOR_LEFT_CHANNEL) < white_limit){
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	0e 94 61 00 	call	0xc2	; 0xc2 <readADC>
 258:	8e 3a       	cpi	r24, 0xAE	; 174
 25a:	91 40       	sbci	r25, 0x01	; 1
 25c:	90 f5       	brcc	.+100    	; 0x2c2 <main+0x14c>
					if((readADC(LINE_TRACKING_SENSOR_LEFT_CHANNEL) + 100) < white_limit){
 25e:	85 e0       	ldi	r24, 0x05	; 5
 260:	0e 94 61 00 	call	0xc2	; 0xc2 <readADC>
 264:	8c 59       	subi	r24, 0x9C	; 156
 266:	9f 4f       	sbci	r25, 0xFF	; 255
 268:	8e 3a       	cpi	r24, 0xAE	; 174
 26a:	91 40       	sbci	r25, 0x01	; 1
 26c:	a8 f4       	brcc	.+42     	; 0x298 <main+0x122>
 26e:	83 ec       	ldi	r24, 0xC3	; 195
 270:	99 e0       	ldi	r25, 0x09	; 9
 272:	01 97       	sbiw	r24, 0x01	; 1
 274:	f1 f7       	brne	.-4      	; 0x272 <main+0xfc>
 276:	00 c0       	rjmp	.+0      	; 0x278 <main+0x102>
 278:	00 00       	nop
						_delay_ms(10);
						setMotorASpeed(hardTurningSPeed); // RIGHT
 27a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 27e:	0e 94 9b 00 	call	0x136	; 0x136 <setMotorASpeed>
						setMotorBSpeed(driveSpeedTruning); // LEFT
 282:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <driveSpeedTruning>
 286:	0e 94 a1 00 	call	0x142	; 0x142 <setMotorBSpeed>
 28a:	83 ec       	ldi	r24, 0xC3	; 195
 28c:	99 e0       	ldi	r25, 0x09	; 9
 28e:	01 97       	sbiw	r24, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <main+0x118>
 292:	00 c0       	rjmp	.+0      	; 0x294 <main+0x11e>
 294:	00 00       	nop
 296:	9b c0       	rjmp	.+310    	; 0x3ce <main+0x258>
 298:	83 ec       	ldi	r24, 0xC3	; 195
 29a:	99 e0       	ldi	r25, 0x09	; 9
 29c:	01 97       	sbiw	r24, 0x01	; 1
 29e:	f1 f7       	brne	.-4      	; 0x29c <main+0x126>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <main+0x12c>
 2a2:	00 00       	nop
						_delay_ms(10);
						}else{
							_delay_ms(10);
							setMotorASpeed(turningSpeed); // RIGHT
 2a4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <turningSpeed>
 2a8:	0e 94 9b 00 	call	0x136	; 0x136 <setMotorASpeed>
							setMotorBSpeed(driveSpeedTruning); // LEFT
 2ac:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <driveSpeedTruning>
 2b0:	0e 94 a1 00 	call	0x142	; 0x142 <setMotorBSpeed>
 2b4:	83 ec       	ldi	r24, 0xC3	; 195
 2b6:	99 e0       	ldi	r25, 0x09	; 9
 2b8:	01 97       	sbiw	r24, 0x01	; 1
 2ba:	f1 f7       	brne	.-4      	; 0x2b8 <main+0x142>
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <main+0x148>
 2be:	00 00       	nop
 2c0:	86 c0       	rjmp	.+268    	; 0x3ce <main+0x258>
							_delay_ms(10);
					}
				}else if((readADC(SENSOR_RIGHT_CHANNEL) + 40) > black_limit){
 2c2:	83 e0       	ldi	r24, 0x03	; 3
 2c4:	0e 94 61 00 	call	0xc2	; 0xc2 <readADC>
 2c8:	88 96       	adiw	r24, 0x28	; 40
 2ca:	8f 3e       	cpi	r24, 0xEF	; 239
 2cc:	92 40       	sbci	r25, 0x02	; 2
 2ce:	08 f4       	brcc	.+2      	; 0x2d2 <main+0x15c>
 2d0:	7e c0       	rjmp	.+252    	; 0x3ce <main+0x258>
					if(readADC(LINE_TRACKING_SENSOR_RIGHT_CHANNEL) > black_limit){
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	0e 94 61 00 	call	0xc2	; 0xc2 <readADC>
 2d8:	8f 3e       	cpi	r24, 0xEF	; 239
 2da:	92 40       	sbci	r25, 0x02	; 2
 2dc:	a8 f0       	brcs	.+42     	; 0x308 <main+0x192>
 2de:	83 ec       	ldi	r24, 0xC3	; 195
 2e0:	99 e0       	ldi	r25, 0x09	; 9
 2e2:	01 97       	sbiw	r24, 0x01	; 1
 2e4:	f1 f7       	brne	.-4      	; 0x2e2 <main+0x16c>
 2e6:	00 c0       	rjmp	.+0      	; 0x2e8 <main+0x172>
 2e8:	00 00       	nop
						_delay_ms(10);
						setMotorASpeed(driveSpeedTruning); // RIGHT
 2ea:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <driveSpeedTruning>
 2ee:	0e 94 9b 00 	call	0x136	; 0x136 <setMotorASpeed>
						setMotorBSpeed(hardTurningSPeed); // LEFT
 2f2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2f6:	0e 94 a1 00 	call	0x142	; 0x142 <setMotorBSpeed>
 2fa:	83 ec       	ldi	r24, 0xC3	; 195
 2fc:	99 e0       	ldi	r25, 0x09	; 9
 2fe:	01 97       	sbiw	r24, 0x01	; 1
 300:	f1 f7       	brne	.-4      	; 0x2fe <main+0x188>
 302:	00 c0       	rjmp	.+0      	; 0x304 <main+0x18e>
 304:	00 00       	nop
 306:	63 c0       	rjmp	.+198    	; 0x3ce <main+0x258>
 308:	83 ec       	ldi	r24, 0xC3	; 195
 30a:	99 e0       	ldi	r25, 0x09	; 9
 30c:	01 97       	sbiw	r24, 0x01	; 1
 30e:	f1 f7       	brne	.-4      	; 0x30c <main+0x196>
 310:	00 c0       	rjmp	.+0      	; 0x312 <main+0x19c>
 312:	00 00       	nop
						_delay_ms(10);
						}else{
							_delay_ms(10);
							setMotorASpeed(driveSpeedTruning); // RIGHT
 314:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <driveSpeedTruning>
 318:	0e 94 9b 00 	call	0x136	; 0x136 <setMotorASpeed>
							setMotorBSpeed(turningSpeed); // LEFT
 31c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <turningSpeed>
 320:	0e 94 a1 00 	call	0x142	; 0x142 <setMotorBSpeed>
 324:	83 ec       	ldi	r24, 0xC3	; 195
 326:	99 e0       	ldi	r25, 0x09	; 9
 328:	01 97       	sbiw	r24, 0x01	; 1
 32a:	f1 f7       	brne	.-4      	; 0x328 <main+0x1b2>
 32c:	00 c0       	rjmp	.+0      	; 0x32e <main+0x1b8>
 32e:	00 00       	nop
 330:	4e c0       	rjmp	.+156    	; 0x3ce <main+0x258>
							_delay_ms(10);
					}
				}
			}
		}else if(receivedMessage == 'B'){
 332:	82 34       	cpi	r24, 0x42	; 66
 334:	99 f4       	brne	.+38     	; 0x35c <main+0x1e6>
			setMotorASpeed(0);
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	0e 94 9b 00 	call	0x136	; 0x136 <setMotorASpeed>
			setMotorBSpeed(0);
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	0e 94 a1 00 	call	0x142	; 0x142 <setMotorBSpeed>
 342:	9f e3       	ldi	r25, 0x3F	; 63
 344:	22 e4       	ldi	r18, 0x42	; 66
 346:	8f e0       	ldi	r24, 0x0F	; 15
 348:	91 50       	subi	r25, 0x01	; 1
 34a:	20 40       	sbci	r18, 0x00	; 0
 34c:	80 40       	sbci	r24, 0x00	; 0
 34e:	e1 f7       	brne	.-8      	; 0x348 <main+0x1d2>
 350:	00 c0       	rjmp	.+0      	; 0x352 <main+0x1dc>
 352:	00 00       	nop
			_delay_ms(5000);
			receivedMessage = 'A';
 354:	81 e4       	ldi	r24, 0x41	; 65
 356:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
 35a:	39 c0       	rjmp	.+114    	; 0x3ce <main+0x258>
		}else if(receivedMessage == 'C'){
 35c:	83 34       	cpi	r24, 0x43	; 67
 35e:	39 f4       	brne	.+14     	; 0x36e <main+0x1f8>
			setMotorASpeed(0);
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	0e 94 9b 00 	call	0x136	; 0x136 <setMotorASpeed>
			setMotorBSpeed(0);
 366:	80 e0       	ldi	r24, 0x00	; 0
 368:	0e 94 a1 00 	call	0x142	; 0x142 <setMotorBSpeed>
 36c:	30 c0       	rjmp	.+96     	; 0x3ce <main+0x258>
		}else if(receivedMessage == '\0'){
 36e:	81 11       	cpse	r24, r1
 370:	1f c0       	rjmp	.+62     	; 0x3b0 <main+0x23a>
			transferMessage('I');
 372:	89 e4       	ldi	r24, 0x49	; 73
 374:	0e 94 81 00 	call	0x102	; 0x102 <transferMessage>
			transferMessage(' ');
 378:	80 e2       	ldi	r24, 0x20	; 32
 37a:	0e 94 81 00 	call	0x102	; 0x102 <transferMessage>
			transferMessage('A');
 37e:	81 e4       	ldi	r24, 0x41	; 65
 380:	0e 94 81 00 	call	0x102	; 0x102 <transferMessage>
			transferMessage('M');
 384:	8d e4       	ldi	r24, 0x4D	; 77
 386:	0e 94 81 00 	call	0x102	; 0x102 <transferMessage>
			transferMessage(' ');
 38a:	80 e2       	ldi	r24, 0x20	; 32
 38c:	0e 94 81 00 	call	0x102	; 0x102 <transferMessage>
			transferMessage('R');
 390:	82 e5       	ldi	r24, 0x52	; 82
 392:	0e 94 81 00 	call	0x102	; 0x102 <transferMessage>
			transferMessage('E');
 396:	85 e4       	ldi	r24, 0x45	; 69
 398:	0e 94 81 00 	call	0x102	; 0x102 <transferMessage>
			transferMessage('A');
 39c:	81 e4       	ldi	r24, 0x41	; 65
 39e:	0e 94 81 00 	call	0x102	; 0x102 <transferMessage>
			transferMessage('D');
 3a2:	84 e4       	ldi	r24, 0x44	; 68
 3a4:	0e 94 81 00 	call	0x102	; 0x102 <transferMessage>
			transferMessage('Y');
 3a8:	89 e5       	ldi	r24, 0x59	; 89
 3aa:	0e 94 81 00 	call	0x102	; 0x102 <transferMessage>
 3ae:	0f c0       	rjmp	.+30     	; 0x3ce <main+0x258>
		}else{
			transferMessage('E');
 3b0:	85 e4       	ldi	r24, 0x45	; 69
 3b2:	0e 94 81 00 	call	0x102	; 0x102 <transferMessage>
			transferMessage('R');
 3b6:	82 e5       	ldi	r24, 0x52	; 82
 3b8:	0e 94 81 00 	call	0x102	; 0x102 <transferMessage>
			transferMessage('R');
 3bc:	82 e5       	ldi	r24, 0x52	; 82
 3be:	0e 94 81 00 	call	0x102	; 0x102 <transferMessage>
			transferMessage('O');
 3c2:	8f e4       	ldi	r24, 0x4F	; 79
 3c4:	0e 94 81 00 	call	0x102	; 0x102 <transferMessage>
			transferMessage('R');
 3c8:	82 e5       	ldi	r24, 0x52	; 82
 3ca:	0e 94 81 00 	call	0x102	; 0x102 <transferMessage>
 3ce:	87 ea       	ldi	r24, 0xA7	; 167
 3d0:	91 e6       	ldi	r25, 0x61	; 97
 3d2:	01 97       	sbiw	r24, 0x01	; 1
 3d4:	f1 f7       	brne	.-4      	; 0x3d2 <main+0x25c>
 3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <main+0x262>
 3d8:	00 00       	nop
 3da:	eb ce       	rjmp	.-554    	; 0x1b2 <main+0x3c>

000003dc <_exit>:
 3dc:	f8 94       	cli

000003de <__stop_program>:
 3de:	ff cf       	rjmp	.-2      	; 0x3de <__stop_program>
