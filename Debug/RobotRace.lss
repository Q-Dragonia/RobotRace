
RobotRace.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  0000048a  0000051e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000048a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800114  00800114  00000532  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000532  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000564  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  000005a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011f3  00000000  00000000  0000065c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000833  00000000  00000000  0000184f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000072b  00000000  00000000  00002082  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  000027b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f9  00000000  00000000  00002930  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000075e  00000000  00000000  00002f29  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003687  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e8       	ldi	r30, 0x8A	; 138
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e1       	ldi	r26, 0x14	; 20
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 31       	cpi	r26, 0x15	; 21
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 aa 01 	call	0x354	; 0x354 <main>
  9e:	0c 94 43 02 	jmp	0x486	; 0x486 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_ADC>:
	
	for (int i = 0; buffer[i] != '\0'; i++) {
		while (!(UCSR0A & (1 << UDRE0)));
		UDR0 = buffer[i];
	}
}
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	80 83       	st	Z, r24
  b0:	ea e7       	ldi	r30, 0x7A	; 122
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	87 60       	ori	r24, 0x07	; 7
  b8:	80 83       	st	Z, r24
  ba:	80 81       	ld	r24, Z
  bc:	80 68       	ori	r24, 0x80	; 128
  be:	80 83       	st	Z, r24
  c0:	08 95       	ret

000000c2 <readADC>:
  c2:	ec e7       	ldi	r30, 0x7C	; 124
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	90 81       	ld	r25, Z
  c8:	90 7f       	andi	r25, 0xF0	; 240
  ca:	8f 70       	andi	r24, 0x0F	; 15
  cc:	89 2b       	or	r24, r25
  ce:	80 83       	st	Z, r24
  d0:	ea e7       	ldi	r30, 0x7A	; 122
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	80 64       	ori	r24, 0x40	; 64
  d8:	80 83       	st	Z, r24
  da:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  de:	86 fd       	sbrc	r24, 6
  e0:	fc cf       	rjmp	.-8      	; 0xda <readADC+0x18>
  e2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  e6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  ea:	08 95       	ret

000000ec <custom_delay_ms>:
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	00 d0       	rcall	.+0      	; 0xf2 <custom_delay_ms+0x6>
  f2:	cd b7       	in	r28, 0x3d	; 61
  f4:	de b7       	in	r29, 0x3e	; 62
  f6:	40 e0       	ldi	r20, 0x00	; 0
  f8:	50 e0       	ldi	r21, 0x00	; 0
  fa:	11 c0       	rjmp	.+34     	; 0x11e <custom_delay_ms+0x32>
  fc:	1a 82       	std	Y+2, r1	; 0x02
  fe:	19 82       	std	Y+1, r1	; 0x01
 100:	07 c0       	rjmp	.+14     	; 0x110 <custom_delay_ms+0x24>
 102:	00 00       	nop
 104:	29 81       	ldd	r18, Y+1	; 0x01
 106:	3a 81       	ldd	r19, Y+2	; 0x02
 108:	2f 5f       	subi	r18, 0xFF	; 255
 10a:	3f 4f       	sbci	r19, 0xFF	; 255
 10c:	3a 83       	std	Y+2, r19	; 0x02
 10e:	29 83       	std	Y+1, r18	; 0x01
 110:	29 81       	ldd	r18, Y+1	; 0x01
 112:	3a 81       	ldd	r19, Y+2	; 0x02
 114:	22 35       	cpi	r18, 0x52	; 82
 116:	33 40       	sbci	r19, 0x03	; 3
 118:	a0 f3       	brcs	.-24     	; 0x102 <custom_delay_ms+0x16>
 11a:	4f 5f       	subi	r20, 0xFF	; 255
 11c:	5f 4f       	sbci	r21, 0xFF	; 255
 11e:	48 17       	cp	r20, r24
 120:	59 07       	cpc	r21, r25
 122:	60 f3       	brcs	.-40     	; 0xfc <custom_delay_ms+0x10>
 124:	0f 90       	pop	r0
 126:	0f 90       	pop	r0
 128:	df 91       	pop	r29
 12a:	cf 91       	pop	r28
 12c:	08 95       	ret

0000012e <init_USART>:
 12e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 132:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 136:	88 e1       	ldi	r24, 0x18	; 24
 138:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 13c:	86 e0       	ldi	r24, 0x06	; 6
 13e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 142:	08 95       	ret

00000144 <receiveMessage>:

char receiveMessage(){
	// Wait for data to be received
	if (!(UCSR0A & (1 << RXC0))) {
 144:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 148:	88 23       	and	r24, r24
 14a:	1c f4       	brge	.+6      	; 0x152 <receiveMessage+0xe>
		return '\0';
	}
	// Get and return received data from buffer
	return UDR0;
 14c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 150:	08 95       	ret
}

char receiveMessage(){
	// Wait for data to be received
	if (!(UCSR0A & (1 << RXC0))) {
		return '\0';
 152:	80 e0       	ldi	r24, 0x00	; 0
	}
	// Get and return received data from buffer
	return UDR0;
}
 154:	08 95       	ret

00000156 <init_driving_PWM>:

#include "definitions.h"

void init_driving_PWM() {
	// Set OC0A (PD6) and OC0B (PD5) as output pins, motor speed pins
	DDRD |= (1 << DDD6) | (1 << DDD5);
 156:	8a b1       	in	r24, 0x0a	; 10
 158:	80 66       	ori	r24, 0x60	; 96
 15a:	8a b9       	out	0x0a, r24	; 10
	// Configure Timer0 for Fast PWM mode, non-inverted output (WGM02:0 = 3)
	TCCR0A |= (1 << COM0A1) | (1 << COM0B1) | (1 << WGM01) | (1 << WGM00);
 15c:	84 b5       	in	r24, 0x24	; 36
 15e:	83 6a       	ori	r24, 0xA3	; 163
 160:	84 bd       	out	0x24, r24	; 36
	//TCCR0B |= (1 << WGM02);

	// Set prescaler to 64
	TCCR0B |= (1 << CS01) | (1 << CS00);
 162:	85 b5       	in	r24, 0x25	; 37
 164:	83 60       	ori	r24, 0x03	; 3
 166:	85 bd       	out	0x25, r24	; 37
	
	DDRB |= (1 << A_DIRECTION_PIN) | (1 << B_DIRECTION_PIN); //set direction pins as output
 168:	84 b1       	in	r24, 0x04	; 4
 16a:	8c 60       	ori	r24, 0x0C	; 12
 16c:	84 b9       	out	0x04, r24	; 4
 16e:	08 95       	ret

00000170 <setMotorASpeed>:
}

// Function to set speed of motor A
void setMotorASpeed(uint8_t speed) {
	if (speed == 0) {
 170:	81 11       	cpse	r24, r1
 172:	02 c0       	rjmp	.+4      	; 0x178 <setMotorASpeed+0x8>
		OCR0B = 0; // Turn off PWM output
 174:	18 bc       	out	0x28, r1	; 40
 176:	08 95       	ret
		} else {
		OCR0B = speed; // Set PWM duty cycle
 178:	88 bd       	out	0x28, r24	; 40
 17a:	08 95       	ret

0000017c <setMotorBSpeed>:
	}
}

// Function to set speed of motor B
void setMotorBSpeed(uint8_t speed) {
	if (speed == 0) {
 17c:	81 11       	cpse	r24, r1
 17e:	02 c0       	rjmp	.+4      	; 0x184 <setMotorBSpeed+0x8>
		OCR0A = 0; // Turn off PWM output
 180:	17 bc       	out	0x27, r1	; 39
 182:	08 95       	ret
		} else {
		OCR0A = speed; // Set PWM duty cycle
 184:	87 bd       	out	0x27, r24	; 39
 186:	08 95       	ret

00000188 <setMotorADirection>:
	}
}

// Function to control direction of motor A
void setMotorADirection(uint8_t direction) {
	if (direction == 1) { // Forward
 188:	81 30       	cpi	r24, 0x01	; 1
 18a:	21 f4       	brne	.+8      	; 0x194 <setMotorADirection+0xc>
		PORTB |= (1 << A_DIRECTION_PIN); // Set A_DIRECTION_PIN
 18c:	85 b1       	in	r24, 0x05	; 5
 18e:	84 60       	ori	r24, 0x04	; 4
 190:	85 b9       	out	0x05, r24	; 5
 192:	08 95       	ret
		} else { // Reverse
		PORTB &= ~(1 << A_DIRECTION_PIN); // Clear A_DIRECTION_PIN
 194:	85 b1       	in	r24, 0x05	; 5
 196:	8b 7f       	andi	r24, 0xFB	; 251
 198:	85 b9       	out	0x05, r24	; 5
 19a:	08 95       	ret

0000019c <setMotorBDirection>:
	}
}

// Function to control direction of motor B
void setMotorBDirection(uint8_t direction) {
	if (direction == 1) { // Forward
 19c:	81 30       	cpi	r24, 0x01	; 1
 19e:	21 f4       	brne	.+8      	; 0x1a8 <setMotorBDirection+0xc>
		PORTB |= (1 << B_DIRECTION_PIN); // Set B_DIRECTION_PIN
 1a0:	85 b1       	in	r24, 0x05	; 5
 1a2:	88 60       	ori	r24, 0x08	; 8
 1a4:	85 b9       	out	0x05, r24	; 5
 1a6:	08 95       	ret
		} else { // Reverse
		PORTB &= ~(1 << B_DIRECTION_PIN); // Clear B_DIRECTION_PIN
 1a8:	85 b1       	in	r24, 0x05	; 5
 1aa:	87 7f       	andi	r24, 0xF7	; 247
 1ac:	85 b9       	out	0x05, r24	; 5
 1ae:	08 95       	ret

000001b0 <Forward>:
	}else if(averageValue > blackInnerLimit){
		turnLeft();
	}else{Forward();}
 }

void Forward(){
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b4:	83 ec       	ldi	r24, 0xC3	; 195
 1b6:	99 e0       	ldi	r25, 0x09	; 9
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <Forward+0x8>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <Forward+0xe>
 1be:	00 00       	nop
	_delay_ms(10);
	setMotorASpeed(driveSpeedFull); // RIGHT
 1c0:	c2 e1       	ldi	r28, 0x12	; 18
 1c2:	d1 e0       	ldi	r29, 0x01	; 1
 1c4:	88 81       	ld	r24, Y
 1c6:	0e 94 b8 00 	call	0x170	; 0x170 <setMotorASpeed>
	setMotorBSpeed(driveSpeedFull); // LEFT
 1ca:	88 81       	ld	r24, Y
 1cc:	0e 94 be 00 	call	0x17c	; 0x17c <setMotorBSpeed>
 1d0:	83 ec       	ldi	r24, 0xC3	; 195
 1d2:	99 e0       	ldi	r25, 0x09	; 9
 1d4:	01 97       	sbiw	r24, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <Forward+0x24>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <Forward+0x2a>
 1da:	00 00       	nop
	_delay_ms(10);
}
 1dc:	df 91       	pop	r29
 1de:	cf 91       	pop	r28
 1e0:	08 95       	ret

000001e2 <turnRight>:
 1e2:	83 ec       	ldi	r24, 0xC3	; 195
 1e4:	99 e0       	ldi	r25, 0x09	; 9
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <turnRight+0x4>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <turnRight+0xa>
 1ec:	00 00       	nop

void turnRight(){
	_delay_ms(10);
	setMotorASpeed(turningSpeed); // RIGHT
 1ee:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <turningSpeed>
 1f2:	0e 94 b8 00 	call	0x170	; 0x170 <setMotorASpeed>
	setMotorBSpeed(driveSpeedFull); // LEFT
 1f6:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <driveSpeedFull>
 1fa:	0e 94 be 00 	call	0x17c	; 0x17c <setMotorBSpeed>
 1fe:	83 ec       	ldi	r24, 0xC3	; 195
 200:	99 e0       	ldi	r25, 0x09	; 9
 202:	01 97       	sbiw	r24, 0x01	; 1
 204:	f1 f7       	brne	.-4      	; 0x202 <turnRight+0x20>
 206:	00 c0       	rjmp	.+0      	; 0x208 <turnRight+0x26>
 208:	00 00       	nop
 20a:	08 95       	ret

0000020c <turnRighty>:
 20c:	83 ec       	ldi	r24, 0xC3	; 195
 20e:	99 e0       	ldi	r25, 0x09	; 9
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <turnRighty+0x4>
 214:	00 c0       	rjmp	.+0      	; 0x216 <turnRighty+0xa>
 216:	00 00       	nop
	_delay_ms(10);
}

void turnRighty(){
	_delay_ms(10);
	setMotorASpeed(180); // RIGHT
 218:	84 eb       	ldi	r24, 0xB4	; 180
 21a:	0e 94 b8 00 	call	0x170	; 0x170 <setMotorASpeed>
	setMotorBSpeed(30); // LEFT
 21e:	8e e1       	ldi	r24, 0x1E	; 30
 220:	0e 94 be 00 	call	0x17c	; 0x17c <setMotorBSpeed>
 224:	83 ec       	ldi	r24, 0xC3	; 195
 226:	99 e0       	ldi	r25, 0x09	; 9
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <turnRighty+0x1c>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <turnRighty+0x22>
 22e:	00 00       	nop
 230:	08 95       	ret

00000232 <turnHardRight>:
 232:	83 ec       	ldi	r24, 0xC3	; 195
 234:	99 e0       	ldi	r25, 0x09	; 9
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <turnHardRight+0x4>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <turnHardRight+0xa>
 23c:	00 00       	nop
	_delay_ms(10);
}

void turnHardRight(){
	_delay_ms(10);
	setMotorASpeed(hardTurningSPeed); // RIGHT
 23e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <hardTurningSPeed>
 242:	0e 94 b8 00 	call	0x170	; 0x170 <setMotorASpeed>
	setMotorBSpeed(driveSpeedTruning); // LEFT
 246:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <driveSpeedTruning>
 24a:	0e 94 be 00 	call	0x17c	; 0x17c <setMotorBSpeed>
 24e:	83 ec       	ldi	r24, 0xC3	; 195
 250:	99 e0       	ldi	r25, 0x09	; 9
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <turnHardRight+0x20>
 256:	00 c0       	rjmp	.+0      	; 0x258 <turnHardRight+0x26>
 258:	00 00       	nop
 25a:	08 95       	ret

0000025c <turnLeft>:
 25c:	83 ec       	ldi	r24, 0xC3	; 195
 25e:	99 e0       	ldi	r25, 0x09	; 9
 260:	01 97       	sbiw	r24, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <turnLeft+0x4>
 264:	00 c0       	rjmp	.+0      	; 0x266 <turnLeft+0xa>
 266:	00 00       	nop
	_delay_ms(10);
}

void turnLeft(){
	_delay_ms(10);
	setMotorASpeed(driveSpeedFull); // RIGHT
 268:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <driveSpeedFull>
 26c:	0e 94 b8 00 	call	0x170	; 0x170 <setMotorASpeed>
	setMotorBSpeed(turningSpeed); // LEFT
 270:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <turningSpeed>
 274:	0e 94 be 00 	call	0x17c	; 0x17c <setMotorBSpeed>
 278:	83 ec       	ldi	r24, 0xC3	; 195
 27a:	99 e0       	ldi	r25, 0x09	; 9
 27c:	01 97       	sbiw	r24, 0x01	; 1
 27e:	f1 f7       	brne	.-4      	; 0x27c <turnLeft+0x20>
 280:	00 c0       	rjmp	.+0      	; 0x282 <turnLeft+0x26>
 282:	00 00       	nop
 284:	08 95       	ret

00000286 <turnLefty>:
 286:	83 ec       	ldi	r24, 0xC3	; 195
 288:	99 e0       	ldi	r25, 0x09	; 9
 28a:	01 97       	sbiw	r24, 0x01	; 1
 28c:	f1 f7       	brne	.-4      	; 0x28a <turnLefty+0x4>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <turnLefty+0xa>
 290:	00 00       	nop
	_delay_ms(10);
}

void turnLefty(){
	_delay_ms(10);
	setMotorASpeed(30); // RIGHT
 292:	8e e1       	ldi	r24, 0x1E	; 30
 294:	0e 94 b8 00 	call	0x170	; 0x170 <setMotorASpeed>
	setMotorBSpeed(180); // LEFT
 298:	84 eb       	ldi	r24, 0xB4	; 180
 29a:	0e 94 be 00 	call	0x17c	; 0x17c <setMotorBSpeed>
 29e:	83 ec       	ldi	r24, 0xC3	; 195
 2a0:	99 e0       	ldi	r25, 0x09	; 9
 2a2:	01 97       	sbiw	r24, 0x01	; 1
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <turnLefty+0x1c>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <turnLefty+0x22>
 2a8:	00 00       	nop
 2aa:	08 95       	ret

000002ac <turnHardLeft>:
 2ac:	83 ec       	ldi	r24, 0xC3	; 195
 2ae:	99 e0       	ldi	r25, 0x09	; 9
 2b0:	01 97       	sbiw	r24, 0x01	; 1
 2b2:	f1 f7       	brne	.-4      	; 0x2b0 <turnHardLeft+0x4>
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <turnHardLeft+0xa>
 2b6:	00 00       	nop
	_delay_ms(10);
}

void turnHardLeft(){
	_delay_ms(10);
	setMotorASpeed(driveSpeedTruning); // RIGHT
 2b8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <driveSpeedTruning>
 2bc:	0e 94 b8 00 	call	0x170	; 0x170 <setMotorASpeed>
	setMotorBSpeed(hardTurningSPeed); // LEFT
 2c0:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <hardTurningSPeed>
 2c4:	0e 94 be 00 	call	0x17c	; 0x17c <setMotorBSpeed>
 2c8:	83 ec       	ldi	r24, 0xC3	; 195
 2ca:	99 e0       	ldi	r25, 0x09	; 9
 2cc:	01 97       	sbiw	r24, 0x01	; 1
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <turnHardLeft+0x20>
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <turnHardLeft+0x26>
 2d2:	00 00       	nop
 2d4:	08 95       	ret

000002d6 <move>:
#include "definitions.h"
#include "movement.h"

void move(int averageValue){
	
	if(averageValue < whiteOuterLimit){
 2d6:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <whiteOuterLimit>
 2da:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <whiteOuterLimit+0x1>
 2de:	82 17       	cp	r24, r18
 2e0:	93 07       	cpc	r25, r19
 2e2:	1c f4       	brge	.+6      	; 0x2ea <move+0x14>
		turnHardRight();
 2e4:	0e 94 19 01 	call	0x232	; 0x232 <turnHardRight>
 2e8:	08 95       	ret
	}else if(averageValue < white_limit){
 2ea:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <white_limit>
 2ee:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <white_limit+0x1>
 2f2:	82 17       	cp	r24, r18
 2f4:	93 07       	cpc	r25, r19
 2f6:	1c f4       	brge	.+6      	; 0x2fe <move+0x28>
		turnRighty();
 2f8:	0e 94 06 01 	call	0x20c	; 0x20c <turnRighty>
 2fc:	08 95       	ret
	}else if(averageValue < whiteInnerLimit){
 2fe:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <whiteInnerLimit>
 302:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <whiteInnerLimit+0x1>
 306:	82 17       	cp	r24, r18
 308:	93 07       	cpc	r25, r19
 30a:	1c f4       	brge	.+6      	; 0x312 <move+0x3c>
		turnRight();
 30c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <turnRight>
 310:	08 95       	ret
	}else if(averageValue > blackOuterLimit){
 312:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <blackOuterLimit>
 316:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <blackOuterLimit+0x1>
 31a:	28 17       	cp	r18, r24
 31c:	39 07       	cpc	r19, r25
 31e:	1c f4       	brge	.+6      	; 0x326 <move+0x50>
		turnHardLeft();
 320:	0e 94 56 01 	call	0x2ac	; 0x2ac <turnHardLeft>
 324:	08 95       	ret
	}else if(averageValue > black_limit){
 326:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <black_limit>
 32a:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <black_limit+0x1>
 32e:	28 17       	cp	r18, r24
 330:	39 07       	cpc	r19, r25
 332:	1c f4       	brge	.+6      	; 0x33a <move+0x64>
		turnLefty();
 334:	0e 94 43 01 	call	0x286	; 0x286 <turnLefty>
 338:	08 95       	ret
	}else if(averageValue > blackInnerLimit){
 33a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 33e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 342:	28 17       	cp	r18, r24
 344:	39 07       	cpc	r19, r25
 346:	1c f4       	brge	.+6      	; 0x34e <move+0x78>
		turnLeft();
 348:	0e 94 2e 01 	call	0x25c	; 0x25c <turnLeft>
 34c:	08 95       	ret
	}else{Forward();}
 34e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <Forward>
 352:	08 95       	ret

00000354 <main>:
#include "turning.h"

int main(void)
{
    
	init_ADC();
 354:	0e 94 53 00 	call	0xa6	; 0xa6 <init_ADC>
	init_USART(MYUBRR);
 358:	87 e6       	ldi	r24, 0x67	; 103
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	0e 94 97 00 	call	0x12e	; 0x12e <init_USART>
 	init_driving_PWM();
 360:	0e 94 ab 00 	call	0x156	; 0x156 <init_driving_PWM>
	
	char var;
	
	setMotorADirection(1);
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	0e 94 c4 00 	call	0x188	; 0x188 <setMotorADirection>
	setMotorBDirection(1);
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	0e 94 ce 00 	call	0x19c	; 0x19c <setMotorBDirection>
	setMotorASpeed(0);
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	0e 94 b8 00 	call	0x170	; 0x170 <setMotorASpeed>
	setMotorBSpeed(0);
 376:	80 e0       	ldi	r24, 0x00	; 0
 378:	0e 94 be 00 	call	0x17c	; 0x17c <setMotorBSpeed>
	
	sei();
 37c:	78 94       	sei
	
  while (1) 
    {
		var = receiveMessage();
 37e:	0e 94 a2 00 	call	0x144	; 0x144 <receiveMessage>
		if(var == 'A' || var == 'B' || var == 'C'){receivedMessage = var;}
 382:	9f eb       	ldi	r25, 0xBF	; 191
 384:	98 0f       	add	r25, r24
 386:	93 30       	cpi	r25, 0x03	; 3
 388:	98 f5       	brcc	.+102    	; 0x3f0 <main+0x9c>
 38a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
 38e:	30 c0       	rjmp	.+96     	; 0x3f0 <main+0x9c>
		
		while(receivedMessage == 'A'){
			int sensorLeft = (int)(readADC(SENSOR_LEFT_CHANNEL) - 30);
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	0e 94 61 00 	call	0xc2	; 0xc2 <readADC>
 396:	4e 97       	sbiw	r24, 0x1e	; 30
 398:	6c 01       	movw	r12, r24
			int lineTrackingSensorLeft = (int)readADC(LINE_TRACKING_SENSOR_LEFT_CHANNEL);
 39a:	85 e0       	ldi	r24, 0x05	; 5
 39c:	0e 94 61 00 	call	0xc2	; 0xc2 <readADC>
 3a0:	ec 01       	movw	r28, r24
			int lineTrackingSensorMiddle = (int)readADC(LINE_TRACKING_SENSOR_MIDDLE_CHANNEL);
 3a2:	82 e0       	ldi	r24, 0x02	; 2
 3a4:	0e 94 61 00 	call	0xc2	; 0xc2 <readADC>
 3a8:	7c 01       	movw	r14, r24
			int lineTrackingSensorRight = (int)(readADC(LINE_TRACKING_SENSOR_RIGHT_CHANNEL) - 30);
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	0e 94 61 00 	call	0xc2	; 0xc2 <readADC>
 3b0:	8c 01       	movw	r16, r24
 3b2:	0e 51       	subi	r16, 0x1E	; 30
 3b4:	11 09       	sbc	r17, r1
			int sensorRight = (int)(readADC(SENSOR_RIGHT_CHANNEL) - 20);
 3b6:	83 e0       	ldi	r24, 0x03	; 3
 3b8:	0e 94 61 00 	call	0xc2	; 0xc2 <readADC>
 3bc:	44 97       	sbiw	r24, 0x14	; 20
			
			int averageValue = (int)((sensorLeft + lineTrackingSensorLeft + lineTrackingSensorMiddle + lineTrackingSensorRight +sensorRight) / 5);
 3be:	96 01       	movw	r18, r12
 3c0:	2c 0f       	add	r18, r28
 3c2:	3d 1f       	adc	r19, r29
 3c4:	e7 01       	movw	r28, r14
 3c6:	c2 0f       	add	r28, r18
 3c8:	d3 1f       	adc	r29, r19
 3ca:	c0 0f       	add	r28, r16
 3cc:	d1 1f       	adc	r29, r17
 3ce:	8c 0f       	add	r24, r28
 3d0:	9d 1f       	adc	r25, r29
 3d2:	65 e0       	ldi	r22, 0x05	; 5
 3d4:	70 e0       	ldi	r23, 0x00	; 0
 3d6:	0e 94 1b 02 	call	0x436	; 0x436 <__divmodhi4>
 3da:	cb 01       	movw	r24, r22
			
			move(averageValue);
 3dc:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <move>
			var = receiveMessage();
 3e0:	0e 94 a2 00 	call	0x144	; 0x144 <receiveMessage>
			if(var == 'B' || var == 'C'){receivedMessage = var;}
 3e4:	9e eb       	ldi	r25, 0xBE	; 190
 3e6:	98 0f       	add	r25, r24
 3e8:	92 30       	cpi	r25, 0x02	; 2
 3ea:	10 f4       	brcc	.+4      	; 0x3f0 <main+0x9c>
 3ec:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
  while (1) 
    {
		var = receiveMessage();
		if(var == 'A' || var == 'B' || var == 'C'){receivedMessage = var;}
		
		while(receivedMessage == 'A'){
 3f0:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 3f4:	81 34       	cpi	r24, 0x41	; 65
 3f6:	61 f2       	breq	.-104    	; 0x390 <main+0x3c>
			
			move(averageValue);
			var = receiveMessage();
			if(var == 'B' || var == 'C'){receivedMessage = var;}
		}
		setMotorASpeed(0);
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	0e 94 b8 00 	call	0x170	; 0x170 <setMotorASpeed>
		setMotorBSpeed(0);
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	0e 94 be 00 	call	0x17c	; 0x17c <setMotorBSpeed>
		if(receivedMessage == 'B'){
 404:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 408:	82 34       	cpi	r24, 0x42	; 66
 40a:	81 f4       	brne	.+32     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
			custom_delay_ms(5000);
 40c:	88 e8       	ldi	r24, 0x88	; 136
 40e:	93 e1       	ldi	r25, 0x13	; 19
 410:	0e 94 76 00 	call	0xec	; 0xec <custom_delay_ms>
			receivedMessage = 'A';
 414:	81 e4       	ldi	r24, 0x41	; 65
 416:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
 41a:	08 c0       	rjmp	.+16     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
		}
		while(receivedMessage == 'C'){
			var = receiveMessage();
 41c:	0e 94 a2 00 	call	0x144	; 0x144 <receiveMessage>
			if(var == 'A' || var == 'B'){receivedMessage =var;}
 420:	9f eb       	ldi	r25, 0xBF	; 191
 422:	98 0f       	add	r25, r24
 424:	92 30       	cpi	r25, 0x02	; 2
 426:	10 f4       	brcc	.+4      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 428:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
		setMotorBSpeed(0);
		if(receivedMessage == 'B'){
			custom_delay_ms(5000);
			receivedMessage = 'A';
		}
		while(receivedMessage == 'C'){
 42c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 430:	83 34       	cpi	r24, 0x43	; 67
 432:	a1 f3       	breq	.-24     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 434:	a4 cf       	rjmp	.-184    	; 0x37e <main+0x2a>

00000436 <__divmodhi4>:
 436:	97 fb       	bst	r25, 7
 438:	07 2e       	mov	r0, r23
 43a:	16 f4       	brtc	.+4      	; 0x440 <__divmodhi4+0xa>
 43c:	00 94       	com	r0
 43e:	07 d0       	rcall	.+14     	; 0x44e <__divmodhi4_neg1>
 440:	77 fd       	sbrc	r23, 7
 442:	09 d0       	rcall	.+18     	; 0x456 <__divmodhi4_neg2>
 444:	0e 94 2f 02 	call	0x45e	; 0x45e <__udivmodhi4>
 448:	07 fc       	sbrc	r0, 7
 44a:	05 d0       	rcall	.+10     	; 0x456 <__divmodhi4_neg2>
 44c:	3e f4       	brtc	.+14     	; 0x45c <__divmodhi4_exit>

0000044e <__divmodhi4_neg1>:
 44e:	90 95       	com	r25
 450:	81 95       	neg	r24
 452:	9f 4f       	sbci	r25, 0xFF	; 255
 454:	08 95       	ret

00000456 <__divmodhi4_neg2>:
 456:	70 95       	com	r23
 458:	61 95       	neg	r22
 45a:	7f 4f       	sbci	r23, 0xFF	; 255

0000045c <__divmodhi4_exit>:
 45c:	08 95       	ret

0000045e <__udivmodhi4>:
 45e:	aa 1b       	sub	r26, r26
 460:	bb 1b       	sub	r27, r27
 462:	51 e1       	ldi	r21, 0x11	; 17
 464:	07 c0       	rjmp	.+14     	; 0x474 <__udivmodhi4_ep>

00000466 <__udivmodhi4_loop>:
 466:	aa 1f       	adc	r26, r26
 468:	bb 1f       	adc	r27, r27
 46a:	a6 17       	cp	r26, r22
 46c:	b7 07       	cpc	r27, r23
 46e:	10 f0       	brcs	.+4      	; 0x474 <__udivmodhi4_ep>
 470:	a6 1b       	sub	r26, r22
 472:	b7 0b       	sbc	r27, r23

00000474 <__udivmodhi4_ep>:
 474:	88 1f       	adc	r24, r24
 476:	99 1f       	adc	r25, r25
 478:	5a 95       	dec	r21
 47a:	a9 f7       	brne	.-22     	; 0x466 <__udivmodhi4_loop>
 47c:	80 95       	com	r24
 47e:	90 95       	com	r25
 480:	bc 01       	movw	r22, r24
 482:	cd 01       	movw	r24, r26
 484:	08 95       	ret

00000486 <_exit>:
 486:	f8 94       	cli

00000488 <__stop_program>:
 488:	ff cf       	rjmp	.-2      	; 0x488 <__stop_program>
