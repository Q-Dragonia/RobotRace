
RobotRace.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00000a14  00000a88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a14  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000005c  00000000  00000000  00000aa2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b00  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e27  00000000  00000000  00000bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000080e  00000000  00000000  000019df  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000062a  00000000  00000000  000021ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f4  00000000  00000000  00002818  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000561  00000000  00000000  0000290c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002c3  00000000  00000000  00002e6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00003130  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e1       	ldi	r30, 0x14	; 20
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 31       	cpi	r26, 0x1A	; 26
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e1       	ldi	r26, 0x1A	; 26
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 31       	cpi	r26, 0x1A	; 26
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <main>
  9e:	0c 94 08 05 	jmp	0xa10	; 0xa10 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_ADC>:

#ifndef ADC_H_
#define ADC_H_

void init_ADC(){
	ADMUX |= (1 << REFS0);
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
  b0:	ea e7       	ldi	r30, 0x7A	; 122
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	87 60       	ori	r24, 0x07	; 7
  b8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);
  ba:	80 81       	ld	r24, Z
  bc:	80 68       	ori	r24, 0x80	; 128
  be:	80 83       	st	Z, r24
  c0:	08 95       	ret

000000c2 <readADC>:
}

uint16_t readADC(uint8_t channel){
	ADMUX = (ADMUX & 0xF0) | (channel & 0x0F);
  c2:	ec e7       	ldi	r30, 0x7C	; 124
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	90 81       	ld	r25, Z
  c8:	90 7f       	andi	r25, 0xF0	; 240
  ca:	8f 70       	andi	r24, 0x0F	; 15
  cc:	89 2b       	or	r24, r25
  ce:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);
  d0:	ea e7       	ldi	r30, 0x7A	; 122
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	80 64       	ori	r24, 0x40	; 64
  d8:	80 83       	st	Z, r24
	// Wait for conversion to complete
	while (ADCSRA & (1 << ADSC));
  da:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  de:	86 fd       	sbrc	r24, 6
  e0:	fc cf       	rjmp	.-8      	; 0xda <readADC+0x18>
	// Return ADC result (10-bit)
	return ADC;
  e2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  e6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
  ea:	08 95       	ret

000000ec <custom_delay_ms>:


#ifndef USART_H_
#define USART_H_

void custom_delay_ms(uint16_t ms) {
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	00 d0       	rcall	.+0      	; 0xf2 <custom_delay_ms+0x6>
  f2:	cd b7       	in	r28, 0x3d	; 61
  f4:	de b7       	in	r29, 0x3e	; 62
	for (uint16_t i = 0; i < ms; i++) {
  f6:	40 e0       	ldi	r20, 0x00	; 0
  f8:	50 e0       	ldi	r21, 0x00	; 0
  fa:	11 c0       	rjmp	.+34     	; 0x11e <custom_delay_ms+0x32>
		for (volatile uint16_t j = 0; j < 850; j++) { // Adjust this value for the desired delay
  fc:	1a 82       	std	Y+2, r1	; 0x02
  fe:	19 82       	std	Y+1, r1	; 0x01
 100:	07 c0       	rjmp	.+14     	; 0x110 <custom_delay_ms+0x24>
			asm("nop"); // No operation, helps in preventing optimization
 102:	00 00       	nop
#ifndef USART_H_
#define USART_H_

void custom_delay_ms(uint16_t ms) {
	for (uint16_t i = 0; i < ms; i++) {
		for (volatile uint16_t j = 0; j < 850; j++) { // Adjust this value for the desired delay
 104:	29 81       	ldd	r18, Y+1	; 0x01
 106:	3a 81       	ldd	r19, Y+2	; 0x02
 108:	2f 5f       	subi	r18, 0xFF	; 255
 10a:	3f 4f       	sbci	r19, 0xFF	; 255
 10c:	3a 83       	std	Y+2, r19	; 0x02
 10e:	29 83       	std	Y+1, r18	; 0x01
 110:	29 81       	ldd	r18, Y+1	; 0x01
 112:	3a 81       	ldd	r19, Y+2	; 0x02
 114:	22 35       	cpi	r18, 0x52	; 82
 116:	33 40       	sbci	r19, 0x03	; 3
 118:	a0 f3       	brcs	.-24     	; 0x102 <custom_delay_ms+0x16>

#ifndef USART_H_
#define USART_H_

void custom_delay_ms(uint16_t ms) {
	for (uint16_t i = 0; i < ms; i++) {
 11a:	4f 5f       	subi	r20, 0xFF	; 255
 11c:	5f 4f       	sbci	r21, 0xFF	; 255
 11e:	48 17       	cp	r20, r24
 120:	59 07       	cpc	r21, r25
 122:	60 f3       	brcs	.-40     	; 0xfc <custom_delay_ms+0x10>
		for (volatile uint16_t j = 0; j < 850; j++) { // Adjust this value for the desired delay
			asm("nop"); // No operation, helps in preventing optimization
		}
	}
}
 124:	0f 90       	pop	r0
 126:	0f 90       	pop	r0
 128:	df 91       	pop	r29
 12a:	cf 91       	pop	r28
 12c:	08 95       	ret

0000012e <init_USART>:


void init_USART(unsigned int ubrr){
	// Set baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
 12e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
 132:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	// Enable transmitter and receiver
	UCSR0B = (1 << TXEN0) | (1 << RXEN0);
 136:	88 e1       	ldi	r24, 0x18	; 24
 138:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	// Set frame format: 8 data bits, 1 stop bit
	UCSR0C = (3 << UCSZ00);
 13c:	86 e0       	ldi	r24, 0x06	; 6
 13e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 142:	08 95       	ret

00000144 <transferMessage>:
}

void transferMessage(unsigned char data){
	while (!(UCSR0A & (1<<UDRE0)));
 144:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 148:	95 ff       	sbrs	r25, 5
 14a:	fc cf       	rjmp	.-8      	; 0x144 <transferMessage>
	UDR0 = data;
 14c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 150:	08 95       	ret

00000152 <receiveMessage>:
}

char receiveMessage(){
	// Wait for data to be received
	if (!(UCSR0A & (1 << RXC0))) {
 152:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 156:	88 23       	and	r24, r24
 158:	1c f4       	brge	.+6      	; 0x160 <receiveMessage+0xe>
		return '\0';
	}
	// Get and return received data from buffer
	return UDR0;
 15a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 15e:	08 95       	ret
}

char receiveMessage(){
	// Wait for data to be received
	if (!(UCSR0A & (1 << RXC0))) {
		return '\0';
 160:	80 e0       	ldi	r24, 0x00	; 0
	}
	// Get and return received data from buffer
	return UDR0;
}
 162:	08 95       	ret

00000164 <init_driving_PWM>:

#include "definitions.h"

void init_driving_PWM() {
	// Set OC0A (PD6) and OC0B (PD5) as output pins, motor speed pins
	DDRD |= (1 << DDD6) | (1 << DDD5);
 164:	8a b1       	in	r24, 0x0a	; 10
 166:	80 66       	ori	r24, 0x60	; 96
 168:	8a b9       	out	0x0a, r24	; 10
	// Configure Timer0 for Fast PWM mode, non-inverted output (WGM02:0 = 3)
	TCCR0A |= (1 << COM0A1) | (1 << COM0B1) | (1 << WGM01) | (1 << WGM00);
 16a:	84 b5       	in	r24, 0x24	; 36
 16c:	83 6a       	ori	r24, 0xA3	; 163
 16e:	84 bd       	out	0x24, r24	; 36
	//TCCR0B |= (1 << WGM02);

	// Set prescaler to 64
	TCCR0B |= (1 << CS01) | (1 << CS00);
 170:	85 b5       	in	r24, 0x25	; 37
 172:	83 60       	ori	r24, 0x03	; 3
 174:	85 bd       	out	0x25, r24	; 37
 176:	08 95       	ret

00000178 <setMotorASpeed>:
}

// Function to set speed of motor A
void setMotorASpeed(uint8_t speed) {
	if (speed == 0) {
 178:	81 11       	cpse	r24, r1
 17a:	02 c0       	rjmp	.+4      	; 0x180 <setMotorASpeed+0x8>
		OCR0B = 0; // Turn off PWM output
 17c:	18 bc       	out	0x28, r1	; 40
 17e:	08 95       	ret
		} else {
		OCR0B = speed; // Set PWM duty cycle
 180:	88 bd       	out	0x28, r24	; 40
 182:	08 95       	ret

00000184 <setMotorBSpeed>:
	}
}

// Function to set speed of motor B
void setMotorBSpeed(uint8_t speed) {
	if (speed == 0) {
 184:	81 11       	cpse	r24, r1
 186:	02 c0       	rjmp	.+4      	; 0x18c <setMotorBSpeed+0x8>
		OCR0A = 0; // Turn off PWM output
 188:	17 bc       	out	0x27, r1	; 39
 18a:	08 95       	ret
		} else {
		OCR0A = speed; // Set PWM duty cycle
 18c:	87 bd       	out	0x27, r24	; 39
 18e:	08 95       	ret

00000190 <setMotorADirection>:
	}
}

// Function to control direction of motor A
void setMotorADirection(uint8_t direction) {
	if (direction == 1) { // Forward
 190:	81 30       	cpi	r24, 0x01	; 1
 192:	21 f4       	brne	.+8      	; 0x19c <setMotorADirection+0xc>
		PORTB |= (1 << A_DIRECTION_PIN); // Set A_DIRECTION_PIN
 194:	85 b1       	in	r24, 0x05	; 5
 196:	84 60       	ori	r24, 0x04	; 4
 198:	85 b9       	out	0x05, r24	; 5
 19a:	08 95       	ret
		} else { // Reverse
		PORTB &= ~(1 << A_DIRECTION_PIN); // Clear A_DIRECTION_PIN
 19c:	85 b1       	in	r24, 0x05	; 5
 19e:	8b 7f       	andi	r24, 0xFB	; 251
 1a0:	85 b9       	out	0x05, r24	; 5
 1a2:	08 95       	ret

000001a4 <setMotorBDirection>:
	}
}

// Function to control direction of motor B
void setMotorBDirection(uint8_t direction) {
	if (direction == 1) { // Forward
 1a4:	81 30       	cpi	r24, 0x01	; 1
 1a6:	21 f4       	brne	.+8      	; 0x1b0 <setMotorBDirection+0xc>
		PORTB |= (1 << B_DIRECTION_PIN); // Set B_DIRECTION_PIN
 1a8:	85 b1       	in	r24, 0x05	; 5
 1aa:	88 60       	ori	r24, 0x08	; 8
 1ac:	85 b9       	out	0x05, r24	; 5
 1ae:	08 95       	ret
		} else { // Reverse
		PORTB &= ~(1 << B_DIRECTION_PIN); // Clear B_DIRECTION_PIN
 1b0:	85 b1       	in	r24, 0x05	; 5
 1b2:	87 7f       	andi	r24, 0xF7	; 247
 1b4:	85 b9       	out	0x05, r24	; 5
 1b6:	08 95       	ret

000001b8 <main>:
#include "usart.h"
#include "movement.h"
//#include "servo.h"

int main(void)
{
 1b8:	cf 93       	push	r28
 1ba:	df 93       	push	r29
 1bc:	cd b7       	in	r28, 0x3d	; 61
 1be:	de b7       	in	r29, 0x3e	; 62
 1c0:	c0 55       	subi	r28, 0x50	; 80
 1c2:	d1 09       	sbc	r29, r1
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	f8 94       	cli
 1c8:	de bf       	out	0x3e, r29	; 62
 1ca:	0f be       	out	0x3f, r0	; 63
 1cc:	cd bf       	out	0x3d, r28	; 61
    
	init_ADC();
 1ce:	0e 94 53 00 	call	0xa6	; 0xa6 <init_ADC>
	init_USART(MYUBRR);
 1d2:	87 e6       	ldi	r24, 0x67	; 103
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	0e 94 97 00 	call	0x12e	; 0x12e <init_USART>
 	init_driving_PWM();
 1da:	0e 94 b2 00 	call	0x164	; 0x164 <init_driving_PWM>
 	//init_servo_PWM();
	
	DDRB |= (1 << 2);
 1de:	84 b1       	in	r24, 0x04	; 4
 1e0:	84 60       	ori	r24, 0x04	; 4
 1e2:	84 b9       	out	0x04, r24	; 4
	
	
	int white_limit = (int)(WHITE + 30);
	int black_limit = (int)(BLACK - 30);
	//servo_set_angle(0,180);
	PORTB |= (1 << 2);
 1e4:	85 b1       	in	r24, 0x05	; 5
 1e6:	84 60       	ori	r24, 0x04	; 4
 1e8:	85 b9       	out	0x05, r24	; 5
	//int16_t i = 0;
	DDRB |= (1 << A_DIRECTION_PIN) | (1 << B_DIRECTION_PIN); //set direction pins as output
 1ea:	84 b1       	in	r24, 0x04	; 4
 1ec:	8c 60       	ori	r24, 0x0C	; 12
 1ee:	84 b9       	out	0x04, r24	; 4
	
	setMotorADirection(1);
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	0e 94 c8 00 	call	0x190	; 0x190 <setMotorADirection>
	setMotorBDirection(1);
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <setMotorBDirection>
	setMotorASpeed(0);
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	0e 94 bc 00 	call	0x178	; 0x178 <setMotorASpeed>
	setMotorBSpeed(0);
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	0e 94 c2 00 	call	0x184	; 0x184 <setMotorBSpeed>
	
	sei();
 208:	78 94       	sei
// 		for (i=180;i>=0;i--){
// 			servo_set_angle(i,180);
// 			_delay_ms(40);
// 		}
		
		int sensorLeft = readADC(SENSOR_LEFT_CHANNEL);
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	0e 94 61 00 	call	0xc2	; 0xc2 <readADC>
 210:	5c 01       	movw	r10, r24
		int lineTrackingSensorLeft = readADC(LINE_TRACKING_SENSOR_LEFT_CHANNEL) + 100;
 212:	85 e0       	ldi	r24, 0x05	; 5
 214:	0e 94 61 00 	call	0xc2	; 0xc2 <readADC>
 218:	8c 01       	movw	r16, r24
 21a:	0c 59       	subi	r16, 0x9C	; 156
 21c:	1f 4f       	sbci	r17, 0xFF	; 255
 21e:	38 01       	movw	r6, r16
		int lineTrackingSensorMiddle = readADC(LINE_TRACKING_SENSOR_MIDDLE_CHANNEL) + 90;
 220:	82 e0       	ldi	r24, 0x02	; 2
 222:	0e 94 61 00 	call	0xc2	; 0xc2 <readADC>
 226:	86 5a       	subi	r24, 0xA6	; 166
 228:	9f 4f       	sbci	r25, 0xFF	; 255
 22a:	7c 01       	movw	r14, r24
 22c:	1c 01       	movw	r2, r24
		int lineTrackingSensorRight = readADC(LINE_TRACKING_SENSOR_RIGHT_CHANNEL);
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	0e 94 61 00 	call	0xc2	; 0xc2 <readADC>
 234:	4c 01       	movw	r8, r24
		int sensorRight = readADC(SENSOR_RIGHT_CHANNEL) + 40;
 236:	83 e0       	ldi	r24, 0x03	; 3
 238:	0e 94 61 00 	call	0xc2	; 0xc2 <readADC>
 23c:	88 96       	adiw	r24, 0x28	; 40
 23e:	6c 01       	movw	r12, r24
 240:	2c 01       	movw	r4, r24
		
		custom_delay_ms(50);
 242:	82 e3       	ldi	r24, 0x32	; 50
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	0e 94 76 00 	call	0xec	; 0xec <custom_delay_ms>
		
		// Convert distance to string
		char buffer[80];
		snprintf(buffer, sizeof(buffer), "%d %d %d %d %d \n", sensorLeft, lineTrackingSensorLeft, lineTrackingSensorMiddle, lineTrackingSensorRight, sensorRight);
 24a:	df 92       	push	r13
 24c:	cf 92       	push	r12
 24e:	9f 92       	push	r9
 250:	8f 92       	push	r8
 252:	ff 92       	push	r15
 254:	ef 92       	push	r14
 256:	1f 93       	push	r17
 258:	0f 93       	push	r16
 25a:	bf 92       	push	r11
 25c:	af 92       	push	r10
 25e:	88 e0       	ldi	r24, 0x08	; 8
 260:	91 e0       	ldi	r25, 0x01	; 1
 262:	9f 93       	push	r25
 264:	8f 93       	push	r24
 266:	1f 92       	push	r1
 268:	80 e5       	ldi	r24, 0x50	; 80
 26a:	8f 93       	push	r24
 26c:	ce 01       	movw	r24, r28
 26e:	01 96       	adiw	r24, 0x01	; 1
 270:	9f 93       	push	r25
 272:	8f 93       	push	r24
 274:	0e 94 10 02 	call	0x420	; 0x420 <snprintf>
		
		// Transmit distance over UART
		for (int i = 0; buffer[i] != '\0'; i++) {
 278:	0f b6       	in	r0, 0x3f	; 63
 27a:	f8 94       	cli
 27c:	de bf       	out	0x3e, r29	; 62
 27e:	0f be       	out	0x3f, r0	; 63
 280:	cd bf       	out	0x3d, r28	; 61
 282:	00 e0       	ldi	r16, 0x00	; 0
 284:	10 e0       	ldi	r17, 0x00	; 0
 286:	04 c0       	rjmp	.+8      	; 0x290 <main+0xd8>
			transferMessage(buffer[i]);
 288:	0e 94 a2 00 	call	0x144	; 0x144 <transferMessage>
		// Convert distance to string
		char buffer[80];
		snprintf(buffer, sizeof(buffer), "%d %d %d %d %d \n", sensorLeft, lineTrackingSensorLeft, lineTrackingSensorMiddle, lineTrackingSensorRight, sensorRight);
		
		// Transmit distance over UART
		for (int i = 0; buffer[i] != '\0'; i++) {
 28c:	0f 5f       	subi	r16, 0xFF	; 255
 28e:	1f 4f       	sbci	r17, 0xFF	; 255
 290:	e1 e0       	ldi	r30, 0x01	; 1
 292:	f0 e0       	ldi	r31, 0x00	; 0
 294:	ec 0f       	add	r30, r28
 296:	fd 1f       	adc	r31, r29
 298:	e0 0f       	add	r30, r16
 29a:	f1 1f       	adc	r31, r17
 29c:	80 81       	ld	r24, Z
 29e:	81 11       	cpse	r24, r1
 2a0:	f3 cf       	rjmp	.-26     	; 0x288 <main+0xd0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2a2:	e7 e8       	ldi	r30, 0x87	; 135
 2a4:	f3 e1       	ldi	r31, 0x13	; 19
 2a6:	31 97       	sbiw	r30, 0x01	; 1
 2a8:	f1 f7       	brne	.-4      	; 0x2a6 <main+0xee>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <main+0xf4>
 2ac:	00 00       	nop
			transferMessage(buffer[i]);
		}
		_delay_ms(20);
		// Delay before next measurement
		
		char receivedMessage = receiveMessage();
 2ae:	0e 94 a9 00 	call	0x152	; 0x152 <receiveMessage>
 2b2:	e7 e8       	ldi	r30, 0x87	; 135
 2b4:	f3 e1       	ldi	r31, 0x13	; 19
 2b6:	31 97       	sbiw	r30, 0x01	; 1
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <main+0xfe>
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <main+0x104>
 2bc:	00 00       	nop
		
		_delay_ms(20);
		if(receivedMessage == 'A' || receivedMessage == 'B'){
 2be:	9f eb       	ldi	r25, 0xBF	; 191
 2c0:	98 0f       	add	r25, r24
 2c2:	92 30       	cpi	r25, 0x02	; 2
 2c4:	08 f0       	brcs	.+2      	; 0x2c8 <main+0x110>
 2c6:	60 c0       	rjmp	.+192    	; 0x388 <main+0x1d0>
		if(sensorLeft > white_limit && lineTrackingSensorLeft > white_limit && lineTrackingSensorMiddle > white_limit && lineTrackingSensorMiddle < black_limit && lineTrackingSensorRight < black_limit && sensorRight < black_limit){
 2c8:	f7 e2       	ldi	r31, 0x27	; 39
 2ca:	af 16       	cp	r10, r31
 2cc:	f2 e0       	ldi	r31, 0x02	; 2
 2ce:	bf 06       	cpc	r11, r31
 2d0:	24 f1       	brlt	.+72     	; 0x31a <main+0x162>
 2d2:	27 e2       	ldi	r18, 0x27	; 39
 2d4:	62 16       	cp	r6, r18
 2d6:	22 e0       	ldi	r18, 0x02	; 2
 2d8:	72 06       	cpc	r7, r18
 2da:	fc f0       	brlt	.+62     	; 0x31a <main+0x162>
 2dc:	87 e2       	ldi	r24, 0x27	; 39
 2de:	28 16       	cp	r2, r24
 2e0:	82 e0       	ldi	r24, 0x02	; 2
 2e2:	38 06       	cpc	r3, r24
 2e4:	d4 f0       	brlt	.+52     	; 0x31a <main+0x162>
 2e6:	92 e0       	ldi	r25, 0x02	; 2
 2e8:	29 16       	cp	r2, r25
 2ea:	93 e0       	ldi	r25, 0x03	; 3
 2ec:	39 06       	cpc	r3, r25
 2ee:	ac f4       	brge	.+42     	; 0x31a <main+0x162>
 2f0:	e2 e0       	ldi	r30, 0x02	; 2
 2f2:	8e 16       	cp	r8, r30
 2f4:	e3 e0       	ldi	r30, 0x03	; 3
 2f6:	9e 06       	cpc	r9, r30
 2f8:	84 f4       	brge	.+32     	; 0x31a <main+0x162>
 2fa:	f2 e0       	ldi	r31, 0x02	; 2
 2fc:	4f 16       	cp	r4, r31
 2fe:	f3 e0       	ldi	r31, 0x03	; 3
 300:	5f 06       	cpc	r5, r31
 302:	5c f4       	brge	.+22     	; 0x31a <main+0x162>
			setMotorASpeed(driveSpeedFull); // RIGHT
 304:	06 e0       	ldi	r16, 0x06	; 6
 306:	11 e0       	ldi	r17, 0x01	; 1
 308:	f8 01       	movw	r30, r16
 30a:	80 81       	ld	r24, Z
 30c:	0e 94 bc 00 	call	0x178	; 0x178 <setMotorASpeed>
			setMotorBSpeed(driveSpeedFull); // LEFT
 310:	f8 01       	movw	r30, r16
 312:	80 81       	ld	r24, Z
 314:	0e 94 c2 00 	call	0x184	; 0x184 <setMotorBSpeed>
 318:	78 cf       	rjmp	.-272    	; 0x20a <main+0x52>
			}else{
				if(sensorLeft < white_limit){
 31a:	f6 e2       	ldi	r31, 0x26	; 38
 31c:	af 16       	cp	r10, r31
 31e:	f2 e0       	ldi	r31, 0x02	; 2
 320:	bf 06       	cpc	r11, r31
 322:	bc f4       	brge	.+46     	; 0x352 <main+0x19a>
					if(lineTrackingSensorLeft < white_limit){
 324:	26 e2       	ldi	r18, 0x26	; 38
 326:	62 16       	cp	r6, r18
 328:	22 e0       	ldi	r18, 0x02	; 2
 32a:	72 06       	cpc	r7, r18
 32c:	4c f4       	brge	.+18     	; 0x340 <main+0x188>
						setMotorASpeed(driveSpeedTruning); // RIGHT
 32e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <driveSpeedTruning>
 332:	0e 94 bc 00 	call	0x178	; 0x178 <setMotorASpeed>
						setMotorBSpeed(hardTurningSPeed); // LEFT
 336:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 33a:	0e 94 c2 00 	call	0x184	; 0x184 <setMotorBSpeed>
 33e:	65 cf       	rjmp	.-310    	; 0x20a <main+0x52>
						}else{
						setMotorASpeed(driveSpeedTruning); // RIGHT
 340:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <driveSpeedTruning>
 344:	0e 94 bc 00 	call	0x178	; 0x178 <setMotorASpeed>
						setMotorBSpeed(turningSpeed); // LEFT
 348:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <turningSpeed>
 34c:	0e 94 c2 00 	call	0x184	; 0x184 <setMotorBSpeed>
 350:	5c cf       	rjmp	.-328    	; 0x20a <main+0x52>
					}
				}else if(sensorRight > black_limit){
 352:	83 e0       	ldi	r24, 0x03	; 3
 354:	48 16       	cp	r4, r24
 356:	58 06       	cpc	r5, r24
 358:	0c f4       	brge	.+2      	; 0x35c <main+0x1a4>
 35a:	57 cf       	rjmp	.-338    	; 0x20a <main+0x52>
					if(lineTrackingSensorRight > black_limit){
 35c:	93 e0       	ldi	r25, 0x03	; 3
 35e:	89 16       	cp	r8, r25
 360:	99 06       	cpc	r9, r25
 362:	4c f0       	brlt	.+18     	; 0x376 <main+0x1be>
						setMotorASpeed(hardTurningSPeed); // RIGHT
 364:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 368:	0e 94 bc 00 	call	0x178	; 0x178 <setMotorASpeed>
						setMotorBSpeed(driveSpeedTruning); // LEFT
 36c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <driveSpeedTruning>
 370:	0e 94 c2 00 	call	0x184	; 0x184 <setMotorBSpeed>
 374:	4a cf       	rjmp	.-364    	; 0x20a <main+0x52>
						}else{
						setMotorASpeed(turningSpeed); // RIGHT
 376:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <turningSpeed>
 37a:	0e 94 bc 00 	call	0x178	; 0x178 <setMotorASpeed>
						setMotorBSpeed(driveSpeedTruning); // LEFT
 37e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <driveSpeedTruning>
 382:	0e 94 c2 00 	call	0x184	; 0x184 <setMotorBSpeed>
 386:	41 cf       	rjmp	.-382    	; 0x20a <main+0x52>
					}
				}
			}
		}else if(receivedMessage == 'B'){
 388:	82 34       	cpi	r24, 0x42	; 66
 38a:	81 f4       	brne	.+32     	; 0x3ac <main+0x1f4>
			setMotorASpeed(0);
 38c:	80 e0       	ldi	r24, 0x00	; 0
 38e:	0e 94 bc 00 	call	0x178	; 0x178 <setMotorASpeed>
			setMotorBSpeed(0);
 392:	80 e0       	ldi	r24, 0x00	; 0
 394:	0e 94 c2 00 	call	0x184	; 0x184 <setMotorBSpeed>
 398:	ef e3       	ldi	r30, 0x3F	; 63
 39a:	f2 e4       	ldi	r31, 0x42	; 66
 39c:	2f e0       	ldi	r18, 0x0F	; 15
 39e:	e1 50       	subi	r30, 0x01	; 1
 3a0:	f0 40       	sbci	r31, 0x00	; 0
 3a2:	20 40       	sbci	r18, 0x00	; 0
 3a4:	e1 f7       	brne	.-8      	; 0x39e <main+0x1e6>
 3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <main+0x1f0>
 3a8:	00 00       	nop
 3aa:	2f cf       	rjmp	.-418    	; 0x20a <main+0x52>
			_delay_ms(5000);
			receivedMessage = 'A';
		}else if(receivedMessage == 'C'){
 3ac:	83 34       	cpi	r24, 0x43	; 67
 3ae:	39 f4       	brne	.+14     	; 0x3be <main+0x206>
			setMotorASpeed(0);
 3b0:	80 e0       	ldi	r24, 0x00	; 0
 3b2:	0e 94 bc 00 	call	0x178	; 0x178 <setMotorASpeed>
			setMotorBSpeed(0);
 3b6:	80 e0       	ldi	r24, 0x00	; 0
 3b8:	0e 94 c2 00 	call	0x184	; 0x184 <setMotorBSpeed>
 3bc:	26 cf       	rjmp	.-436    	; 0x20a <main+0x52>
		}else if(receivedMessage == '\0'){
 3be:	81 11       	cpse	r24, r1
 3c0:	1f c0       	rjmp	.+62     	; 0x400 <__EEPROM_REGION_LENGTH__>
			transferMessage('I');
 3c2:	89 e4       	ldi	r24, 0x49	; 73
 3c4:	0e 94 a2 00 	call	0x144	; 0x144 <transferMessage>
			transferMessage(' ');
 3c8:	80 e2       	ldi	r24, 0x20	; 32
 3ca:	0e 94 a2 00 	call	0x144	; 0x144 <transferMessage>
			transferMessage('A');
 3ce:	81 e4       	ldi	r24, 0x41	; 65
 3d0:	0e 94 a2 00 	call	0x144	; 0x144 <transferMessage>
			transferMessage('M');
 3d4:	8d e4       	ldi	r24, 0x4D	; 77
 3d6:	0e 94 a2 00 	call	0x144	; 0x144 <transferMessage>
			transferMessage(' ');
 3da:	80 e2       	ldi	r24, 0x20	; 32
 3dc:	0e 94 a2 00 	call	0x144	; 0x144 <transferMessage>
			transferMessage('R');
 3e0:	82 e5       	ldi	r24, 0x52	; 82
 3e2:	0e 94 a2 00 	call	0x144	; 0x144 <transferMessage>
			transferMessage('E');
 3e6:	85 e4       	ldi	r24, 0x45	; 69
 3e8:	0e 94 a2 00 	call	0x144	; 0x144 <transferMessage>
			transferMessage('A');
 3ec:	81 e4       	ldi	r24, 0x41	; 65
 3ee:	0e 94 a2 00 	call	0x144	; 0x144 <transferMessage>
			transferMessage('D');
 3f2:	84 e4       	ldi	r24, 0x44	; 68
 3f4:	0e 94 a2 00 	call	0x144	; 0x144 <transferMessage>
			transferMessage('Y');
 3f8:	89 e5       	ldi	r24, 0x59	; 89
 3fa:	0e 94 a2 00 	call	0x144	; 0x144 <transferMessage>
 3fe:	05 cf       	rjmp	.-502    	; 0x20a <main+0x52>
		}else{
			transferMessage('E');
 400:	85 e4       	ldi	r24, 0x45	; 69
 402:	0e 94 a2 00 	call	0x144	; 0x144 <transferMessage>
			transferMessage('R');
 406:	82 e5       	ldi	r24, 0x52	; 82
 408:	0e 94 a2 00 	call	0x144	; 0x144 <transferMessage>
			transferMessage('R');
 40c:	82 e5       	ldi	r24, 0x52	; 82
 40e:	0e 94 a2 00 	call	0x144	; 0x144 <transferMessage>
			transferMessage('O');
 412:	8f e4       	ldi	r24, 0x4F	; 79
 414:	0e 94 a2 00 	call	0x144	; 0x144 <transferMessage>
			transferMessage('R');
 418:	82 e5       	ldi	r24, 0x52	; 82
 41a:	0e 94 a2 00 	call	0x144	; 0x144 <transferMessage>
// 		setMotorBSpeed(90);
// 		_delay_ms(2000);
// 		setMotorASpeed(0);
// 		setMotorBSpeed(0);
// 		_delay_ms(2000);
    }
 41e:	f5 ce       	rjmp	.-534    	; 0x20a <main+0x52>

00000420 <snprintf>:
 420:	ae e0       	ldi	r26, 0x0E	; 14
 422:	b0 e0       	ldi	r27, 0x00	; 0
 424:	e6 e1       	ldi	r30, 0x16	; 22
 426:	f2 e0       	ldi	r31, 0x02	; 2
 428:	0c 94 df 04 	jmp	0x9be	; 0x9be <__prologue_saves__+0x1c>
 42c:	0d 89       	ldd	r16, Y+21	; 0x15
 42e:	1e 89       	ldd	r17, Y+22	; 0x16
 430:	8f 89       	ldd	r24, Y+23	; 0x17
 432:	98 8d       	ldd	r25, Y+24	; 0x18
 434:	26 e0       	ldi	r18, 0x06	; 6
 436:	2c 83       	std	Y+4, r18	; 0x04
 438:	1a 83       	std	Y+2, r17	; 0x02
 43a:	09 83       	std	Y+1, r16	; 0x01
 43c:	97 ff       	sbrs	r25, 7
 43e:	02 c0       	rjmp	.+4      	; 0x444 <snprintf+0x24>
 440:	80 e0       	ldi	r24, 0x00	; 0
 442:	90 e8       	ldi	r25, 0x80	; 128
 444:	01 97       	sbiw	r24, 0x01	; 1
 446:	9e 83       	std	Y+6, r25	; 0x06
 448:	8d 83       	std	Y+5, r24	; 0x05
 44a:	ae 01       	movw	r20, r28
 44c:	45 5e       	subi	r20, 0xE5	; 229
 44e:	5f 4f       	sbci	r21, 0xFF	; 255
 450:	69 8d       	ldd	r22, Y+25	; 0x19
 452:	7a 8d       	ldd	r23, Y+26	; 0x1a
 454:	ce 01       	movw	r24, r28
 456:	01 96       	adiw	r24, 0x01	; 1
 458:	0e 94 40 02 	call	0x480	; 0x480 <vfprintf>
 45c:	4d 81       	ldd	r20, Y+5	; 0x05
 45e:	5e 81       	ldd	r21, Y+6	; 0x06
 460:	57 fd       	sbrc	r21, 7
 462:	0a c0       	rjmp	.+20     	; 0x478 <snprintf+0x58>
 464:	2f 81       	ldd	r18, Y+7	; 0x07
 466:	38 85       	ldd	r19, Y+8	; 0x08
 468:	42 17       	cp	r20, r18
 46a:	53 07       	cpc	r21, r19
 46c:	0c f4       	brge	.+2      	; 0x470 <snprintf+0x50>
 46e:	9a 01       	movw	r18, r20
 470:	f8 01       	movw	r30, r16
 472:	e2 0f       	add	r30, r18
 474:	f3 1f       	adc	r31, r19
 476:	10 82       	st	Z, r1
 478:	2e 96       	adiw	r28, 0x0e	; 14
 47a:	e4 e0       	ldi	r30, 0x04	; 4
 47c:	0c 94 fb 04 	jmp	0x9f6	; 0x9f6 <__epilogue_restores__+0x1c>

00000480 <vfprintf>:
 480:	ab e0       	ldi	r26, 0x0B	; 11
 482:	b0 e0       	ldi	r27, 0x00	; 0
 484:	e6 e4       	ldi	r30, 0x46	; 70
 486:	f2 e0       	ldi	r31, 0x02	; 2
 488:	0c 94 d1 04 	jmp	0x9a2	; 0x9a2 <__prologue_saves__>
 48c:	6c 01       	movw	r12, r24
 48e:	7b 01       	movw	r14, r22
 490:	8a 01       	movw	r16, r20
 492:	fc 01       	movw	r30, r24
 494:	17 82       	std	Z+7, r1	; 0x07
 496:	16 82       	std	Z+6, r1	; 0x06
 498:	83 81       	ldd	r24, Z+3	; 0x03
 49a:	81 ff       	sbrs	r24, 1
 49c:	cc c1       	rjmp	.+920    	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 49e:	ce 01       	movw	r24, r28
 4a0:	01 96       	adiw	r24, 0x01	; 1
 4a2:	3c 01       	movw	r6, r24
 4a4:	f6 01       	movw	r30, r12
 4a6:	93 81       	ldd	r25, Z+3	; 0x03
 4a8:	f7 01       	movw	r30, r14
 4aa:	93 fd       	sbrc	r25, 3
 4ac:	85 91       	lpm	r24, Z+
 4ae:	93 ff       	sbrs	r25, 3
 4b0:	81 91       	ld	r24, Z+
 4b2:	7f 01       	movw	r14, r30
 4b4:	88 23       	and	r24, r24
 4b6:	09 f4       	brne	.+2      	; 0x4ba <vfprintf+0x3a>
 4b8:	ba c1       	rjmp	.+884    	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 4ba:	85 32       	cpi	r24, 0x25	; 37
 4bc:	39 f4       	brne	.+14     	; 0x4cc <vfprintf+0x4c>
 4be:	93 fd       	sbrc	r25, 3
 4c0:	85 91       	lpm	r24, Z+
 4c2:	93 ff       	sbrs	r25, 3
 4c4:	81 91       	ld	r24, Z+
 4c6:	7f 01       	movw	r14, r30
 4c8:	85 32       	cpi	r24, 0x25	; 37
 4ca:	29 f4       	brne	.+10     	; 0x4d6 <vfprintf+0x56>
 4cc:	b6 01       	movw	r22, r12
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	0e 94 37 04 	call	0x86e	; 0x86e <fputc>
 4d4:	e7 cf       	rjmp	.-50     	; 0x4a4 <vfprintf+0x24>
 4d6:	91 2c       	mov	r9, r1
 4d8:	21 2c       	mov	r2, r1
 4da:	31 2c       	mov	r3, r1
 4dc:	ff e1       	ldi	r31, 0x1F	; 31
 4de:	f3 15       	cp	r31, r3
 4e0:	d8 f0       	brcs	.+54     	; 0x518 <vfprintf+0x98>
 4e2:	8b 32       	cpi	r24, 0x2B	; 43
 4e4:	79 f0       	breq	.+30     	; 0x504 <vfprintf+0x84>
 4e6:	38 f4       	brcc	.+14     	; 0x4f6 <vfprintf+0x76>
 4e8:	80 32       	cpi	r24, 0x20	; 32
 4ea:	79 f0       	breq	.+30     	; 0x50a <vfprintf+0x8a>
 4ec:	83 32       	cpi	r24, 0x23	; 35
 4ee:	a1 f4       	brne	.+40     	; 0x518 <vfprintf+0x98>
 4f0:	23 2d       	mov	r18, r3
 4f2:	20 61       	ori	r18, 0x10	; 16
 4f4:	1d c0       	rjmp	.+58     	; 0x530 <vfprintf+0xb0>
 4f6:	8d 32       	cpi	r24, 0x2D	; 45
 4f8:	61 f0       	breq	.+24     	; 0x512 <vfprintf+0x92>
 4fa:	80 33       	cpi	r24, 0x30	; 48
 4fc:	69 f4       	brne	.+26     	; 0x518 <vfprintf+0x98>
 4fe:	23 2d       	mov	r18, r3
 500:	21 60       	ori	r18, 0x01	; 1
 502:	16 c0       	rjmp	.+44     	; 0x530 <vfprintf+0xb0>
 504:	83 2d       	mov	r24, r3
 506:	82 60       	ori	r24, 0x02	; 2
 508:	38 2e       	mov	r3, r24
 50a:	e3 2d       	mov	r30, r3
 50c:	e4 60       	ori	r30, 0x04	; 4
 50e:	3e 2e       	mov	r3, r30
 510:	2a c0       	rjmp	.+84     	; 0x566 <vfprintf+0xe6>
 512:	f3 2d       	mov	r31, r3
 514:	f8 60       	ori	r31, 0x08	; 8
 516:	1d c0       	rjmp	.+58     	; 0x552 <vfprintf+0xd2>
 518:	37 fc       	sbrc	r3, 7
 51a:	2d c0       	rjmp	.+90     	; 0x576 <vfprintf+0xf6>
 51c:	20 ed       	ldi	r18, 0xD0	; 208
 51e:	28 0f       	add	r18, r24
 520:	2a 30       	cpi	r18, 0x0A	; 10
 522:	40 f0       	brcs	.+16     	; 0x534 <vfprintf+0xb4>
 524:	8e 32       	cpi	r24, 0x2E	; 46
 526:	b9 f4       	brne	.+46     	; 0x556 <vfprintf+0xd6>
 528:	36 fc       	sbrc	r3, 6
 52a:	81 c1       	rjmp	.+770    	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 52c:	23 2d       	mov	r18, r3
 52e:	20 64       	ori	r18, 0x40	; 64
 530:	32 2e       	mov	r3, r18
 532:	19 c0       	rjmp	.+50     	; 0x566 <vfprintf+0xe6>
 534:	36 fe       	sbrs	r3, 6
 536:	06 c0       	rjmp	.+12     	; 0x544 <vfprintf+0xc4>
 538:	8a e0       	ldi	r24, 0x0A	; 10
 53a:	98 9e       	mul	r9, r24
 53c:	20 0d       	add	r18, r0
 53e:	11 24       	eor	r1, r1
 540:	92 2e       	mov	r9, r18
 542:	11 c0       	rjmp	.+34     	; 0x566 <vfprintf+0xe6>
 544:	ea e0       	ldi	r30, 0x0A	; 10
 546:	2e 9e       	mul	r2, r30
 548:	20 0d       	add	r18, r0
 54a:	11 24       	eor	r1, r1
 54c:	22 2e       	mov	r2, r18
 54e:	f3 2d       	mov	r31, r3
 550:	f0 62       	ori	r31, 0x20	; 32
 552:	3f 2e       	mov	r3, r31
 554:	08 c0       	rjmp	.+16     	; 0x566 <vfprintf+0xe6>
 556:	8c 36       	cpi	r24, 0x6C	; 108
 558:	21 f4       	brne	.+8      	; 0x562 <vfprintf+0xe2>
 55a:	83 2d       	mov	r24, r3
 55c:	80 68       	ori	r24, 0x80	; 128
 55e:	38 2e       	mov	r3, r24
 560:	02 c0       	rjmp	.+4      	; 0x566 <vfprintf+0xe6>
 562:	88 36       	cpi	r24, 0x68	; 104
 564:	41 f4       	brne	.+16     	; 0x576 <vfprintf+0xf6>
 566:	f7 01       	movw	r30, r14
 568:	93 fd       	sbrc	r25, 3
 56a:	85 91       	lpm	r24, Z+
 56c:	93 ff       	sbrs	r25, 3
 56e:	81 91       	ld	r24, Z+
 570:	7f 01       	movw	r14, r30
 572:	81 11       	cpse	r24, r1
 574:	b3 cf       	rjmp	.-154    	; 0x4dc <vfprintf+0x5c>
 576:	98 2f       	mov	r25, r24
 578:	9f 7d       	andi	r25, 0xDF	; 223
 57a:	95 54       	subi	r25, 0x45	; 69
 57c:	93 30       	cpi	r25, 0x03	; 3
 57e:	28 f4       	brcc	.+10     	; 0x58a <vfprintf+0x10a>
 580:	0c 5f       	subi	r16, 0xFC	; 252
 582:	1f 4f       	sbci	r17, 0xFF	; 255
 584:	9f e3       	ldi	r25, 0x3F	; 63
 586:	99 83       	std	Y+1, r25	; 0x01
 588:	0d c0       	rjmp	.+26     	; 0x5a4 <vfprintf+0x124>
 58a:	83 36       	cpi	r24, 0x63	; 99
 58c:	31 f0       	breq	.+12     	; 0x59a <vfprintf+0x11a>
 58e:	83 37       	cpi	r24, 0x73	; 115
 590:	71 f0       	breq	.+28     	; 0x5ae <vfprintf+0x12e>
 592:	83 35       	cpi	r24, 0x53	; 83
 594:	09 f0       	breq	.+2      	; 0x598 <vfprintf+0x118>
 596:	59 c0       	rjmp	.+178    	; 0x64a <vfprintf+0x1ca>
 598:	21 c0       	rjmp	.+66     	; 0x5dc <vfprintf+0x15c>
 59a:	f8 01       	movw	r30, r16
 59c:	80 81       	ld	r24, Z
 59e:	89 83       	std	Y+1, r24	; 0x01
 5a0:	0e 5f       	subi	r16, 0xFE	; 254
 5a2:	1f 4f       	sbci	r17, 0xFF	; 255
 5a4:	88 24       	eor	r8, r8
 5a6:	83 94       	inc	r8
 5a8:	91 2c       	mov	r9, r1
 5aa:	53 01       	movw	r10, r6
 5ac:	13 c0       	rjmp	.+38     	; 0x5d4 <vfprintf+0x154>
 5ae:	28 01       	movw	r4, r16
 5b0:	f2 e0       	ldi	r31, 0x02	; 2
 5b2:	4f 0e       	add	r4, r31
 5b4:	51 1c       	adc	r5, r1
 5b6:	f8 01       	movw	r30, r16
 5b8:	a0 80       	ld	r10, Z
 5ba:	b1 80       	ldd	r11, Z+1	; 0x01
 5bc:	36 fe       	sbrs	r3, 6
 5be:	03 c0       	rjmp	.+6      	; 0x5c6 <vfprintf+0x146>
 5c0:	69 2d       	mov	r22, r9
 5c2:	70 e0       	ldi	r23, 0x00	; 0
 5c4:	02 c0       	rjmp	.+4      	; 0x5ca <vfprintf+0x14a>
 5c6:	6f ef       	ldi	r22, 0xFF	; 255
 5c8:	7f ef       	ldi	r23, 0xFF	; 255
 5ca:	c5 01       	movw	r24, r10
 5cc:	0e 94 2c 04 	call	0x858	; 0x858 <strnlen>
 5d0:	4c 01       	movw	r8, r24
 5d2:	82 01       	movw	r16, r4
 5d4:	f3 2d       	mov	r31, r3
 5d6:	ff 77       	andi	r31, 0x7F	; 127
 5d8:	3f 2e       	mov	r3, r31
 5da:	16 c0       	rjmp	.+44     	; 0x608 <vfprintf+0x188>
 5dc:	28 01       	movw	r4, r16
 5de:	22 e0       	ldi	r18, 0x02	; 2
 5e0:	42 0e       	add	r4, r18
 5e2:	51 1c       	adc	r5, r1
 5e4:	f8 01       	movw	r30, r16
 5e6:	a0 80       	ld	r10, Z
 5e8:	b1 80       	ldd	r11, Z+1	; 0x01
 5ea:	36 fe       	sbrs	r3, 6
 5ec:	03 c0       	rjmp	.+6      	; 0x5f4 <vfprintf+0x174>
 5ee:	69 2d       	mov	r22, r9
 5f0:	70 e0       	ldi	r23, 0x00	; 0
 5f2:	02 c0       	rjmp	.+4      	; 0x5f8 <vfprintf+0x178>
 5f4:	6f ef       	ldi	r22, 0xFF	; 255
 5f6:	7f ef       	ldi	r23, 0xFF	; 255
 5f8:	c5 01       	movw	r24, r10
 5fa:	0e 94 21 04 	call	0x842	; 0x842 <strnlen_P>
 5fe:	4c 01       	movw	r8, r24
 600:	f3 2d       	mov	r31, r3
 602:	f0 68       	ori	r31, 0x80	; 128
 604:	3f 2e       	mov	r3, r31
 606:	82 01       	movw	r16, r4
 608:	33 fc       	sbrc	r3, 3
 60a:	1b c0       	rjmp	.+54     	; 0x642 <vfprintf+0x1c2>
 60c:	82 2d       	mov	r24, r2
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	88 16       	cp	r8, r24
 612:	99 06       	cpc	r9, r25
 614:	b0 f4       	brcc	.+44     	; 0x642 <vfprintf+0x1c2>
 616:	b6 01       	movw	r22, r12
 618:	80 e2       	ldi	r24, 0x20	; 32
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	0e 94 37 04 	call	0x86e	; 0x86e <fputc>
 620:	2a 94       	dec	r2
 622:	f4 cf       	rjmp	.-24     	; 0x60c <vfprintf+0x18c>
 624:	f5 01       	movw	r30, r10
 626:	37 fc       	sbrc	r3, 7
 628:	85 91       	lpm	r24, Z+
 62a:	37 fe       	sbrs	r3, 7
 62c:	81 91       	ld	r24, Z+
 62e:	5f 01       	movw	r10, r30
 630:	b6 01       	movw	r22, r12
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	0e 94 37 04 	call	0x86e	; 0x86e <fputc>
 638:	21 10       	cpse	r2, r1
 63a:	2a 94       	dec	r2
 63c:	21 e0       	ldi	r18, 0x01	; 1
 63e:	82 1a       	sub	r8, r18
 640:	91 08       	sbc	r9, r1
 642:	81 14       	cp	r8, r1
 644:	91 04       	cpc	r9, r1
 646:	71 f7       	brne	.-36     	; 0x624 <vfprintf+0x1a4>
 648:	e8 c0       	rjmp	.+464    	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 64a:	84 36       	cpi	r24, 0x64	; 100
 64c:	11 f0       	breq	.+4      	; 0x652 <vfprintf+0x1d2>
 64e:	89 36       	cpi	r24, 0x69	; 105
 650:	41 f5       	brne	.+80     	; 0x6a2 <vfprintf+0x222>
 652:	f8 01       	movw	r30, r16
 654:	37 fe       	sbrs	r3, 7
 656:	07 c0       	rjmp	.+14     	; 0x666 <vfprintf+0x1e6>
 658:	60 81       	ld	r22, Z
 65a:	71 81       	ldd	r23, Z+1	; 0x01
 65c:	82 81       	ldd	r24, Z+2	; 0x02
 65e:	93 81       	ldd	r25, Z+3	; 0x03
 660:	0c 5f       	subi	r16, 0xFC	; 252
 662:	1f 4f       	sbci	r17, 0xFF	; 255
 664:	08 c0       	rjmp	.+16     	; 0x676 <vfprintf+0x1f6>
 666:	60 81       	ld	r22, Z
 668:	71 81       	ldd	r23, Z+1	; 0x01
 66a:	07 2e       	mov	r0, r23
 66c:	00 0c       	add	r0, r0
 66e:	88 0b       	sbc	r24, r24
 670:	99 0b       	sbc	r25, r25
 672:	0e 5f       	subi	r16, 0xFE	; 254
 674:	1f 4f       	sbci	r17, 0xFF	; 255
 676:	f3 2d       	mov	r31, r3
 678:	ff 76       	andi	r31, 0x6F	; 111
 67a:	3f 2e       	mov	r3, r31
 67c:	97 ff       	sbrs	r25, 7
 67e:	09 c0       	rjmp	.+18     	; 0x692 <vfprintf+0x212>
 680:	90 95       	com	r25
 682:	80 95       	com	r24
 684:	70 95       	com	r23
 686:	61 95       	neg	r22
 688:	7f 4f       	sbci	r23, 0xFF	; 255
 68a:	8f 4f       	sbci	r24, 0xFF	; 255
 68c:	9f 4f       	sbci	r25, 0xFF	; 255
 68e:	f0 68       	ori	r31, 0x80	; 128
 690:	3f 2e       	mov	r3, r31
 692:	2a e0       	ldi	r18, 0x0A	; 10
 694:	30 e0       	ldi	r19, 0x00	; 0
 696:	a3 01       	movw	r20, r6
 698:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__ultoa_invert>
 69c:	88 2e       	mov	r8, r24
 69e:	86 18       	sub	r8, r6
 6a0:	45 c0       	rjmp	.+138    	; 0x72c <vfprintf+0x2ac>
 6a2:	85 37       	cpi	r24, 0x75	; 117
 6a4:	31 f4       	brne	.+12     	; 0x6b2 <vfprintf+0x232>
 6a6:	23 2d       	mov	r18, r3
 6a8:	2f 7e       	andi	r18, 0xEF	; 239
 6aa:	b2 2e       	mov	r11, r18
 6ac:	2a e0       	ldi	r18, 0x0A	; 10
 6ae:	30 e0       	ldi	r19, 0x00	; 0
 6b0:	25 c0       	rjmp	.+74     	; 0x6fc <vfprintf+0x27c>
 6b2:	93 2d       	mov	r25, r3
 6b4:	99 7f       	andi	r25, 0xF9	; 249
 6b6:	b9 2e       	mov	r11, r25
 6b8:	8f 36       	cpi	r24, 0x6F	; 111
 6ba:	c1 f0       	breq	.+48     	; 0x6ec <vfprintf+0x26c>
 6bc:	18 f4       	brcc	.+6      	; 0x6c4 <vfprintf+0x244>
 6be:	88 35       	cpi	r24, 0x58	; 88
 6c0:	79 f0       	breq	.+30     	; 0x6e0 <vfprintf+0x260>
 6c2:	b5 c0       	rjmp	.+362    	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 6c4:	80 37       	cpi	r24, 0x70	; 112
 6c6:	19 f0       	breq	.+6      	; 0x6ce <vfprintf+0x24e>
 6c8:	88 37       	cpi	r24, 0x78	; 120
 6ca:	21 f0       	breq	.+8      	; 0x6d4 <vfprintf+0x254>
 6cc:	b0 c0       	rjmp	.+352    	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 6ce:	e9 2f       	mov	r30, r25
 6d0:	e0 61       	ori	r30, 0x10	; 16
 6d2:	be 2e       	mov	r11, r30
 6d4:	b4 fe       	sbrs	r11, 4
 6d6:	0d c0       	rjmp	.+26     	; 0x6f2 <vfprintf+0x272>
 6d8:	fb 2d       	mov	r31, r11
 6da:	f4 60       	ori	r31, 0x04	; 4
 6dc:	bf 2e       	mov	r11, r31
 6de:	09 c0       	rjmp	.+18     	; 0x6f2 <vfprintf+0x272>
 6e0:	34 fe       	sbrs	r3, 4
 6e2:	0a c0       	rjmp	.+20     	; 0x6f8 <vfprintf+0x278>
 6e4:	29 2f       	mov	r18, r25
 6e6:	26 60       	ori	r18, 0x06	; 6
 6e8:	b2 2e       	mov	r11, r18
 6ea:	06 c0       	rjmp	.+12     	; 0x6f8 <vfprintf+0x278>
 6ec:	28 e0       	ldi	r18, 0x08	; 8
 6ee:	30 e0       	ldi	r19, 0x00	; 0
 6f0:	05 c0       	rjmp	.+10     	; 0x6fc <vfprintf+0x27c>
 6f2:	20 e1       	ldi	r18, 0x10	; 16
 6f4:	30 e0       	ldi	r19, 0x00	; 0
 6f6:	02 c0       	rjmp	.+4      	; 0x6fc <vfprintf+0x27c>
 6f8:	20 e1       	ldi	r18, 0x10	; 16
 6fa:	32 e0       	ldi	r19, 0x02	; 2
 6fc:	f8 01       	movw	r30, r16
 6fe:	b7 fe       	sbrs	r11, 7
 700:	07 c0       	rjmp	.+14     	; 0x710 <vfprintf+0x290>
 702:	60 81       	ld	r22, Z
 704:	71 81       	ldd	r23, Z+1	; 0x01
 706:	82 81       	ldd	r24, Z+2	; 0x02
 708:	93 81       	ldd	r25, Z+3	; 0x03
 70a:	0c 5f       	subi	r16, 0xFC	; 252
 70c:	1f 4f       	sbci	r17, 0xFF	; 255
 70e:	06 c0       	rjmp	.+12     	; 0x71c <vfprintf+0x29c>
 710:	60 81       	ld	r22, Z
 712:	71 81       	ldd	r23, Z+1	; 0x01
 714:	80 e0       	ldi	r24, 0x00	; 0
 716:	90 e0       	ldi	r25, 0x00	; 0
 718:	0e 5f       	subi	r16, 0xFE	; 254
 71a:	1f 4f       	sbci	r17, 0xFF	; 255
 71c:	a3 01       	movw	r20, r6
 71e:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__ultoa_invert>
 722:	88 2e       	mov	r8, r24
 724:	86 18       	sub	r8, r6
 726:	fb 2d       	mov	r31, r11
 728:	ff 77       	andi	r31, 0x7F	; 127
 72a:	3f 2e       	mov	r3, r31
 72c:	36 fe       	sbrs	r3, 6
 72e:	0d c0       	rjmp	.+26     	; 0x74a <vfprintf+0x2ca>
 730:	23 2d       	mov	r18, r3
 732:	2e 7f       	andi	r18, 0xFE	; 254
 734:	a2 2e       	mov	r10, r18
 736:	89 14       	cp	r8, r9
 738:	58 f4       	brcc	.+22     	; 0x750 <vfprintf+0x2d0>
 73a:	34 fe       	sbrs	r3, 4
 73c:	0b c0       	rjmp	.+22     	; 0x754 <vfprintf+0x2d4>
 73e:	32 fc       	sbrc	r3, 2
 740:	09 c0       	rjmp	.+18     	; 0x754 <vfprintf+0x2d4>
 742:	83 2d       	mov	r24, r3
 744:	8e 7e       	andi	r24, 0xEE	; 238
 746:	a8 2e       	mov	r10, r24
 748:	05 c0       	rjmp	.+10     	; 0x754 <vfprintf+0x2d4>
 74a:	b8 2c       	mov	r11, r8
 74c:	a3 2c       	mov	r10, r3
 74e:	03 c0       	rjmp	.+6      	; 0x756 <vfprintf+0x2d6>
 750:	b8 2c       	mov	r11, r8
 752:	01 c0       	rjmp	.+2      	; 0x756 <vfprintf+0x2d6>
 754:	b9 2c       	mov	r11, r9
 756:	a4 fe       	sbrs	r10, 4
 758:	0f c0       	rjmp	.+30     	; 0x778 <vfprintf+0x2f8>
 75a:	fe 01       	movw	r30, r28
 75c:	e8 0d       	add	r30, r8
 75e:	f1 1d       	adc	r31, r1
 760:	80 81       	ld	r24, Z
 762:	80 33       	cpi	r24, 0x30	; 48
 764:	21 f4       	brne	.+8      	; 0x76e <vfprintf+0x2ee>
 766:	9a 2d       	mov	r25, r10
 768:	99 7e       	andi	r25, 0xE9	; 233
 76a:	a9 2e       	mov	r10, r25
 76c:	09 c0       	rjmp	.+18     	; 0x780 <vfprintf+0x300>
 76e:	a2 fe       	sbrs	r10, 2
 770:	06 c0       	rjmp	.+12     	; 0x77e <vfprintf+0x2fe>
 772:	b3 94       	inc	r11
 774:	b3 94       	inc	r11
 776:	04 c0       	rjmp	.+8      	; 0x780 <vfprintf+0x300>
 778:	8a 2d       	mov	r24, r10
 77a:	86 78       	andi	r24, 0x86	; 134
 77c:	09 f0       	breq	.+2      	; 0x780 <vfprintf+0x300>
 77e:	b3 94       	inc	r11
 780:	a3 fc       	sbrc	r10, 3
 782:	11 c0       	rjmp	.+34     	; 0x7a6 <vfprintf+0x326>
 784:	a0 fe       	sbrs	r10, 0
 786:	06 c0       	rjmp	.+12     	; 0x794 <vfprintf+0x314>
 788:	b2 14       	cp	r11, r2
 78a:	88 f4       	brcc	.+34     	; 0x7ae <vfprintf+0x32e>
 78c:	28 0c       	add	r2, r8
 78e:	92 2c       	mov	r9, r2
 790:	9b 18       	sub	r9, r11
 792:	0e c0       	rjmp	.+28     	; 0x7b0 <vfprintf+0x330>
 794:	b2 14       	cp	r11, r2
 796:	60 f4       	brcc	.+24     	; 0x7b0 <vfprintf+0x330>
 798:	b6 01       	movw	r22, r12
 79a:	80 e2       	ldi	r24, 0x20	; 32
 79c:	90 e0       	ldi	r25, 0x00	; 0
 79e:	0e 94 37 04 	call	0x86e	; 0x86e <fputc>
 7a2:	b3 94       	inc	r11
 7a4:	f7 cf       	rjmp	.-18     	; 0x794 <vfprintf+0x314>
 7a6:	b2 14       	cp	r11, r2
 7a8:	18 f4       	brcc	.+6      	; 0x7b0 <vfprintf+0x330>
 7aa:	2b 18       	sub	r2, r11
 7ac:	02 c0       	rjmp	.+4      	; 0x7b2 <vfprintf+0x332>
 7ae:	98 2c       	mov	r9, r8
 7b0:	21 2c       	mov	r2, r1
 7b2:	a4 fe       	sbrs	r10, 4
 7b4:	10 c0       	rjmp	.+32     	; 0x7d6 <vfprintf+0x356>
 7b6:	b6 01       	movw	r22, r12
 7b8:	80 e3       	ldi	r24, 0x30	; 48
 7ba:	90 e0       	ldi	r25, 0x00	; 0
 7bc:	0e 94 37 04 	call	0x86e	; 0x86e <fputc>
 7c0:	a2 fe       	sbrs	r10, 2
 7c2:	17 c0       	rjmp	.+46     	; 0x7f2 <vfprintf+0x372>
 7c4:	a1 fc       	sbrc	r10, 1
 7c6:	03 c0       	rjmp	.+6      	; 0x7ce <vfprintf+0x34e>
 7c8:	88 e7       	ldi	r24, 0x78	; 120
 7ca:	90 e0       	ldi	r25, 0x00	; 0
 7cc:	02 c0       	rjmp	.+4      	; 0x7d2 <vfprintf+0x352>
 7ce:	88 e5       	ldi	r24, 0x58	; 88
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	b6 01       	movw	r22, r12
 7d4:	0c c0       	rjmp	.+24     	; 0x7ee <vfprintf+0x36e>
 7d6:	8a 2d       	mov	r24, r10
 7d8:	86 78       	andi	r24, 0x86	; 134
 7da:	59 f0       	breq	.+22     	; 0x7f2 <vfprintf+0x372>
 7dc:	a1 fe       	sbrs	r10, 1
 7de:	02 c0       	rjmp	.+4      	; 0x7e4 <vfprintf+0x364>
 7e0:	8b e2       	ldi	r24, 0x2B	; 43
 7e2:	01 c0       	rjmp	.+2      	; 0x7e6 <vfprintf+0x366>
 7e4:	80 e2       	ldi	r24, 0x20	; 32
 7e6:	a7 fc       	sbrc	r10, 7
 7e8:	8d e2       	ldi	r24, 0x2D	; 45
 7ea:	b6 01       	movw	r22, r12
 7ec:	90 e0       	ldi	r25, 0x00	; 0
 7ee:	0e 94 37 04 	call	0x86e	; 0x86e <fputc>
 7f2:	89 14       	cp	r8, r9
 7f4:	38 f4       	brcc	.+14     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 7f6:	b6 01       	movw	r22, r12
 7f8:	80 e3       	ldi	r24, 0x30	; 48
 7fa:	90 e0       	ldi	r25, 0x00	; 0
 7fc:	0e 94 37 04 	call	0x86e	; 0x86e <fputc>
 800:	9a 94       	dec	r9
 802:	f7 cf       	rjmp	.-18     	; 0x7f2 <vfprintf+0x372>
 804:	8a 94       	dec	r8
 806:	f3 01       	movw	r30, r6
 808:	e8 0d       	add	r30, r8
 80a:	f1 1d       	adc	r31, r1
 80c:	80 81       	ld	r24, Z
 80e:	b6 01       	movw	r22, r12
 810:	90 e0       	ldi	r25, 0x00	; 0
 812:	0e 94 37 04 	call	0x86e	; 0x86e <fputc>
 816:	81 10       	cpse	r8, r1
 818:	f5 cf       	rjmp	.-22     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 81a:	22 20       	and	r2, r2
 81c:	09 f4       	brne	.+2      	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 81e:	42 ce       	rjmp	.-892    	; 0x4a4 <vfprintf+0x24>
 820:	b6 01       	movw	r22, r12
 822:	80 e2       	ldi	r24, 0x20	; 32
 824:	90 e0       	ldi	r25, 0x00	; 0
 826:	0e 94 37 04 	call	0x86e	; 0x86e <fputc>
 82a:	2a 94       	dec	r2
 82c:	f6 cf       	rjmp	.-20     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 82e:	f6 01       	movw	r30, r12
 830:	86 81       	ldd	r24, Z+6	; 0x06
 832:	97 81       	ldd	r25, Z+7	; 0x07
 834:	02 c0       	rjmp	.+4      	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 836:	8f ef       	ldi	r24, 0xFF	; 255
 838:	9f ef       	ldi	r25, 0xFF	; 255
 83a:	2b 96       	adiw	r28, 0x0b	; 11
 83c:	e2 e1       	ldi	r30, 0x12	; 18
 83e:	0c 94 ed 04 	jmp	0x9da	; 0x9da <__epilogue_restores__>

00000842 <strnlen_P>:
 842:	fc 01       	movw	r30, r24
 844:	05 90       	lpm	r0, Z+
 846:	61 50       	subi	r22, 0x01	; 1
 848:	70 40       	sbci	r23, 0x00	; 0
 84a:	01 10       	cpse	r0, r1
 84c:	d8 f7       	brcc	.-10     	; 0x844 <strnlen_P+0x2>
 84e:	80 95       	com	r24
 850:	90 95       	com	r25
 852:	8e 0f       	add	r24, r30
 854:	9f 1f       	adc	r25, r31
 856:	08 95       	ret

00000858 <strnlen>:
 858:	fc 01       	movw	r30, r24
 85a:	61 50       	subi	r22, 0x01	; 1
 85c:	70 40       	sbci	r23, 0x00	; 0
 85e:	01 90       	ld	r0, Z+
 860:	01 10       	cpse	r0, r1
 862:	d8 f7       	brcc	.-10     	; 0x85a <strnlen+0x2>
 864:	80 95       	com	r24
 866:	90 95       	com	r25
 868:	8e 0f       	add	r24, r30
 86a:	9f 1f       	adc	r25, r31
 86c:	08 95       	ret

0000086e <fputc>:
 86e:	0f 93       	push	r16
 870:	1f 93       	push	r17
 872:	cf 93       	push	r28
 874:	df 93       	push	r29
 876:	fb 01       	movw	r30, r22
 878:	23 81       	ldd	r18, Z+3	; 0x03
 87a:	21 fd       	sbrc	r18, 1
 87c:	03 c0       	rjmp	.+6      	; 0x884 <fputc+0x16>
 87e:	8f ef       	ldi	r24, 0xFF	; 255
 880:	9f ef       	ldi	r25, 0xFF	; 255
 882:	2c c0       	rjmp	.+88     	; 0x8dc <fputc+0x6e>
 884:	22 ff       	sbrs	r18, 2
 886:	16 c0       	rjmp	.+44     	; 0x8b4 <fputc+0x46>
 888:	46 81       	ldd	r20, Z+6	; 0x06
 88a:	57 81       	ldd	r21, Z+7	; 0x07
 88c:	24 81       	ldd	r18, Z+4	; 0x04
 88e:	35 81       	ldd	r19, Z+5	; 0x05
 890:	42 17       	cp	r20, r18
 892:	53 07       	cpc	r21, r19
 894:	44 f4       	brge	.+16     	; 0x8a6 <fputc+0x38>
 896:	a0 81       	ld	r26, Z
 898:	b1 81       	ldd	r27, Z+1	; 0x01
 89a:	9d 01       	movw	r18, r26
 89c:	2f 5f       	subi	r18, 0xFF	; 255
 89e:	3f 4f       	sbci	r19, 0xFF	; 255
 8a0:	31 83       	std	Z+1, r19	; 0x01
 8a2:	20 83       	st	Z, r18
 8a4:	8c 93       	st	X, r24
 8a6:	26 81       	ldd	r18, Z+6	; 0x06
 8a8:	37 81       	ldd	r19, Z+7	; 0x07
 8aa:	2f 5f       	subi	r18, 0xFF	; 255
 8ac:	3f 4f       	sbci	r19, 0xFF	; 255
 8ae:	37 83       	std	Z+7, r19	; 0x07
 8b0:	26 83       	std	Z+6, r18	; 0x06
 8b2:	14 c0       	rjmp	.+40     	; 0x8dc <fputc+0x6e>
 8b4:	8b 01       	movw	r16, r22
 8b6:	ec 01       	movw	r28, r24
 8b8:	fb 01       	movw	r30, r22
 8ba:	00 84       	ldd	r0, Z+8	; 0x08
 8bc:	f1 85       	ldd	r31, Z+9	; 0x09
 8be:	e0 2d       	mov	r30, r0
 8c0:	09 95       	icall
 8c2:	89 2b       	or	r24, r25
 8c4:	e1 f6       	brne	.-72     	; 0x87e <fputc+0x10>
 8c6:	d8 01       	movw	r26, r16
 8c8:	16 96       	adiw	r26, 0x06	; 6
 8ca:	8d 91       	ld	r24, X+
 8cc:	9c 91       	ld	r25, X
 8ce:	17 97       	sbiw	r26, 0x07	; 7
 8d0:	01 96       	adiw	r24, 0x01	; 1
 8d2:	17 96       	adiw	r26, 0x07	; 7
 8d4:	9c 93       	st	X, r25
 8d6:	8e 93       	st	-X, r24
 8d8:	16 97       	sbiw	r26, 0x06	; 6
 8da:	ce 01       	movw	r24, r28
 8dc:	df 91       	pop	r29
 8de:	cf 91       	pop	r28
 8e0:	1f 91       	pop	r17
 8e2:	0f 91       	pop	r16
 8e4:	08 95       	ret

000008e6 <__ultoa_invert>:
 8e6:	fa 01       	movw	r30, r20
 8e8:	aa 27       	eor	r26, r26
 8ea:	28 30       	cpi	r18, 0x08	; 8
 8ec:	51 f1       	breq	.+84     	; 0x942 <__stack+0x43>
 8ee:	20 31       	cpi	r18, 0x10	; 16
 8f0:	81 f1       	breq	.+96     	; 0x952 <__stack+0x53>
 8f2:	e8 94       	clt
 8f4:	6f 93       	push	r22
 8f6:	6e 7f       	andi	r22, 0xFE	; 254
 8f8:	6e 5f       	subi	r22, 0xFE	; 254
 8fa:	7f 4f       	sbci	r23, 0xFF	; 255
 8fc:	8f 4f       	sbci	r24, 0xFF	; 255
 8fe:	9f 4f       	sbci	r25, 0xFF	; 255
 900:	af 4f       	sbci	r26, 0xFF	; 255
 902:	b1 e0       	ldi	r27, 0x01	; 1
 904:	3e d0       	rcall	.+124    	; 0x982 <__stack+0x83>
 906:	b4 e0       	ldi	r27, 0x04	; 4
 908:	3c d0       	rcall	.+120    	; 0x982 <__stack+0x83>
 90a:	67 0f       	add	r22, r23
 90c:	78 1f       	adc	r23, r24
 90e:	89 1f       	adc	r24, r25
 910:	9a 1f       	adc	r25, r26
 912:	a1 1d       	adc	r26, r1
 914:	68 0f       	add	r22, r24
 916:	79 1f       	adc	r23, r25
 918:	8a 1f       	adc	r24, r26
 91a:	91 1d       	adc	r25, r1
 91c:	a1 1d       	adc	r26, r1
 91e:	6a 0f       	add	r22, r26
 920:	71 1d       	adc	r23, r1
 922:	81 1d       	adc	r24, r1
 924:	91 1d       	adc	r25, r1
 926:	a1 1d       	adc	r26, r1
 928:	20 d0       	rcall	.+64     	; 0x96a <__stack+0x6b>
 92a:	09 f4       	brne	.+2      	; 0x92e <__stack+0x2f>
 92c:	68 94       	set
 92e:	3f 91       	pop	r19
 930:	2a e0       	ldi	r18, 0x0A	; 10
 932:	26 9f       	mul	r18, r22
 934:	11 24       	eor	r1, r1
 936:	30 19       	sub	r19, r0
 938:	30 5d       	subi	r19, 0xD0	; 208
 93a:	31 93       	st	Z+, r19
 93c:	de f6       	brtc	.-74     	; 0x8f4 <__ultoa_invert+0xe>
 93e:	cf 01       	movw	r24, r30
 940:	08 95       	ret
 942:	46 2f       	mov	r20, r22
 944:	47 70       	andi	r20, 0x07	; 7
 946:	40 5d       	subi	r20, 0xD0	; 208
 948:	41 93       	st	Z+, r20
 94a:	b3 e0       	ldi	r27, 0x03	; 3
 94c:	0f d0       	rcall	.+30     	; 0x96c <__stack+0x6d>
 94e:	c9 f7       	brne	.-14     	; 0x942 <__stack+0x43>
 950:	f6 cf       	rjmp	.-20     	; 0x93e <__stack+0x3f>
 952:	46 2f       	mov	r20, r22
 954:	4f 70       	andi	r20, 0x0F	; 15
 956:	40 5d       	subi	r20, 0xD0	; 208
 958:	4a 33       	cpi	r20, 0x3A	; 58
 95a:	18 f0       	brcs	.+6      	; 0x962 <__stack+0x63>
 95c:	49 5d       	subi	r20, 0xD9	; 217
 95e:	31 fd       	sbrc	r19, 1
 960:	40 52       	subi	r20, 0x20	; 32
 962:	41 93       	st	Z+, r20
 964:	02 d0       	rcall	.+4      	; 0x96a <__stack+0x6b>
 966:	a9 f7       	brne	.-22     	; 0x952 <__stack+0x53>
 968:	ea cf       	rjmp	.-44     	; 0x93e <__stack+0x3f>
 96a:	b4 e0       	ldi	r27, 0x04	; 4
 96c:	a6 95       	lsr	r26
 96e:	97 95       	ror	r25
 970:	87 95       	ror	r24
 972:	77 95       	ror	r23
 974:	67 95       	ror	r22
 976:	ba 95       	dec	r27
 978:	c9 f7       	brne	.-14     	; 0x96c <__stack+0x6d>
 97a:	00 97       	sbiw	r24, 0x00	; 0
 97c:	61 05       	cpc	r22, r1
 97e:	71 05       	cpc	r23, r1
 980:	08 95       	ret
 982:	9b 01       	movw	r18, r22
 984:	ac 01       	movw	r20, r24
 986:	0a 2e       	mov	r0, r26
 988:	06 94       	lsr	r0
 98a:	57 95       	ror	r21
 98c:	47 95       	ror	r20
 98e:	37 95       	ror	r19
 990:	27 95       	ror	r18
 992:	ba 95       	dec	r27
 994:	c9 f7       	brne	.-14     	; 0x988 <__stack+0x89>
 996:	62 0f       	add	r22, r18
 998:	73 1f       	adc	r23, r19
 99a:	84 1f       	adc	r24, r20
 99c:	95 1f       	adc	r25, r21
 99e:	a0 1d       	adc	r26, r0
 9a0:	08 95       	ret

000009a2 <__prologue_saves__>:
 9a2:	2f 92       	push	r2
 9a4:	3f 92       	push	r3
 9a6:	4f 92       	push	r4
 9a8:	5f 92       	push	r5
 9aa:	6f 92       	push	r6
 9ac:	7f 92       	push	r7
 9ae:	8f 92       	push	r8
 9b0:	9f 92       	push	r9
 9b2:	af 92       	push	r10
 9b4:	bf 92       	push	r11
 9b6:	cf 92       	push	r12
 9b8:	df 92       	push	r13
 9ba:	ef 92       	push	r14
 9bc:	ff 92       	push	r15
 9be:	0f 93       	push	r16
 9c0:	1f 93       	push	r17
 9c2:	cf 93       	push	r28
 9c4:	df 93       	push	r29
 9c6:	cd b7       	in	r28, 0x3d	; 61
 9c8:	de b7       	in	r29, 0x3e	; 62
 9ca:	ca 1b       	sub	r28, r26
 9cc:	db 0b       	sbc	r29, r27
 9ce:	0f b6       	in	r0, 0x3f	; 63
 9d0:	f8 94       	cli
 9d2:	de bf       	out	0x3e, r29	; 62
 9d4:	0f be       	out	0x3f, r0	; 63
 9d6:	cd bf       	out	0x3d, r28	; 61
 9d8:	09 94       	ijmp

000009da <__epilogue_restores__>:
 9da:	2a 88       	ldd	r2, Y+18	; 0x12
 9dc:	39 88       	ldd	r3, Y+17	; 0x11
 9de:	48 88       	ldd	r4, Y+16	; 0x10
 9e0:	5f 84       	ldd	r5, Y+15	; 0x0f
 9e2:	6e 84       	ldd	r6, Y+14	; 0x0e
 9e4:	7d 84       	ldd	r7, Y+13	; 0x0d
 9e6:	8c 84       	ldd	r8, Y+12	; 0x0c
 9e8:	9b 84       	ldd	r9, Y+11	; 0x0b
 9ea:	aa 84       	ldd	r10, Y+10	; 0x0a
 9ec:	b9 84       	ldd	r11, Y+9	; 0x09
 9ee:	c8 84       	ldd	r12, Y+8	; 0x08
 9f0:	df 80       	ldd	r13, Y+7	; 0x07
 9f2:	ee 80       	ldd	r14, Y+6	; 0x06
 9f4:	fd 80       	ldd	r15, Y+5	; 0x05
 9f6:	0c 81       	ldd	r16, Y+4	; 0x04
 9f8:	1b 81       	ldd	r17, Y+3	; 0x03
 9fa:	aa 81       	ldd	r26, Y+2	; 0x02
 9fc:	b9 81       	ldd	r27, Y+1	; 0x01
 9fe:	ce 0f       	add	r28, r30
 a00:	d1 1d       	adc	r29, r1
 a02:	0f b6       	in	r0, 0x3f	; 63
 a04:	f8 94       	cli
 a06:	de bf       	out	0x3e, r29	; 62
 a08:	0f be       	out	0x3f, r0	; 63
 a0a:	cd bf       	out	0x3d, r28	; 61
 a0c:	ed 01       	movw	r28, r26
 a0e:	08 95       	ret

00000a10 <_exit>:
 a10:	f8 94       	cli

00000a12 <__stop_program>:
 a12:	ff cf       	rjmp	.-2      	; 0xa12 <__stop_program>
