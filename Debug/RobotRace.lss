
RobotRace.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000014a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000014a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000017c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007bd  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000677  00000000  00000000  000009f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000364  00000000  00000000  00001068  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d4  00000000  00000000  000013cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ee  00000000  00000000  000014a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000068  00000000  00000000  0000188e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 63 00 	call	0xc6	; 0xc6 <main>
  78:	0c 94 79 00 	jmp	0xf2	; 0xf2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <readLeftMiddleSensor>:
}
void initMovementMotors(){
	//Init is here
}

void initCollisionSensor(){
  80:	83 b1       	in	r24, 0x03	; 3
  82:	83 fb       	bst	r24, 3
  84:	88 27       	eor	r24, r24
  86:	80 f9       	bld	r24, 0
  88:	08 95       	ret

0000008a <readMiddleMiddleSensor>:
  8a:	89 b1       	in	r24, 0x09	; 9
  8c:	88 1f       	adc	r24, r24
  8e:	88 27       	eor	r24, r24
  90:	88 1f       	adc	r24, r24
  92:	08 95       	ret

00000094 <readRightMiddleSensor>:
  94:	83 b1       	in	r24, 0x03	; 3
  96:	81 70       	andi	r24, 0x01	; 1
  98:	08 95       	ret

0000009a <initMiddleBottomSensor>:
  9a:	84 b1       	in	r24, 0x04	; 4
  9c:	87 7f       	andi	r24, 0xF7	; 247
  9e:	84 b9       	out	0x04, r24	; 4
  a0:	8a b1       	in	r24, 0x0a	; 10
  a2:	8f 77       	andi	r24, 0x7F	; 127
  a4:	8a b9       	out	0x0a, r24	; 10
  a6:	84 b1       	in	r24, 0x04	; 4
  a8:	8e 7f       	andi	r24, 0xFE	; 254
  aa:	84 b9       	out	0x04, r24	; 4
  ac:	85 b1       	in	r24, 0x05	; 5
  ae:	88 60       	ori	r24, 0x08	; 8
  b0:	85 b9       	out	0x05, r24	; 5
  b2:	8b b1       	in	r24, 0x0b	; 11
  b4:	80 68       	ori	r24, 0x80	; 128
  b6:	8b b9       	out	0x0b, r24	; 11
  b8:	85 b1       	in	r24, 0x05	; 5
  ba:	81 60       	ori	r24, 0x01	; 1
  bc:	85 b9       	out	0x05, r24	; 5
  be:	08 95       	ret

000000c0 <initAll>:
  c0:	0e 94 4d 00 	call	0x9a	; 0x9a <initMiddleBottomSensor>
  c4:	08 95       	ret

000000c6 <main>:
#include "init_header.h"


int main(void)
{
	initAll();
  c6:	0e 94 60 00 	call	0xc0	; 0xc0 <initAll>
	
    /* Replace with your application code */
    while (1) 
    {
		if(readLeftMiddleSensor() == 1 && readMiddleMiddleSensor()== 1 && readRightMiddleSensor() == 1){ // 1 is black
  ca:	0e 94 40 00 	call	0x80	; 0x80 <readLeftMiddleSensor>
  ce:	81 30       	cpi	r24, 0x01	; 1
  d0:	61 f4       	brne	.+24     	; 0xea <main+0x24>
  d2:	0e 94 45 00 	call	0x8a	; 0x8a <readMiddleMiddleSensor>
  d6:	81 30       	cpi	r24, 0x01	; 1
  d8:	41 f4       	brne	.+16     	; 0xea <main+0x24>
  da:	0e 94 4a 00 	call	0x94	; 0x94 <readRightMiddleSensor>
  de:	81 30       	cpi	r24, 0x01	; 1
  e0:	21 f4       	brne	.+8      	; 0xea <main+0x24>
			PINB |= (1 << RED);
  e2:	83 b1       	in	r24, 0x03	; 3
  e4:	84 60       	ori	r24, 0x04	; 4
  e6:	83 b9       	out	0x03, r24	; 3
  e8:	f0 cf       	rjmp	.-32     	; 0xca <main+0x4>
		}else {
			PORTB &= ~(1 << RED);
  ea:	85 b1       	in	r24, 0x05	; 5
  ec:	8b 7f       	andi	r24, 0xFB	; 251
  ee:	85 b9       	out	0x05, r24	; 5
  f0:	ec cf       	rjmp	.-40     	; 0xca <main+0x4>

000000f2 <_exit>:
  f2:	f8 94       	cli

000000f4 <__stop_program>:
  f4:	ff cf       	rjmp	.-2      	; 0xf4 <__stop_program>
