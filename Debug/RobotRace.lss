
RobotRace.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000a4a  00000abe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a4a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000005c  00000000  00000000  00000ad0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b2c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e81  00000000  00000000  00000be4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007ff  00000000  00000000  00001a65  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000066a  00000000  00000000  00002264  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f4  00000000  00000000  000028d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000051d  00000000  00000000  000029c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000279  00000000  00000000  00002ee1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  0000315a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e4       	ldi	r30, 0x4A	; 74
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 31       	cpi	r26, 0x12	; 18
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <main>
  9e:	0c 94 23 05 	jmp	0xa46	; 0xa46 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_ADC>:

#ifndef ADC_H_
#define ADC_H_

void init_ADC(){
	ADMUX |= (1 << REFS0);
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
  b0:	ea e7       	ldi	r30, 0x7A	; 122
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	87 60       	ori	r24, 0x07	; 7
  b8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);
  ba:	80 81       	ld	r24, Z
  bc:	80 68       	ori	r24, 0x80	; 128
  be:	80 83       	st	Z, r24
  c0:	08 95       	ret

000000c2 <readADC>:
}

uint16_t readADC(uint8_t channel){
	ADMUX = (ADMUX & 0xF0) | (channel & 0x0F);
  c2:	ec e7       	ldi	r30, 0x7C	; 124
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	90 81       	ld	r25, Z
  c8:	90 7f       	andi	r25, 0xF0	; 240
  ca:	8f 70       	andi	r24, 0x0F	; 15
  cc:	89 2b       	or	r24, r25
  ce:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);
  d0:	ea e7       	ldi	r30, 0x7A	; 122
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	80 64       	ori	r24, 0x40	; 64
  d8:	80 83       	st	Z, r24
	// Wait for conversion to complete
	while (ADCSRA & (1 << ADSC));
  da:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  de:	86 fd       	sbrc	r24, 6
  e0:	fc cf       	rjmp	.-8      	; 0xda <readADC+0x18>
	// Return ADC result (10-bit)
	return ADC;
  e2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  e6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
  ea:	08 95       	ret

000000ec <custom_delay_ms>:


#ifndef USART_H_
#define USART_H_

void custom_delay_ms(uint16_t ms) {
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	00 d0       	rcall	.+0      	; 0xf2 <custom_delay_ms+0x6>
  f2:	cd b7       	in	r28, 0x3d	; 61
  f4:	de b7       	in	r29, 0x3e	; 62
	for (uint16_t i = 0; i < ms; i++) {
  f6:	40 e0       	ldi	r20, 0x00	; 0
  f8:	50 e0       	ldi	r21, 0x00	; 0
  fa:	11 c0       	rjmp	.+34     	; 0x11e <custom_delay_ms+0x32>
		for (volatile uint16_t j = 0; j < 850; j++) { // Adjust this value for the desired delay
  fc:	1a 82       	std	Y+2, r1	; 0x02
  fe:	19 82       	std	Y+1, r1	; 0x01
 100:	07 c0       	rjmp	.+14     	; 0x110 <custom_delay_ms+0x24>
			asm("nop"); // No operation, helps in preventing optimization
 102:	00 00       	nop
#ifndef USART_H_
#define USART_H_

void custom_delay_ms(uint16_t ms) {
	for (uint16_t i = 0; i < ms; i++) {
		for (volatile uint16_t j = 0; j < 850; j++) { // Adjust this value for the desired delay
 104:	29 81       	ldd	r18, Y+1	; 0x01
 106:	3a 81       	ldd	r19, Y+2	; 0x02
 108:	2f 5f       	subi	r18, 0xFF	; 255
 10a:	3f 4f       	sbci	r19, 0xFF	; 255
 10c:	3a 83       	std	Y+2, r19	; 0x02
 10e:	29 83       	std	Y+1, r18	; 0x01
 110:	29 81       	ldd	r18, Y+1	; 0x01
 112:	3a 81       	ldd	r19, Y+2	; 0x02
 114:	22 35       	cpi	r18, 0x52	; 82
 116:	33 40       	sbci	r19, 0x03	; 3
 118:	a0 f3       	brcs	.-24     	; 0x102 <custom_delay_ms+0x16>

#ifndef USART_H_
#define USART_H_

void custom_delay_ms(uint16_t ms) {
	for (uint16_t i = 0; i < ms; i++) {
 11a:	4f 5f       	subi	r20, 0xFF	; 255
 11c:	5f 4f       	sbci	r21, 0xFF	; 255
 11e:	48 17       	cp	r20, r24
 120:	59 07       	cpc	r21, r25
 122:	60 f3       	brcs	.-40     	; 0xfc <custom_delay_ms+0x10>
		for (volatile uint16_t j = 0; j < 850; j++) { // Adjust this value for the desired delay
			asm("nop"); // No operation, helps in preventing optimization
		}
	}
}
 124:	0f 90       	pop	r0
 126:	0f 90       	pop	r0
 128:	df 91       	pop	r29
 12a:	cf 91       	pop	r28
 12c:	08 95       	ret

0000012e <init_USART>:


void init_USART(unsigned int ubrr){
	// Set baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
 12e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
 132:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	// Enable transmitter and receiver
	UCSR0B = (1 << TXEN0) | (1 << RXEN0);
 136:	88 e1       	ldi	r24, 0x18	; 24
 138:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	// Set frame format: 8 data bits, 1 stop bit
	UCSR0C = (3 << UCSZ00);
 13c:	86 e0       	ldi	r24, 0x06	; 6
 13e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 142:	08 95       	ret

00000144 <transferMessage>:
}

void transferMessage(unsigned char data){
	while (!(UCSR0A & (1<<UDRE0)));
 144:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 148:	95 ff       	sbrs	r25, 5
 14a:	fc cf       	rjmp	.-8      	; 0x144 <transferMessage>
	UDR0 = data;
 14c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 150:	08 95       	ret

00000152 <receiveMessage>:
}

char receiveMessage(){
	// Wait for data to be received
	if (!(UCSR0A & (1 << RXC0))) {
 152:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 156:	88 23       	and	r24, r24
 158:	1c f4       	brge	.+6      	; 0x160 <receiveMessage+0xe>
		return '\0';
	}
	// Get and return received data from buffer
	return UDR0;
 15a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 15e:	08 95       	ret
}

char receiveMessage(){
	// Wait for data to be received
	if (!(UCSR0A & (1 << RXC0))) {
		return '\0';
 160:	80 e0       	ldi	r24, 0x00	; 0
	}
	// Get and return received data from buffer
	return UDR0;
}
 162:	08 95       	ret

00000164 <init_driving_PWM>:

#include "definitions.h"

void init_driving_PWM() {
	// Set OC0A (PD6) and OC0B (PD5) as output pins, motor speed pins
	DDRD |= (1 << DDD6) | (1 << DDD5);
 164:	8a b1       	in	r24, 0x0a	; 10
 166:	80 66       	ori	r24, 0x60	; 96
 168:	8a b9       	out	0x0a, r24	; 10
	// Configure Timer0 for Fast PWM mode, non-inverted output (WGM02:0 = 3)
	TCCR0A |= (1 << COM0A1) | (1 << COM0B1) | (1 << WGM01) | (1 << WGM00);
 16a:	84 b5       	in	r24, 0x24	; 36
 16c:	83 6a       	ori	r24, 0xA3	; 163
 16e:	84 bd       	out	0x24, r24	; 36
	//TCCR0B |= (1 << WGM02);

	// Set prescaler to 64
	TCCR0B |= (1 << CS01) | (1 << CS00);
 170:	85 b5       	in	r24, 0x25	; 37
 172:	83 60       	ori	r24, 0x03	; 3
 174:	85 bd       	out	0x25, r24	; 37
 176:	08 95       	ret

00000178 <setMotorASpeed>:
}

// Function to set speed of motor A
void setMotorASpeed(uint8_t speed) {
	if (speed == 0) {
 178:	81 11       	cpse	r24, r1
 17a:	02 c0       	rjmp	.+4      	; 0x180 <setMotorASpeed+0x8>
		OCR0B = 0; // Turn off PWM output
 17c:	18 bc       	out	0x28, r1	; 40
 17e:	08 95       	ret
		} else {
		OCR0B = speed; // Set PWM duty cycle
 180:	88 bd       	out	0x28, r24	; 40
 182:	08 95       	ret

00000184 <setMotorBSpeed>:
	}
}

// Function to set speed of motor B
void setMotorBSpeed(uint8_t speed) {
	if (speed == 0) {
 184:	81 11       	cpse	r24, r1
 186:	02 c0       	rjmp	.+4      	; 0x18c <setMotorBSpeed+0x8>
		OCR0A = 0; // Turn off PWM output
 188:	17 bc       	out	0x27, r1	; 39
 18a:	08 95       	ret
		} else {
		OCR0A = speed; // Set PWM duty cycle
 18c:	87 bd       	out	0x27, r24	; 39
 18e:	08 95       	ret

00000190 <setMotorADirection>:
	}
}

// Function to control direction of motor A
void setMotorADirection(uint8_t direction) {
	if (direction == 1) { // Forward
 190:	81 30       	cpi	r24, 0x01	; 1
 192:	21 f4       	brne	.+8      	; 0x19c <setMotorADirection+0xc>
		PORTB |= (1 << A_DIRECTION_PIN); // Set A_DIRECTION_PIN
 194:	85 b1       	in	r24, 0x05	; 5
 196:	84 60       	ori	r24, 0x04	; 4
 198:	85 b9       	out	0x05, r24	; 5
 19a:	08 95       	ret
		} else { // Reverse
		PORTB &= ~(1 << A_DIRECTION_PIN); // Clear A_DIRECTION_PIN
 19c:	85 b1       	in	r24, 0x05	; 5
 19e:	8b 7f       	andi	r24, 0xFB	; 251
 1a0:	85 b9       	out	0x05, r24	; 5
 1a2:	08 95       	ret

000001a4 <setMotorBDirection>:
	}
}

// Function to control direction of motor B
void setMotorBDirection(uint8_t direction) {
	if (direction == 1) { // Forward
 1a4:	81 30       	cpi	r24, 0x01	; 1
 1a6:	21 f4       	brne	.+8      	; 0x1b0 <setMotorBDirection+0xc>
		PORTB |= (1 << B_DIRECTION_PIN); // Set B_DIRECTION_PIN
 1a8:	85 b1       	in	r24, 0x05	; 5
 1aa:	88 60       	ori	r24, 0x08	; 8
 1ac:	85 b9       	out	0x05, r24	; 5
 1ae:	08 95       	ret
		} else { // Reverse
		PORTB &= ~(1 << B_DIRECTION_PIN); // Clear B_DIRECTION_PIN
 1b0:	85 b1       	in	r24, 0x05	; 5
 1b2:	87 7f       	andi	r24, 0xF7	; 247
 1b4:	85 b9       	out	0x05, r24	; 5
 1b6:	08 95       	ret

000001b8 <main>:
#include "usart.h"
#include "movement.h"
//#include "servo.h"

int main(void)
{
 1b8:	cf 93       	push	r28
 1ba:	df 93       	push	r29
 1bc:	cd b7       	in	r28, 0x3d	; 61
 1be:	de b7       	in	r29, 0x3e	; 62
 1c0:	c0 55       	subi	r28, 0x50	; 80
 1c2:	d1 09       	sbc	r29, r1
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	f8 94       	cli
 1c8:	de bf       	out	0x3e, r29	; 62
 1ca:	0f be       	out	0x3f, r0	; 63
 1cc:	cd bf       	out	0x3d, r28	; 61
    
	init_ADC();
 1ce:	0e 94 53 00 	call	0xa6	; 0xa6 <init_ADC>
	init_USART(MYUBRR);
 1d2:	87 e6       	ldi	r24, 0x67	; 103
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	0e 94 97 00 	call	0x12e	; 0x12e <init_USART>
 	init_driving_PWM();
 1da:	0e 94 b2 00 	call	0x164	; 0x164 <init_driving_PWM>
 	//init_servo_PWM();
	
	DDRB |= (1 << 2);
 1de:	84 b1       	in	r24, 0x04	; 4
 1e0:	84 60       	ori	r24, 0x04	; 4
 1e2:	84 b9       	out	0x04, r24	; 4
	
	
	int white_limit = (int)(WHITE + 30);
	int black_limit = (int)(BLACK - 30);
	//servo_set_angle(0,180);
	PORTB |= (1 << 2);
 1e4:	85 b1       	in	r24, 0x05	; 5
 1e6:	84 60       	ori	r24, 0x04	; 4
 1e8:	85 b9       	out	0x05, r24	; 5
	//int16_t i = 0;
	DDRB |= (1 << A_DIRECTION_PIN) | (1 << B_DIRECTION_PIN); //set direction pins as output
 1ea:	84 b1       	in	r24, 0x04	; 4
 1ec:	8c 60       	ori	r24, 0x0C	; 12
 1ee:	84 b9       	out	0x04, r24	; 4
	
	setMotorADirection(1);
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	0e 94 c8 00 	call	0x190	; 0x190 <setMotorADirection>
	setMotorBDirection(1);
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <setMotorBDirection>
	
	sei();
 1fc:	78 94       	sei
// 			_delay_ms(40);
// 		}
		
		//PORTB |= (1 << 2);
		
		int sensorLeft = readADC(SENSOR_LEFT_CHANNEL);
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	0e 94 61 00 	call	0xc2	; 0xc2 <readADC>
 204:	8c 01       	movw	r16, r24
		int lineTrackingSensorLeft = readADC(LINE_TRACKING_SENSOR_LEFT_CHANNEL) + 140;
 206:	85 e0       	ldi	r24, 0x05	; 5
 208:	0e 94 61 00 	call	0xc2	; 0xc2 <readADC>
 20c:	84 57       	subi	r24, 0x74	; 116
 20e:	9f 4f       	sbci	r25, 0xFF	; 255
 210:	5c 01       	movw	r10, r24
 212:	3c 01       	movw	r6, r24
		int lineTrackingSensorMiddle = readADC(LINE_TRACKING_SENSOR_MIDDLE_CHANNEL) + 110;
 214:	82 e0       	ldi	r24, 0x02	; 2
 216:	0e 94 61 00 	call	0xc2	; 0xc2 <readADC>
 21a:	82 59       	subi	r24, 0x92	; 146
 21c:	9f 4f       	sbci	r25, 0xFF	; 255
 21e:	4c 01       	movw	r8, r24
 220:	2c 01       	movw	r4, r24
		int lineTrackingSensorRight = readADC(LINE_TRACKING_SENSOR_RIGHT_CHANNEL);
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	0e 94 61 00 	call	0xc2	; 0xc2 <readADC>
 228:	6c 01       	movw	r12, r24
		int sensorRight = readADC(SENSOR_RIGHT_CHANNEL);
 22a:	83 e0       	ldi	r24, 0x03	; 3
 22c:	0e 94 61 00 	call	0xc2	; 0xc2 <readADC>
 230:	7c 01       	movw	r14, r24
		
		custom_delay_ms(50);
 232:	82 e3       	ldi	r24, 0x32	; 50
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	0e 94 76 00 	call	0xec	; 0xec <custom_delay_ms>
		
		// Convert distance to string
		char buffer[80];
		snprintf(buffer, sizeof(buffer), "%d %d %d %d %d \n", sensorLeft, lineTrackingSensorLeft, lineTrackingSensorMiddle, lineTrackingSensorRight, sensorRight);
 23a:	ff 92       	push	r15
 23c:	ef 92       	push	r14
 23e:	df 92       	push	r13
 240:	cf 92       	push	r12
 242:	9f 92       	push	r9
 244:	8f 92       	push	r8
 246:	bf 92       	push	r11
 248:	af 92       	push	r10
 24a:	1f 93       	push	r17
 24c:	0f 93       	push	r16
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	91 e0       	ldi	r25, 0x01	; 1
 252:	9f 93       	push	r25
 254:	8f 93       	push	r24
 256:	1f 92       	push	r1
 258:	80 e5       	ldi	r24, 0x50	; 80
 25a:	8f 93       	push	r24
 25c:	ce 01       	movw	r24, r28
 25e:	01 96       	adiw	r24, 0x01	; 1
 260:	9f 93       	push	r25
 262:	8f 93       	push	r24
 264:	0e 94 2b 02 	call	0x456	; 0x456 <snprintf>
		
		// Transmit distance over UART
		for (int i = 0; buffer[i] != '\0'; i++) {
 268:	0f b6       	in	r0, 0x3f	; 63
 26a:	f8 94       	cli
 26c:	de bf       	out	0x3e, r29	; 62
 26e:	0f be       	out	0x3f, r0	; 63
 270:	cd bf       	out	0x3d, r28	; 61
 272:	a1 2c       	mov	r10, r1
 274:	b1 2c       	mov	r11, r1
 276:	05 c0       	rjmp	.+10     	; 0x282 <main+0xca>
			transferMessage(buffer[i]);
 278:	0e 94 a2 00 	call	0x144	; 0x144 <transferMessage>
		// Convert distance to string
		char buffer[80];
		snprintf(buffer, sizeof(buffer), "%d %d %d %d %d \n", sensorLeft, lineTrackingSensorLeft, lineTrackingSensorMiddle, lineTrackingSensorRight, sensorRight);
		
		// Transmit distance over UART
		for (int i = 0; buffer[i] != '\0'; i++) {
 27c:	9f ef       	ldi	r25, 0xFF	; 255
 27e:	a9 1a       	sub	r10, r25
 280:	b9 0a       	sbc	r11, r25
 282:	e1 e0       	ldi	r30, 0x01	; 1
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	ec 0f       	add	r30, r28
 288:	fd 1f       	adc	r31, r29
 28a:	ea 0d       	add	r30, r10
 28c:	fb 1d       	adc	r31, r11
 28e:	80 81       	ld	r24, Z
 290:	81 11       	cpse	r24, r1
 292:	f2 cf       	rjmp	.-28     	; 0x278 <main+0xc0>
			transferMessage(buffer[i]);
		}
		custom_delay_ms(50);
 294:	82 e3       	ldi	r24, 0x32	; 50
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	0e 94 76 00 	call	0xec	; 0xec <custom_delay_ms>
		// Delay before next measurement
		
		char receivedMessage = receiveMessage();
 29c:	0e 94 a9 00 	call	0x152	; 0x152 <receiveMessage>
 2a0:	b8 2e       	mov	r11, r24
		
		custom_delay_ms(10);
 2a2:	8a e0       	ldi	r24, 0x0A	; 10
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	0e 94 76 00 	call	0xec	; 0xec <custom_delay_ms>
		if(receivedMessage == 'A'){
 2aa:	81 e4       	ldi	r24, 0x41	; 65
 2ac:	b8 12       	cpse	r11, r24
 2ae:	04 c0       	rjmp	.+8      	; 0x2b8 <main+0x100>
			PORTB |= (1 << 2);
 2b0:	85 b1       	in	r24, 0x05	; 5
 2b2:	84 60       	ori	r24, 0x04	; 4
 2b4:	85 b9       	out	0x05, r24	; 5
 2b6:	45 c0       	rjmp	.+138    	; 0x342 <main+0x18a>
			receivedMessage = '\n';
		}else if(receivedMessage == 'B'){
 2b8:	92 e4       	ldi	r25, 0x42	; 66
 2ba:	b9 12       	cpse	r11, r25
 2bc:	0b c0       	rjmp	.+22     	; 0x2d4 <main+0x11c>
			PORTB &= ~(1 << 2);
 2be:	85 b1       	in	r24, 0x05	; 5
 2c0:	8b 7f       	andi	r24, 0xFB	; 251
 2c2:	85 b9       	out	0x05, r24	; 5
			custom_delay_ms(5000);
 2c4:	88 e8       	ldi	r24, 0x88	; 136
 2c6:	93 e1       	ldi	r25, 0x13	; 19
 2c8:	0e 94 76 00 	call	0xec	; 0xec <custom_delay_ms>
			PORTB |= (1 << 2);
 2cc:	85 b1       	in	r24, 0x05	; 5
 2ce:	84 60       	ori	r24, 0x04	; 4
 2d0:	85 b9       	out	0x05, r24	; 5
 2d2:	37 c0       	rjmp	.+110    	; 0x342 <main+0x18a>
			receivedMessage = '\n';
		}else if(receivedMessage == 'C'){
 2d4:	83 e4       	ldi	r24, 0x43	; 67
 2d6:	b8 12       	cpse	r11, r24
 2d8:	04 c0       	rjmp	.+8      	; 0x2e2 <main+0x12a>
			PORTB &= ~(1 << 2);
 2da:	85 b1       	in	r24, 0x05	; 5
 2dc:	8b 7f       	andi	r24, 0xFB	; 251
 2de:	85 b9       	out	0x05, r24	; 5
 2e0:	30 c0       	rjmp	.+96     	; 0x342 <main+0x18a>
			receivedMessage = '\n';
		}else if(receivedMessage == '\0'){
 2e2:	b1 10       	cpse	r11, r1
 2e4:	1f c0       	rjmp	.+62     	; 0x324 <main+0x16c>
			transferMessage('I');
 2e6:	89 e4       	ldi	r24, 0x49	; 73
 2e8:	0e 94 a2 00 	call	0x144	; 0x144 <transferMessage>
			transferMessage(' ');
 2ec:	80 e2       	ldi	r24, 0x20	; 32
 2ee:	0e 94 a2 00 	call	0x144	; 0x144 <transferMessage>
			transferMessage('A');
 2f2:	81 e4       	ldi	r24, 0x41	; 65
 2f4:	0e 94 a2 00 	call	0x144	; 0x144 <transferMessage>
			transferMessage('M');
 2f8:	8d e4       	ldi	r24, 0x4D	; 77
 2fa:	0e 94 a2 00 	call	0x144	; 0x144 <transferMessage>
			transferMessage(' ');
 2fe:	80 e2       	ldi	r24, 0x20	; 32
 300:	0e 94 a2 00 	call	0x144	; 0x144 <transferMessage>
			transferMessage('R');
 304:	82 e5       	ldi	r24, 0x52	; 82
 306:	0e 94 a2 00 	call	0x144	; 0x144 <transferMessage>
			transferMessage('E');
 30a:	85 e4       	ldi	r24, 0x45	; 69
 30c:	0e 94 a2 00 	call	0x144	; 0x144 <transferMessage>
			transferMessage('A');
 310:	81 e4       	ldi	r24, 0x41	; 65
 312:	0e 94 a2 00 	call	0x144	; 0x144 <transferMessage>
			transferMessage('D');
 316:	84 e4       	ldi	r24, 0x44	; 68
 318:	0e 94 a2 00 	call	0x144	; 0x144 <transferMessage>
			transferMessage('Y');
 31c:	89 e5       	ldi	r24, 0x59	; 89
 31e:	0e 94 a2 00 	call	0x144	; 0x144 <transferMessage>
 322:	0f c0       	rjmp	.+30     	; 0x342 <main+0x18a>
		}else{
			transferMessage('E');
 324:	85 e4       	ldi	r24, 0x45	; 69
 326:	0e 94 a2 00 	call	0x144	; 0x144 <transferMessage>
			transferMessage('R');
 32a:	82 e5       	ldi	r24, 0x52	; 82
 32c:	0e 94 a2 00 	call	0x144	; 0x144 <transferMessage>
			transferMessage('R');
 330:	82 e5       	ldi	r24, 0x52	; 82
 332:	0e 94 a2 00 	call	0x144	; 0x144 <transferMessage>
			transferMessage('O');
 336:	8f e4       	ldi	r24, 0x4F	; 79
 338:	0e 94 a2 00 	call	0x144	; 0x144 <transferMessage>
			transferMessage('R');
 33c:	82 e5       	ldi	r24, 0x52	; 82
 33e:	0e 94 a2 00 	call	0x144	; 0x144 <transferMessage>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 342:	83 ec       	ldi	r24, 0xC3	; 195
 344:	99 e0       	ldi	r25, 0x09	; 9
 346:	01 97       	sbiw	r24, 0x01	; 1
 348:	f1 f7       	brne	.-4      	; 0x346 <main+0x18e>
 34a:	00 c0       	rjmp	.+0      	; 0x34c <main+0x194>
 34c:	00 00       	nop
		}

		_delay_ms(10);
		if(sensorLeft > white_limit && lineTrackingSensorLeft > white_limit && lineTrackingSensorMiddle > white_limit && lineTrackingSensorMiddle < black_limit && lineTrackingSensorRight < black_limit && sensorRight < black_limit){
 34e:	0b 3e       	cpi	r16, 0xEB	; 235
 350:	91 e0       	ldi	r25, 0x01	; 1
 352:	19 07       	cpc	r17, r25
 354:	04 f1       	brlt	.+64     	; 0x396 <main+0x1de>
 356:	8b ee       	ldi	r24, 0xEB	; 235
 358:	68 16       	cp	r6, r24
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	78 06       	cpc	r7, r24
 35e:	dc f0       	brlt	.+54     	; 0x396 <main+0x1de>
 360:	9b ee       	ldi	r25, 0xEB	; 235
 362:	49 16       	cp	r4, r25
 364:	91 e0       	ldi	r25, 0x01	; 1
 366:	59 06       	cpc	r5, r25
 368:	b4 f0       	brlt	.+44     	; 0x396 <main+0x1de>
 36a:	8a e3       	ldi	r24, 0x3A	; 58
 36c:	48 16       	cp	r4, r24
 36e:	82 e0       	ldi	r24, 0x02	; 2
 370:	58 06       	cpc	r5, r24
 372:	8c f4       	brge	.+34     	; 0x396 <main+0x1de>
 374:	9a e3       	ldi	r25, 0x3A	; 58
 376:	c9 16       	cp	r12, r25
 378:	92 e0       	ldi	r25, 0x02	; 2
 37a:	d9 06       	cpc	r13, r25
 37c:	64 f4       	brge	.+24     	; 0x396 <main+0x1de>
 37e:	8a e3       	ldi	r24, 0x3A	; 58
 380:	e8 16       	cp	r14, r24
 382:	82 e0       	ldi	r24, 0x02	; 2
 384:	f8 06       	cpc	r15, r24
 386:	3c f4       	brge	.+14     	; 0x396 <main+0x1de>
			setMotorASpeed(90); // RIGHT
 388:	8a e5       	ldi	r24, 0x5A	; 90
 38a:	0e 94 bc 00 	call	0x178	; 0x178 <setMotorASpeed>
			setMotorBSpeed(90); // LEFT
 38e:	8a e5       	ldi	r24, 0x5A	; 90
 390:	0e 94 c2 00 	call	0x184	; 0x184 <setMotorBSpeed>
 394:	59 c0       	rjmp	.+178    	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
		}else{
			if(sensorLeft < white_limit){
 396:	0a 3e       	cpi	r16, 0xEA	; 234
 398:	91 e0       	ldi	r25, 0x01	; 1
 39a:	19 07       	cpc	r17, r25
 39c:	94 f4       	brge	.+36     	; 0x3c2 <main+0x20a>
				if(lineTrackingSensorLeft < white_limit){
 39e:	8a ee       	ldi	r24, 0xEA	; 234
 3a0:	68 16       	cp	r6, r24
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	78 06       	cpc	r7, r24
 3a6:	3c f4       	brge	.+14     	; 0x3b6 <main+0x1fe>
					setMotorASpeed(45); // RIGHT
 3a8:	8d e2       	ldi	r24, 0x2D	; 45
 3aa:	0e 94 bc 00 	call	0x178	; 0x178 <setMotorASpeed>
					setMotorBSpeed(90); // LEFT
 3ae:	8a e5       	ldi	r24, 0x5A	; 90
 3b0:	0e 94 c2 00 	call	0x184	; 0x184 <setMotorBSpeed>
 3b4:	06 c0       	rjmp	.+12     	; 0x3c2 <main+0x20a>
				}else{
					setMotorASpeed(75); // RIGHT
 3b6:	8b e4       	ldi	r24, 0x4B	; 75
 3b8:	0e 94 bc 00 	call	0x178	; 0x178 <setMotorASpeed>
					setMotorBSpeed(90); // LEFT
 3bc:	8a e5       	ldi	r24, 0x5A	; 90
 3be:	0e 94 c2 00 	call	0x184	; 0x184 <setMotorBSpeed>
				}
			}
			if(sensorRight > black_limit){
 3c2:	9b e3       	ldi	r25, 0x3B	; 59
 3c4:	e9 16       	cp	r14, r25
 3c6:	92 e0       	ldi	r25, 0x02	; 2
 3c8:	f9 06       	cpc	r15, r25
 3ca:	94 f0       	brlt	.+36     	; 0x3f0 <main+0x238>
				if(lineTrackingSensorRight > black_limit){
 3cc:	8b e3       	ldi	r24, 0x3B	; 59
 3ce:	c8 16       	cp	r12, r24
 3d0:	82 e0       	ldi	r24, 0x02	; 2
 3d2:	d8 06       	cpc	r13, r24
 3d4:	3c f0       	brlt	.+14     	; 0x3e4 <main+0x22c>
					setMotorASpeed(90); // RIGHT
 3d6:	8a e5       	ldi	r24, 0x5A	; 90
 3d8:	0e 94 bc 00 	call	0x178	; 0x178 <setMotorASpeed>
					setMotorBSpeed(45); // LEFT
 3dc:	8d e2       	ldi	r24, 0x2D	; 45
 3de:	0e 94 c2 00 	call	0x184	; 0x184 <setMotorBSpeed>
 3e2:	06 c0       	rjmp	.+12     	; 0x3f0 <main+0x238>
				}else{
					setMotorASpeed(90); // RIGHT
 3e4:	8a e5       	ldi	r24, 0x5A	; 90
 3e6:	0e 94 bc 00 	call	0x178	; 0x178 <setMotorASpeed>
					setMotorBSpeed(45); // LEFT
 3ea:	8d e2       	ldi	r24, 0x2D	; 45
 3ec:	0e 94 c2 00 	call	0x184	; 0x184 <setMotorBSpeed>
				}
			}
			if(sensorRight < white_limit){
 3f0:	9a ee       	ldi	r25, 0xEA	; 234
 3f2:	e9 16       	cp	r14, r25
 3f4:	91 e0       	ldi	r25, 0x01	; 1
 3f6:	f9 06       	cpc	r15, r25
 3f8:	94 f4       	brge	.+36     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
				if(lineTrackingSensorRight > black_limit){
 3fa:	8b e3       	ldi	r24, 0x3B	; 59
 3fc:	c8 16       	cp	r12, r24
 3fe:	82 e0       	ldi	r24, 0x02	; 2
 400:	d8 06       	cpc	r13, r24
 402:	3c f0       	brlt	.+14     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
					setMotorASpeed(90); // RIGHT
 404:	8a e5       	ldi	r24, 0x5A	; 90
 406:	0e 94 bc 00 	call	0x178	; 0x178 <setMotorASpeed>
					setMotorBSpeed(45); // LEFT
 40a:	8d e2       	ldi	r24, 0x2D	; 45
 40c:	0e 94 c2 00 	call	0x184	; 0x184 <setMotorBSpeed>
 410:	06 c0       	rjmp	.+12     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
					}else{
						setMotorASpeed(90); // RIGHT
 412:	8a e5       	ldi	r24, 0x5A	; 90
 414:	0e 94 bc 00 	call	0x178	; 0x178 <setMotorASpeed>
						setMotorBSpeed(45); // LEFT
 418:	8d e2       	ldi	r24, 0x2D	; 45
 41a:	0e 94 c2 00 	call	0x184	; 0x184 <setMotorBSpeed>
					}
			}
			if(sensorLeft > black_limit){
 41e:	0b 33       	cpi	r16, 0x3B	; 59
 420:	12 40       	sbci	r17, 0x02	; 2
 422:	94 f0       	brlt	.+36     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
				if(lineTrackingSensorRight > black_limit){
 424:	8b e3       	ldi	r24, 0x3B	; 59
 426:	c8 16       	cp	r12, r24
 428:	82 e0       	ldi	r24, 0x02	; 2
 42a:	d8 06       	cpc	r13, r24
 42c:	3c f0       	brlt	.+14     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
					setMotorASpeed(45); // RIGHT
 42e:	8d e2       	ldi	r24, 0x2D	; 45
 430:	0e 94 bc 00 	call	0x178	; 0x178 <setMotorASpeed>
					setMotorBSpeed(90); // LEFT
 434:	8a e5       	ldi	r24, 0x5A	; 90
 436:	0e 94 c2 00 	call	0x184	; 0x184 <setMotorBSpeed>
 43a:	06 c0       	rjmp	.+12     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
					}else{
					setMotorASpeed(75); // RIGHT
 43c:	8b e4       	ldi	r24, 0x4B	; 75
 43e:	0e 94 bc 00 	call	0x178	; 0x178 <setMotorASpeed>
					setMotorBSpeed(90); // LEFT
 442:	8a e5       	ldi	r24, 0x5A	; 90
 444:	0e 94 c2 00 	call	0x184	; 0x184 <setMotorBSpeed>
 448:	87 ea       	ldi	r24, 0xA7	; 167
 44a:	91 e6       	ldi	r25, 0x61	; 97
 44c:	01 97       	sbiw	r24, 0x01	; 1
 44e:	f1 f7       	brne	.-4      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 450:	00 c0       	rjmp	.+0      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 452:	00 00       	nop
// 		setMotorBSpeed(90);
// 		_delay_ms(2000);
// 		setMotorASpeed(0);
// 		setMotorBSpeed(0);
// 		_delay_ms(2000);
    }
 454:	d4 ce       	rjmp	.-600    	; 0x1fe <main+0x46>

00000456 <snprintf>:
 456:	ae e0       	ldi	r26, 0x0E	; 14
 458:	b0 e0       	ldi	r27, 0x00	; 0
 45a:	e1 e3       	ldi	r30, 0x31	; 49
 45c:	f2 e0       	ldi	r31, 0x02	; 2
 45e:	0c 94 fa 04 	jmp	0x9f4	; 0x9f4 <__prologue_saves__+0x1c>
 462:	0d 89       	ldd	r16, Y+21	; 0x15
 464:	1e 89       	ldd	r17, Y+22	; 0x16
 466:	8f 89       	ldd	r24, Y+23	; 0x17
 468:	98 8d       	ldd	r25, Y+24	; 0x18
 46a:	26 e0       	ldi	r18, 0x06	; 6
 46c:	2c 83       	std	Y+4, r18	; 0x04
 46e:	1a 83       	std	Y+2, r17	; 0x02
 470:	09 83       	std	Y+1, r16	; 0x01
 472:	97 ff       	sbrs	r25, 7
 474:	02 c0       	rjmp	.+4      	; 0x47a <snprintf+0x24>
 476:	80 e0       	ldi	r24, 0x00	; 0
 478:	90 e8       	ldi	r25, 0x80	; 128
 47a:	01 97       	sbiw	r24, 0x01	; 1
 47c:	9e 83       	std	Y+6, r25	; 0x06
 47e:	8d 83       	std	Y+5, r24	; 0x05
 480:	ae 01       	movw	r20, r28
 482:	45 5e       	subi	r20, 0xE5	; 229
 484:	5f 4f       	sbci	r21, 0xFF	; 255
 486:	69 8d       	ldd	r22, Y+25	; 0x19
 488:	7a 8d       	ldd	r23, Y+26	; 0x1a
 48a:	ce 01       	movw	r24, r28
 48c:	01 96       	adiw	r24, 0x01	; 1
 48e:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <vfprintf>
 492:	4d 81       	ldd	r20, Y+5	; 0x05
 494:	5e 81       	ldd	r21, Y+6	; 0x06
 496:	57 fd       	sbrc	r21, 7
 498:	0a c0       	rjmp	.+20     	; 0x4ae <snprintf+0x58>
 49a:	2f 81       	ldd	r18, Y+7	; 0x07
 49c:	38 85       	ldd	r19, Y+8	; 0x08
 49e:	42 17       	cp	r20, r18
 4a0:	53 07       	cpc	r21, r19
 4a2:	0c f4       	brge	.+2      	; 0x4a6 <snprintf+0x50>
 4a4:	9a 01       	movw	r18, r20
 4a6:	f8 01       	movw	r30, r16
 4a8:	e2 0f       	add	r30, r18
 4aa:	f3 1f       	adc	r31, r19
 4ac:	10 82       	st	Z, r1
 4ae:	2e 96       	adiw	r28, 0x0e	; 14
 4b0:	e4 e0       	ldi	r30, 0x04	; 4
 4b2:	0c 94 16 05 	jmp	0xa2c	; 0xa2c <__epilogue_restores__+0x1c>

000004b6 <vfprintf>:
 4b6:	ab e0       	ldi	r26, 0x0B	; 11
 4b8:	b0 e0       	ldi	r27, 0x00	; 0
 4ba:	e1 e6       	ldi	r30, 0x61	; 97
 4bc:	f2 e0       	ldi	r31, 0x02	; 2
 4be:	0c 94 ec 04 	jmp	0x9d8	; 0x9d8 <__prologue_saves__>
 4c2:	6c 01       	movw	r12, r24
 4c4:	7b 01       	movw	r14, r22
 4c6:	8a 01       	movw	r16, r20
 4c8:	fc 01       	movw	r30, r24
 4ca:	17 82       	std	Z+7, r1	; 0x07
 4cc:	16 82       	std	Z+6, r1	; 0x06
 4ce:	83 81       	ldd	r24, Z+3	; 0x03
 4d0:	81 ff       	sbrs	r24, 1
 4d2:	cc c1       	rjmp	.+920    	; 0x86c <__DATA_REGION_LENGTH__+0x6c>
 4d4:	ce 01       	movw	r24, r28
 4d6:	01 96       	adiw	r24, 0x01	; 1
 4d8:	3c 01       	movw	r6, r24
 4da:	f6 01       	movw	r30, r12
 4dc:	93 81       	ldd	r25, Z+3	; 0x03
 4de:	f7 01       	movw	r30, r14
 4e0:	93 fd       	sbrc	r25, 3
 4e2:	85 91       	lpm	r24, Z+
 4e4:	93 ff       	sbrs	r25, 3
 4e6:	81 91       	ld	r24, Z+
 4e8:	7f 01       	movw	r14, r30
 4ea:	88 23       	and	r24, r24
 4ec:	09 f4       	brne	.+2      	; 0x4f0 <vfprintf+0x3a>
 4ee:	ba c1       	rjmp	.+884    	; 0x864 <__DATA_REGION_LENGTH__+0x64>
 4f0:	85 32       	cpi	r24, 0x25	; 37
 4f2:	39 f4       	brne	.+14     	; 0x502 <vfprintf+0x4c>
 4f4:	93 fd       	sbrc	r25, 3
 4f6:	85 91       	lpm	r24, Z+
 4f8:	93 ff       	sbrs	r25, 3
 4fa:	81 91       	ld	r24, Z+
 4fc:	7f 01       	movw	r14, r30
 4fe:	85 32       	cpi	r24, 0x25	; 37
 500:	29 f4       	brne	.+10     	; 0x50c <vfprintf+0x56>
 502:	b6 01       	movw	r22, r12
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	0e 94 52 04 	call	0x8a4	; 0x8a4 <fputc>
 50a:	e7 cf       	rjmp	.-50     	; 0x4da <vfprintf+0x24>
 50c:	91 2c       	mov	r9, r1
 50e:	21 2c       	mov	r2, r1
 510:	31 2c       	mov	r3, r1
 512:	ff e1       	ldi	r31, 0x1F	; 31
 514:	f3 15       	cp	r31, r3
 516:	d8 f0       	brcs	.+54     	; 0x54e <vfprintf+0x98>
 518:	8b 32       	cpi	r24, 0x2B	; 43
 51a:	79 f0       	breq	.+30     	; 0x53a <vfprintf+0x84>
 51c:	38 f4       	brcc	.+14     	; 0x52c <vfprintf+0x76>
 51e:	80 32       	cpi	r24, 0x20	; 32
 520:	79 f0       	breq	.+30     	; 0x540 <vfprintf+0x8a>
 522:	83 32       	cpi	r24, 0x23	; 35
 524:	a1 f4       	brne	.+40     	; 0x54e <vfprintf+0x98>
 526:	23 2d       	mov	r18, r3
 528:	20 61       	ori	r18, 0x10	; 16
 52a:	1d c0       	rjmp	.+58     	; 0x566 <vfprintf+0xb0>
 52c:	8d 32       	cpi	r24, 0x2D	; 45
 52e:	61 f0       	breq	.+24     	; 0x548 <vfprintf+0x92>
 530:	80 33       	cpi	r24, 0x30	; 48
 532:	69 f4       	brne	.+26     	; 0x54e <vfprintf+0x98>
 534:	23 2d       	mov	r18, r3
 536:	21 60       	ori	r18, 0x01	; 1
 538:	16 c0       	rjmp	.+44     	; 0x566 <vfprintf+0xb0>
 53a:	83 2d       	mov	r24, r3
 53c:	82 60       	ori	r24, 0x02	; 2
 53e:	38 2e       	mov	r3, r24
 540:	e3 2d       	mov	r30, r3
 542:	e4 60       	ori	r30, 0x04	; 4
 544:	3e 2e       	mov	r3, r30
 546:	2a c0       	rjmp	.+84     	; 0x59c <vfprintf+0xe6>
 548:	f3 2d       	mov	r31, r3
 54a:	f8 60       	ori	r31, 0x08	; 8
 54c:	1d c0       	rjmp	.+58     	; 0x588 <vfprintf+0xd2>
 54e:	37 fc       	sbrc	r3, 7
 550:	2d c0       	rjmp	.+90     	; 0x5ac <vfprintf+0xf6>
 552:	20 ed       	ldi	r18, 0xD0	; 208
 554:	28 0f       	add	r18, r24
 556:	2a 30       	cpi	r18, 0x0A	; 10
 558:	40 f0       	brcs	.+16     	; 0x56a <vfprintf+0xb4>
 55a:	8e 32       	cpi	r24, 0x2E	; 46
 55c:	b9 f4       	brne	.+46     	; 0x58c <vfprintf+0xd6>
 55e:	36 fc       	sbrc	r3, 6
 560:	81 c1       	rjmp	.+770    	; 0x864 <__DATA_REGION_LENGTH__+0x64>
 562:	23 2d       	mov	r18, r3
 564:	20 64       	ori	r18, 0x40	; 64
 566:	32 2e       	mov	r3, r18
 568:	19 c0       	rjmp	.+50     	; 0x59c <vfprintf+0xe6>
 56a:	36 fe       	sbrs	r3, 6
 56c:	06 c0       	rjmp	.+12     	; 0x57a <vfprintf+0xc4>
 56e:	8a e0       	ldi	r24, 0x0A	; 10
 570:	98 9e       	mul	r9, r24
 572:	20 0d       	add	r18, r0
 574:	11 24       	eor	r1, r1
 576:	92 2e       	mov	r9, r18
 578:	11 c0       	rjmp	.+34     	; 0x59c <vfprintf+0xe6>
 57a:	ea e0       	ldi	r30, 0x0A	; 10
 57c:	2e 9e       	mul	r2, r30
 57e:	20 0d       	add	r18, r0
 580:	11 24       	eor	r1, r1
 582:	22 2e       	mov	r2, r18
 584:	f3 2d       	mov	r31, r3
 586:	f0 62       	ori	r31, 0x20	; 32
 588:	3f 2e       	mov	r3, r31
 58a:	08 c0       	rjmp	.+16     	; 0x59c <vfprintf+0xe6>
 58c:	8c 36       	cpi	r24, 0x6C	; 108
 58e:	21 f4       	brne	.+8      	; 0x598 <vfprintf+0xe2>
 590:	83 2d       	mov	r24, r3
 592:	80 68       	ori	r24, 0x80	; 128
 594:	38 2e       	mov	r3, r24
 596:	02 c0       	rjmp	.+4      	; 0x59c <vfprintf+0xe6>
 598:	88 36       	cpi	r24, 0x68	; 104
 59a:	41 f4       	brne	.+16     	; 0x5ac <vfprintf+0xf6>
 59c:	f7 01       	movw	r30, r14
 59e:	93 fd       	sbrc	r25, 3
 5a0:	85 91       	lpm	r24, Z+
 5a2:	93 ff       	sbrs	r25, 3
 5a4:	81 91       	ld	r24, Z+
 5a6:	7f 01       	movw	r14, r30
 5a8:	81 11       	cpse	r24, r1
 5aa:	b3 cf       	rjmp	.-154    	; 0x512 <vfprintf+0x5c>
 5ac:	98 2f       	mov	r25, r24
 5ae:	9f 7d       	andi	r25, 0xDF	; 223
 5b0:	95 54       	subi	r25, 0x45	; 69
 5b2:	93 30       	cpi	r25, 0x03	; 3
 5b4:	28 f4       	brcc	.+10     	; 0x5c0 <vfprintf+0x10a>
 5b6:	0c 5f       	subi	r16, 0xFC	; 252
 5b8:	1f 4f       	sbci	r17, 0xFF	; 255
 5ba:	9f e3       	ldi	r25, 0x3F	; 63
 5bc:	99 83       	std	Y+1, r25	; 0x01
 5be:	0d c0       	rjmp	.+26     	; 0x5da <vfprintf+0x124>
 5c0:	83 36       	cpi	r24, 0x63	; 99
 5c2:	31 f0       	breq	.+12     	; 0x5d0 <vfprintf+0x11a>
 5c4:	83 37       	cpi	r24, 0x73	; 115
 5c6:	71 f0       	breq	.+28     	; 0x5e4 <vfprintf+0x12e>
 5c8:	83 35       	cpi	r24, 0x53	; 83
 5ca:	09 f0       	breq	.+2      	; 0x5ce <vfprintf+0x118>
 5cc:	59 c0       	rjmp	.+178    	; 0x680 <vfprintf+0x1ca>
 5ce:	21 c0       	rjmp	.+66     	; 0x612 <vfprintf+0x15c>
 5d0:	f8 01       	movw	r30, r16
 5d2:	80 81       	ld	r24, Z
 5d4:	89 83       	std	Y+1, r24	; 0x01
 5d6:	0e 5f       	subi	r16, 0xFE	; 254
 5d8:	1f 4f       	sbci	r17, 0xFF	; 255
 5da:	88 24       	eor	r8, r8
 5dc:	83 94       	inc	r8
 5de:	91 2c       	mov	r9, r1
 5e0:	53 01       	movw	r10, r6
 5e2:	13 c0       	rjmp	.+38     	; 0x60a <vfprintf+0x154>
 5e4:	28 01       	movw	r4, r16
 5e6:	f2 e0       	ldi	r31, 0x02	; 2
 5e8:	4f 0e       	add	r4, r31
 5ea:	51 1c       	adc	r5, r1
 5ec:	f8 01       	movw	r30, r16
 5ee:	a0 80       	ld	r10, Z
 5f0:	b1 80       	ldd	r11, Z+1	; 0x01
 5f2:	36 fe       	sbrs	r3, 6
 5f4:	03 c0       	rjmp	.+6      	; 0x5fc <vfprintf+0x146>
 5f6:	69 2d       	mov	r22, r9
 5f8:	70 e0       	ldi	r23, 0x00	; 0
 5fa:	02 c0       	rjmp	.+4      	; 0x600 <vfprintf+0x14a>
 5fc:	6f ef       	ldi	r22, 0xFF	; 255
 5fe:	7f ef       	ldi	r23, 0xFF	; 255
 600:	c5 01       	movw	r24, r10
 602:	0e 94 47 04 	call	0x88e	; 0x88e <strnlen>
 606:	4c 01       	movw	r8, r24
 608:	82 01       	movw	r16, r4
 60a:	f3 2d       	mov	r31, r3
 60c:	ff 77       	andi	r31, 0x7F	; 127
 60e:	3f 2e       	mov	r3, r31
 610:	16 c0       	rjmp	.+44     	; 0x63e <vfprintf+0x188>
 612:	28 01       	movw	r4, r16
 614:	22 e0       	ldi	r18, 0x02	; 2
 616:	42 0e       	add	r4, r18
 618:	51 1c       	adc	r5, r1
 61a:	f8 01       	movw	r30, r16
 61c:	a0 80       	ld	r10, Z
 61e:	b1 80       	ldd	r11, Z+1	; 0x01
 620:	36 fe       	sbrs	r3, 6
 622:	03 c0       	rjmp	.+6      	; 0x62a <vfprintf+0x174>
 624:	69 2d       	mov	r22, r9
 626:	70 e0       	ldi	r23, 0x00	; 0
 628:	02 c0       	rjmp	.+4      	; 0x62e <vfprintf+0x178>
 62a:	6f ef       	ldi	r22, 0xFF	; 255
 62c:	7f ef       	ldi	r23, 0xFF	; 255
 62e:	c5 01       	movw	r24, r10
 630:	0e 94 3c 04 	call	0x878	; 0x878 <strnlen_P>
 634:	4c 01       	movw	r8, r24
 636:	f3 2d       	mov	r31, r3
 638:	f0 68       	ori	r31, 0x80	; 128
 63a:	3f 2e       	mov	r3, r31
 63c:	82 01       	movw	r16, r4
 63e:	33 fc       	sbrc	r3, 3
 640:	1b c0       	rjmp	.+54     	; 0x678 <vfprintf+0x1c2>
 642:	82 2d       	mov	r24, r2
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	88 16       	cp	r8, r24
 648:	99 06       	cpc	r9, r25
 64a:	b0 f4       	brcc	.+44     	; 0x678 <vfprintf+0x1c2>
 64c:	b6 01       	movw	r22, r12
 64e:	80 e2       	ldi	r24, 0x20	; 32
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	0e 94 52 04 	call	0x8a4	; 0x8a4 <fputc>
 656:	2a 94       	dec	r2
 658:	f4 cf       	rjmp	.-24     	; 0x642 <vfprintf+0x18c>
 65a:	f5 01       	movw	r30, r10
 65c:	37 fc       	sbrc	r3, 7
 65e:	85 91       	lpm	r24, Z+
 660:	37 fe       	sbrs	r3, 7
 662:	81 91       	ld	r24, Z+
 664:	5f 01       	movw	r10, r30
 666:	b6 01       	movw	r22, r12
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	0e 94 52 04 	call	0x8a4	; 0x8a4 <fputc>
 66e:	21 10       	cpse	r2, r1
 670:	2a 94       	dec	r2
 672:	21 e0       	ldi	r18, 0x01	; 1
 674:	82 1a       	sub	r8, r18
 676:	91 08       	sbc	r9, r1
 678:	81 14       	cp	r8, r1
 67a:	91 04       	cpc	r9, r1
 67c:	71 f7       	brne	.-36     	; 0x65a <vfprintf+0x1a4>
 67e:	e8 c0       	rjmp	.+464    	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 680:	84 36       	cpi	r24, 0x64	; 100
 682:	11 f0       	breq	.+4      	; 0x688 <vfprintf+0x1d2>
 684:	89 36       	cpi	r24, 0x69	; 105
 686:	41 f5       	brne	.+80     	; 0x6d8 <vfprintf+0x222>
 688:	f8 01       	movw	r30, r16
 68a:	37 fe       	sbrs	r3, 7
 68c:	07 c0       	rjmp	.+14     	; 0x69c <vfprintf+0x1e6>
 68e:	60 81       	ld	r22, Z
 690:	71 81       	ldd	r23, Z+1	; 0x01
 692:	82 81       	ldd	r24, Z+2	; 0x02
 694:	93 81       	ldd	r25, Z+3	; 0x03
 696:	0c 5f       	subi	r16, 0xFC	; 252
 698:	1f 4f       	sbci	r17, 0xFF	; 255
 69a:	08 c0       	rjmp	.+16     	; 0x6ac <vfprintf+0x1f6>
 69c:	60 81       	ld	r22, Z
 69e:	71 81       	ldd	r23, Z+1	; 0x01
 6a0:	07 2e       	mov	r0, r23
 6a2:	00 0c       	add	r0, r0
 6a4:	88 0b       	sbc	r24, r24
 6a6:	99 0b       	sbc	r25, r25
 6a8:	0e 5f       	subi	r16, 0xFE	; 254
 6aa:	1f 4f       	sbci	r17, 0xFF	; 255
 6ac:	f3 2d       	mov	r31, r3
 6ae:	ff 76       	andi	r31, 0x6F	; 111
 6b0:	3f 2e       	mov	r3, r31
 6b2:	97 ff       	sbrs	r25, 7
 6b4:	09 c0       	rjmp	.+18     	; 0x6c8 <vfprintf+0x212>
 6b6:	90 95       	com	r25
 6b8:	80 95       	com	r24
 6ba:	70 95       	com	r23
 6bc:	61 95       	neg	r22
 6be:	7f 4f       	sbci	r23, 0xFF	; 255
 6c0:	8f 4f       	sbci	r24, 0xFF	; 255
 6c2:	9f 4f       	sbci	r25, 0xFF	; 255
 6c4:	f0 68       	ori	r31, 0x80	; 128
 6c6:	3f 2e       	mov	r3, r31
 6c8:	2a e0       	ldi	r18, 0x0A	; 10
 6ca:	30 e0       	ldi	r19, 0x00	; 0
 6cc:	a3 01       	movw	r20, r6
 6ce:	0e 94 8e 04 	call	0x91c	; 0x91c <__ultoa_invert>
 6d2:	88 2e       	mov	r8, r24
 6d4:	86 18       	sub	r8, r6
 6d6:	45 c0       	rjmp	.+138    	; 0x762 <vfprintf+0x2ac>
 6d8:	85 37       	cpi	r24, 0x75	; 117
 6da:	31 f4       	brne	.+12     	; 0x6e8 <vfprintf+0x232>
 6dc:	23 2d       	mov	r18, r3
 6de:	2f 7e       	andi	r18, 0xEF	; 239
 6e0:	b2 2e       	mov	r11, r18
 6e2:	2a e0       	ldi	r18, 0x0A	; 10
 6e4:	30 e0       	ldi	r19, 0x00	; 0
 6e6:	25 c0       	rjmp	.+74     	; 0x732 <vfprintf+0x27c>
 6e8:	93 2d       	mov	r25, r3
 6ea:	99 7f       	andi	r25, 0xF9	; 249
 6ec:	b9 2e       	mov	r11, r25
 6ee:	8f 36       	cpi	r24, 0x6F	; 111
 6f0:	c1 f0       	breq	.+48     	; 0x722 <vfprintf+0x26c>
 6f2:	18 f4       	brcc	.+6      	; 0x6fa <vfprintf+0x244>
 6f4:	88 35       	cpi	r24, 0x58	; 88
 6f6:	79 f0       	breq	.+30     	; 0x716 <vfprintf+0x260>
 6f8:	b5 c0       	rjmp	.+362    	; 0x864 <__DATA_REGION_LENGTH__+0x64>
 6fa:	80 37       	cpi	r24, 0x70	; 112
 6fc:	19 f0       	breq	.+6      	; 0x704 <vfprintf+0x24e>
 6fe:	88 37       	cpi	r24, 0x78	; 120
 700:	21 f0       	breq	.+8      	; 0x70a <vfprintf+0x254>
 702:	b0 c0       	rjmp	.+352    	; 0x864 <__DATA_REGION_LENGTH__+0x64>
 704:	e9 2f       	mov	r30, r25
 706:	e0 61       	ori	r30, 0x10	; 16
 708:	be 2e       	mov	r11, r30
 70a:	b4 fe       	sbrs	r11, 4
 70c:	0d c0       	rjmp	.+26     	; 0x728 <vfprintf+0x272>
 70e:	fb 2d       	mov	r31, r11
 710:	f4 60       	ori	r31, 0x04	; 4
 712:	bf 2e       	mov	r11, r31
 714:	09 c0       	rjmp	.+18     	; 0x728 <vfprintf+0x272>
 716:	34 fe       	sbrs	r3, 4
 718:	0a c0       	rjmp	.+20     	; 0x72e <vfprintf+0x278>
 71a:	29 2f       	mov	r18, r25
 71c:	26 60       	ori	r18, 0x06	; 6
 71e:	b2 2e       	mov	r11, r18
 720:	06 c0       	rjmp	.+12     	; 0x72e <vfprintf+0x278>
 722:	28 e0       	ldi	r18, 0x08	; 8
 724:	30 e0       	ldi	r19, 0x00	; 0
 726:	05 c0       	rjmp	.+10     	; 0x732 <vfprintf+0x27c>
 728:	20 e1       	ldi	r18, 0x10	; 16
 72a:	30 e0       	ldi	r19, 0x00	; 0
 72c:	02 c0       	rjmp	.+4      	; 0x732 <vfprintf+0x27c>
 72e:	20 e1       	ldi	r18, 0x10	; 16
 730:	32 e0       	ldi	r19, 0x02	; 2
 732:	f8 01       	movw	r30, r16
 734:	b7 fe       	sbrs	r11, 7
 736:	07 c0       	rjmp	.+14     	; 0x746 <vfprintf+0x290>
 738:	60 81       	ld	r22, Z
 73a:	71 81       	ldd	r23, Z+1	; 0x01
 73c:	82 81       	ldd	r24, Z+2	; 0x02
 73e:	93 81       	ldd	r25, Z+3	; 0x03
 740:	0c 5f       	subi	r16, 0xFC	; 252
 742:	1f 4f       	sbci	r17, 0xFF	; 255
 744:	06 c0       	rjmp	.+12     	; 0x752 <vfprintf+0x29c>
 746:	60 81       	ld	r22, Z
 748:	71 81       	ldd	r23, Z+1	; 0x01
 74a:	80 e0       	ldi	r24, 0x00	; 0
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	0e 5f       	subi	r16, 0xFE	; 254
 750:	1f 4f       	sbci	r17, 0xFF	; 255
 752:	a3 01       	movw	r20, r6
 754:	0e 94 8e 04 	call	0x91c	; 0x91c <__ultoa_invert>
 758:	88 2e       	mov	r8, r24
 75a:	86 18       	sub	r8, r6
 75c:	fb 2d       	mov	r31, r11
 75e:	ff 77       	andi	r31, 0x7F	; 127
 760:	3f 2e       	mov	r3, r31
 762:	36 fe       	sbrs	r3, 6
 764:	0d c0       	rjmp	.+26     	; 0x780 <vfprintf+0x2ca>
 766:	23 2d       	mov	r18, r3
 768:	2e 7f       	andi	r18, 0xFE	; 254
 76a:	a2 2e       	mov	r10, r18
 76c:	89 14       	cp	r8, r9
 76e:	58 f4       	brcc	.+22     	; 0x786 <vfprintf+0x2d0>
 770:	34 fe       	sbrs	r3, 4
 772:	0b c0       	rjmp	.+22     	; 0x78a <vfprintf+0x2d4>
 774:	32 fc       	sbrc	r3, 2
 776:	09 c0       	rjmp	.+18     	; 0x78a <vfprintf+0x2d4>
 778:	83 2d       	mov	r24, r3
 77a:	8e 7e       	andi	r24, 0xEE	; 238
 77c:	a8 2e       	mov	r10, r24
 77e:	05 c0       	rjmp	.+10     	; 0x78a <vfprintf+0x2d4>
 780:	b8 2c       	mov	r11, r8
 782:	a3 2c       	mov	r10, r3
 784:	03 c0       	rjmp	.+6      	; 0x78c <vfprintf+0x2d6>
 786:	b8 2c       	mov	r11, r8
 788:	01 c0       	rjmp	.+2      	; 0x78c <vfprintf+0x2d6>
 78a:	b9 2c       	mov	r11, r9
 78c:	a4 fe       	sbrs	r10, 4
 78e:	0f c0       	rjmp	.+30     	; 0x7ae <vfprintf+0x2f8>
 790:	fe 01       	movw	r30, r28
 792:	e8 0d       	add	r30, r8
 794:	f1 1d       	adc	r31, r1
 796:	80 81       	ld	r24, Z
 798:	80 33       	cpi	r24, 0x30	; 48
 79a:	21 f4       	brne	.+8      	; 0x7a4 <vfprintf+0x2ee>
 79c:	9a 2d       	mov	r25, r10
 79e:	99 7e       	andi	r25, 0xE9	; 233
 7a0:	a9 2e       	mov	r10, r25
 7a2:	09 c0       	rjmp	.+18     	; 0x7b6 <vfprintf+0x300>
 7a4:	a2 fe       	sbrs	r10, 2
 7a6:	06 c0       	rjmp	.+12     	; 0x7b4 <vfprintf+0x2fe>
 7a8:	b3 94       	inc	r11
 7aa:	b3 94       	inc	r11
 7ac:	04 c0       	rjmp	.+8      	; 0x7b6 <vfprintf+0x300>
 7ae:	8a 2d       	mov	r24, r10
 7b0:	86 78       	andi	r24, 0x86	; 134
 7b2:	09 f0       	breq	.+2      	; 0x7b6 <vfprintf+0x300>
 7b4:	b3 94       	inc	r11
 7b6:	a3 fc       	sbrc	r10, 3
 7b8:	11 c0       	rjmp	.+34     	; 0x7dc <vfprintf+0x326>
 7ba:	a0 fe       	sbrs	r10, 0
 7bc:	06 c0       	rjmp	.+12     	; 0x7ca <vfprintf+0x314>
 7be:	b2 14       	cp	r11, r2
 7c0:	88 f4       	brcc	.+34     	; 0x7e4 <vfprintf+0x32e>
 7c2:	28 0c       	add	r2, r8
 7c4:	92 2c       	mov	r9, r2
 7c6:	9b 18       	sub	r9, r11
 7c8:	0e c0       	rjmp	.+28     	; 0x7e6 <vfprintf+0x330>
 7ca:	b2 14       	cp	r11, r2
 7cc:	60 f4       	brcc	.+24     	; 0x7e6 <vfprintf+0x330>
 7ce:	b6 01       	movw	r22, r12
 7d0:	80 e2       	ldi	r24, 0x20	; 32
 7d2:	90 e0       	ldi	r25, 0x00	; 0
 7d4:	0e 94 52 04 	call	0x8a4	; 0x8a4 <fputc>
 7d8:	b3 94       	inc	r11
 7da:	f7 cf       	rjmp	.-18     	; 0x7ca <vfprintf+0x314>
 7dc:	b2 14       	cp	r11, r2
 7de:	18 f4       	brcc	.+6      	; 0x7e6 <vfprintf+0x330>
 7e0:	2b 18       	sub	r2, r11
 7e2:	02 c0       	rjmp	.+4      	; 0x7e8 <vfprintf+0x332>
 7e4:	98 2c       	mov	r9, r8
 7e6:	21 2c       	mov	r2, r1
 7e8:	a4 fe       	sbrs	r10, 4
 7ea:	10 c0       	rjmp	.+32     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 7ec:	b6 01       	movw	r22, r12
 7ee:	80 e3       	ldi	r24, 0x30	; 48
 7f0:	90 e0       	ldi	r25, 0x00	; 0
 7f2:	0e 94 52 04 	call	0x8a4	; 0x8a4 <fputc>
 7f6:	a2 fe       	sbrs	r10, 2
 7f8:	17 c0       	rjmp	.+46     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 7fa:	a1 fc       	sbrc	r10, 1
 7fc:	03 c0       	rjmp	.+6      	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 7fe:	88 e7       	ldi	r24, 0x78	; 120
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	02 c0       	rjmp	.+4      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 804:	88 e5       	ldi	r24, 0x58	; 88
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	b6 01       	movw	r22, r12
 80a:	0c c0       	rjmp	.+24     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 80c:	8a 2d       	mov	r24, r10
 80e:	86 78       	andi	r24, 0x86	; 134
 810:	59 f0       	breq	.+22     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 812:	a1 fe       	sbrs	r10, 1
 814:	02 c0       	rjmp	.+4      	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 816:	8b e2       	ldi	r24, 0x2B	; 43
 818:	01 c0       	rjmp	.+2      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 81a:	80 e2       	ldi	r24, 0x20	; 32
 81c:	a7 fc       	sbrc	r10, 7
 81e:	8d e2       	ldi	r24, 0x2D	; 45
 820:	b6 01       	movw	r22, r12
 822:	90 e0       	ldi	r25, 0x00	; 0
 824:	0e 94 52 04 	call	0x8a4	; 0x8a4 <fputc>
 828:	89 14       	cp	r8, r9
 82a:	38 f4       	brcc	.+14     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 82c:	b6 01       	movw	r22, r12
 82e:	80 e3       	ldi	r24, 0x30	; 48
 830:	90 e0       	ldi	r25, 0x00	; 0
 832:	0e 94 52 04 	call	0x8a4	; 0x8a4 <fputc>
 836:	9a 94       	dec	r9
 838:	f7 cf       	rjmp	.-18     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 83a:	8a 94       	dec	r8
 83c:	f3 01       	movw	r30, r6
 83e:	e8 0d       	add	r30, r8
 840:	f1 1d       	adc	r31, r1
 842:	80 81       	ld	r24, Z
 844:	b6 01       	movw	r22, r12
 846:	90 e0       	ldi	r25, 0x00	; 0
 848:	0e 94 52 04 	call	0x8a4	; 0x8a4 <fputc>
 84c:	81 10       	cpse	r8, r1
 84e:	f5 cf       	rjmp	.-22     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 850:	22 20       	and	r2, r2
 852:	09 f4       	brne	.+2      	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 854:	42 ce       	rjmp	.-892    	; 0x4da <vfprintf+0x24>
 856:	b6 01       	movw	r22, r12
 858:	80 e2       	ldi	r24, 0x20	; 32
 85a:	90 e0       	ldi	r25, 0x00	; 0
 85c:	0e 94 52 04 	call	0x8a4	; 0x8a4 <fputc>
 860:	2a 94       	dec	r2
 862:	f6 cf       	rjmp	.-20     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 864:	f6 01       	movw	r30, r12
 866:	86 81       	ldd	r24, Z+6	; 0x06
 868:	97 81       	ldd	r25, Z+7	; 0x07
 86a:	02 c0       	rjmp	.+4      	; 0x870 <__DATA_REGION_LENGTH__+0x70>
 86c:	8f ef       	ldi	r24, 0xFF	; 255
 86e:	9f ef       	ldi	r25, 0xFF	; 255
 870:	2b 96       	adiw	r28, 0x0b	; 11
 872:	e2 e1       	ldi	r30, 0x12	; 18
 874:	0c 94 08 05 	jmp	0xa10	; 0xa10 <__epilogue_restores__>

00000878 <strnlen_P>:
 878:	fc 01       	movw	r30, r24
 87a:	05 90       	lpm	r0, Z+
 87c:	61 50       	subi	r22, 0x01	; 1
 87e:	70 40       	sbci	r23, 0x00	; 0
 880:	01 10       	cpse	r0, r1
 882:	d8 f7       	brcc	.-10     	; 0x87a <strnlen_P+0x2>
 884:	80 95       	com	r24
 886:	90 95       	com	r25
 888:	8e 0f       	add	r24, r30
 88a:	9f 1f       	adc	r25, r31
 88c:	08 95       	ret

0000088e <strnlen>:
 88e:	fc 01       	movw	r30, r24
 890:	61 50       	subi	r22, 0x01	; 1
 892:	70 40       	sbci	r23, 0x00	; 0
 894:	01 90       	ld	r0, Z+
 896:	01 10       	cpse	r0, r1
 898:	d8 f7       	brcc	.-10     	; 0x890 <strnlen+0x2>
 89a:	80 95       	com	r24
 89c:	90 95       	com	r25
 89e:	8e 0f       	add	r24, r30
 8a0:	9f 1f       	adc	r25, r31
 8a2:	08 95       	ret

000008a4 <fputc>:
 8a4:	0f 93       	push	r16
 8a6:	1f 93       	push	r17
 8a8:	cf 93       	push	r28
 8aa:	df 93       	push	r29
 8ac:	fb 01       	movw	r30, r22
 8ae:	23 81       	ldd	r18, Z+3	; 0x03
 8b0:	21 fd       	sbrc	r18, 1
 8b2:	03 c0       	rjmp	.+6      	; 0x8ba <fputc+0x16>
 8b4:	8f ef       	ldi	r24, 0xFF	; 255
 8b6:	9f ef       	ldi	r25, 0xFF	; 255
 8b8:	2c c0       	rjmp	.+88     	; 0x912 <__stack+0x13>
 8ba:	22 ff       	sbrs	r18, 2
 8bc:	16 c0       	rjmp	.+44     	; 0x8ea <fputc+0x46>
 8be:	46 81       	ldd	r20, Z+6	; 0x06
 8c0:	57 81       	ldd	r21, Z+7	; 0x07
 8c2:	24 81       	ldd	r18, Z+4	; 0x04
 8c4:	35 81       	ldd	r19, Z+5	; 0x05
 8c6:	42 17       	cp	r20, r18
 8c8:	53 07       	cpc	r21, r19
 8ca:	44 f4       	brge	.+16     	; 0x8dc <fputc+0x38>
 8cc:	a0 81       	ld	r26, Z
 8ce:	b1 81       	ldd	r27, Z+1	; 0x01
 8d0:	9d 01       	movw	r18, r26
 8d2:	2f 5f       	subi	r18, 0xFF	; 255
 8d4:	3f 4f       	sbci	r19, 0xFF	; 255
 8d6:	31 83       	std	Z+1, r19	; 0x01
 8d8:	20 83       	st	Z, r18
 8da:	8c 93       	st	X, r24
 8dc:	26 81       	ldd	r18, Z+6	; 0x06
 8de:	37 81       	ldd	r19, Z+7	; 0x07
 8e0:	2f 5f       	subi	r18, 0xFF	; 255
 8e2:	3f 4f       	sbci	r19, 0xFF	; 255
 8e4:	37 83       	std	Z+7, r19	; 0x07
 8e6:	26 83       	std	Z+6, r18	; 0x06
 8e8:	14 c0       	rjmp	.+40     	; 0x912 <__stack+0x13>
 8ea:	8b 01       	movw	r16, r22
 8ec:	ec 01       	movw	r28, r24
 8ee:	fb 01       	movw	r30, r22
 8f0:	00 84       	ldd	r0, Z+8	; 0x08
 8f2:	f1 85       	ldd	r31, Z+9	; 0x09
 8f4:	e0 2d       	mov	r30, r0
 8f6:	09 95       	icall
 8f8:	89 2b       	or	r24, r25
 8fa:	e1 f6       	brne	.-72     	; 0x8b4 <fputc+0x10>
 8fc:	d8 01       	movw	r26, r16
 8fe:	16 96       	adiw	r26, 0x06	; 6
 900:	8d 91       	ld	r24, X+
 902:	9c 91       	ld	r25, X
 904:	17 97       	sbiw	r26, 0x07	; 7
 906:	01 96       	adiw	r24, 0x01	; 1
 908:	17 96       	adiw	r26, 0x07	; 7
 90a:	9c 93       	st	X, r25
 90c:	8e 93       	st	-X, r24
 90e:	16 97       	sbiw	r26, 0x06	; 6
 910:	ce 01       	movw	r24, r28
 912:	df 91       	pop	r29
 914:	cf 91       	pop	r28
 916:	1f 91       	pop	r17
 918:	0f 91       	pop	r16
 91a:	08 95       	ret

0000091c <__ultoa_invert>:
 91c:	fa 01       	movw	r30, r20
 91e:	aa 27       	eor	r26, r26
 920:	28 30       	cpi	r18, 0x08	; 8
 922:	51 f1       	breq	.+84     	; 0x978 <__ultoa_invert+0x5c>
 924:	20 31       	cpi	r18, 0x10	; 16
 926:	81 f1       	breq	.+96     	; 0x988 <__ultoa_invert+0x6c>
 928:	e8 94       	clt
 92a:	6f 93       	push	r22
 92c:	6e 7f       	andi	r22, 0xFE	; 254
 92e:	6e 5f       	subi	r22, 0xFE	; 254
 930:	7f 4f       	sbci	r23, 0xFF	; 255
 932:	8f 4f       	sbci	r24, 0xFF	; 255
 934:	9f 4f       	sbci	r25, 0xFF	; 255
 936:	af 4f       	sbci	r26, 0xFF	; 255
 938:	b1 e0       	ldi	r27, 0x01	; 1
 93a:	3e d0       	rcall	.+124    	; 0x9b8 <__ultoa_invert+0x9c>
 93c:	b4 e0       	ldi	r27, 0x04	; 4
 93e:	3c d0       	rcall	.+120    	; 0x9b8 <__ultoa_invert+0x9c>
 940:	67 0f       	add	r22, r23
 942:	78 1f       	adc	r23, r24
 944:	89 1f       	adc	r24, r25
 946:	9a 1f       	adc	r25, r26
 948:	a1 1d       	adc	r26, r1
 94a:	68 0f       	add	r22, r24
 94c:	79 1f       	adc	r23, r25
 94e:	8a 1f       	adc	r24, r26
 950:	91 1d       	adc	r25, r1
 952:	a1 1d       	adc	r26, r1
 954:	6a 0f       	add	r22, r26
 956:	71 1d       	adc	r23, r1
 958:	81 1d       	adc	r24, r1
 95a:	91 1d       	adc	r25, r1
 95c:	a1 1d       	adc	r26, r1
 95e:	20 d0       	rcall	.+64     	; 0x9a0 <__ultoa_invert+0x84>
 960:	09 f4       	brne	.+2      	; 0x964 <__ultoa_invert+0x48>
 962:	68 94       	set
 964:	3f 91       	pop	r19
 966:	2a e0       	ldi	r18, 0x0A	; 10
 968:	26 9f       	mul	r18, r22
 96a:	11 24       	eor	r1, r1
 96c:	30 19       	sub	r19, r0
 96e:	30 5d       	subi	r19, 0xD0	; 208
 970:	31 93       	st	Z+, r19
 972:	de f6       	brtc	.-74     	; 0x92a <__ultoa_invert+0xe>
 974:	cf 01       	movw	r24, r30
 976:	08 95       	ret
 978:	46 2f       	mov	r20, r22
 97a:	47 70       	andi	r20, 0x07	; 7
 97c:	40 5d       	subi	r20, 0xD0	; 208
 97e:	41 93       	st	Z+, r20
 980:	b3 e0       	ldi	r27, 0x03	; 3
 982:	0f d0       	rcall	.+30     	; 0x9a2 <__ultoa_invert+0x86>
 984:	c9 f7       	brne	.-14     	; 0x978 <__ultoa_invert+0x5c>
 986:	f6 cf       	rjmp	.-20     	; 0x974 <__ultoa_invert+0x58>
 988:	46 2f       	mov	r20, r22
 98a:	4f 70       	andi	r20, 0x0F	; 15
 98c:	40 5d       	subi	r20, 0xD0	; 208
 98e:	4a 33       	cpi	r20, 0x3A	; 58
 990:	18 f0       	brcs	.+6      	; 0x998 <__ultoa_invert+0x7c>
 992:	49 5d       	subi	r20, 0xD9	; 217
 994:	31 fd       	sbrc	r19, 1
 996:	40 52       	subi	r20, 0x20	; 32
 998:	41 93       	st	Z+, r20
 99a:	02 d0       	rcall	.+4      	; 0x9a0 <__ultoa_invert+0x84>
 99c:	a9 f7       	brne	.-22     	; 0x988 <__ultoa_invert+0x6c>
 99e:	ea cf       	rjmp	.-44     	; 0x974 <__ultoa_invert+0x58>
 9a0:	b4 e0       	ldi	r27, 0x04	; 4
 9a2:	a6 95       	lsr	r26
 9a4:	97 95       	ror	r25
 9a6:	87 95       	ror	r24
 9a8:	77 95       	ror	r23
 9aa:	67 95       	ror	r22
 9ac:	ba 95       	dec	r27
 9ae:	c9 f7       	brne	.-14     	; 0x9a2 <__ultoa_invert+0x86>
 9b0:	00 97       	sbiw	r24, 0x00	; 0
 9b2:	61 05       	cpc	r22, r1
 9b4:	71 05       	cpc	r23, r1
 9b6:	08 95       	ret
 9b8:	9b 01       	movw	r18, r22
 9ba:	ac 01       	movw	r20, r24
 9bc:	0a 2e       	mov	r0, r26
 9be:	06 94       	lsr	r0
 9c0:	57 95       	ror	r21
 9c2:	47 95       	ror	r20
 9c4:	37 95       	ror	r19
 9c6:	27 95       	ror	r18
 9c8:	ba 95       	dec	r27
 9ca:	c9 f7       	brne	.-14     	; 0x9be <__ultoa_invert+0xa2>
 9cc:	62 0f       	add	r22, r18
 9ce:	73 1f       	adc	r23, r19
 9d0:	84 1f       	adc	r24, r20
 9d2:	95 1f       	adc	r25, r21
 9d4:	a0 1d       	adc	r26, r0
 9d6:	08 95       	ret

000009d8 <__prologue_saves__>:
 9d8:	2f 92       	push	r2
 9da:	3f 92       	push	r3
 9dc:	4f 92       	push	r4
 9de:	5f 92       	push	r5
 9e0:	6f 92       	push	r6
 9e2:	7f 92       	push	r7
 9e4:	8f 92       	push	r8
 9e6:	9f 92       	push	r9
 9e8:	af 92       	push	r10
 9ea:	bf 92       	push	r11
 9ec:	cf 92       	push	r12
 9ee:	df 92       	push	r13
 9f0:	ef 92       	push	r14
 9f2:	ff 92       	push	r15
 9f4:	0f 93       	push	r16
 9f6:	1f 93       	push	r17
 9f8:	cf 93       	push	r28
 9fa:	df 93       	push	r29
 9fc:	cd b7       	in	r28, 0x3d	; 61
 9fe:	de b7       	in	r29, 0x3e	; 62
 a00:	ca 1b       	sub	r28, r26
 a02:	db 0b       	sbc	r29, r27
 a04:	0f b6       	in	r0, 0x3f	; 63
 a06:	f8 94       	cli
 a08:	de bf       	out	0x3e, r29	; 62
 a0a:	0f be       	out	0x3f, r0	; 63
 a0c:	cd bf       	out	0x3d, r28	; 61
 a0e:	09 94       	ijmp

00000a10 <__epilogue_restores__>:
 a10:	2a 88       	ldd	r2, Y+18	; 0x12
 a12:	39 88       	ldd	r3, Y+17	; 0x11
 a14:	48 88       	ldd	r4, Y+16	; 0x10
 a16:	5f 84       	ldd	r5, Y+15	; 0x0f
 a18:	6e 84       	ldd	r6, Y+14	; 0x0e
 a1a:	7d 84       	ldd	r7, Y+13	; 0x0d
 a1c:	8c 84       	ldd	r8, Y+12	; 0x0c
 a1e:	9b 84       	ldd	r9, Y+11	; 0x0b
 a20:	aa 84       	ldd	r10, Y+10	; 0x0a
 a22:	b9 84       	ldd	r11, Y+9	; 0x09
 a24:	c8 84       	ldd	r12, Y+8	; 0x08
 a26:	df 80       	ldd	r13, Y+7	; 0x07
 a28:	ee 80       	ldd	r14, Y+6	; 0x06
 a2a:	fd 80       	ldd	r15, Y+5	; 0x05
 a2c:	0c 81       	ldd	r16, Y+4	; 0x04
 a2e:	1b 81       	ldd	r17, Y+3	; 0x03
 a30:	aa 81       	ldd	r26, Y+2	; 0x02
 a32:	b9 81       	ldd	r27, Y+1	; 0x01
 a34:	ce 0f       	add	r28, r30
 a36:	d1 1d       	adc	r29, r1
 a38:	0f b6       	in	r0, 0x3f	; 63
 a3a:	f8 94       	cli
 a3c:	de bf       	out	0x3e, r29	; 62
 a3e:	0f be       	out	0x3f, r0	; 63
 a40:	cd bf       	out	0x3d, r28	; 61
 a42:	ed 01       	movw	r28, r26
 a44:	08 95       	ret

00000a46 <_exit>:
 a46:	f8 94       	cli

00000a48 <__stop_program>:
 a48:	ff cf       	rjmp	.-2      	; 0xa48 <__stop_program>
