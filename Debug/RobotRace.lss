
RobotRace.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000003f4  00000488  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800110  00800110  00000498  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000498  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000508  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000103b  00000000  00000000  000005b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007f5  00000000  00000000  000015eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000665  00000000  00000000  00001de0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000150  00000000  00000000  00002448  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005d4  00000000  00000000  00002598  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000571  00000000  00000000  00002b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  000030dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ef       	ldi	r30, 0xF4	; 244
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 31       	cpi	r26, 0x11	; 17
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 62 01 	call	0x2c4	; 0x2c4 <main>
  9e:	0c 94 f8 01 	jmp	0x3f0	; 0x3f0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_ADC>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	80 83       	st	Z, r24
  b0:	ea e7       	ldi	r30, 0x7A	; 122
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	87 60       	ori	r24, 0x07	; 7
  b8:	80 83       	st	Z, r24
  ba:	80 81       	ld	r24, Z
  bc:	80 68       	ori	r24, 0x80	; 128
  be:	80 83       	st	Z, r24
  c0:	08 95       	ret

000000c2 <readADC>:
  c2:	ec e7       	ldi	r30, 0x7C	; 124
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	90 81       	ld	r25, Z
  c8:	90 7f       	andi	r25, 0xF0	; 240
  ca:	8f 70       	andi	r24, 0x0F	; 15
  cc:	89 2b       	or	r24, r25
  ce:	80 83       	st	Z, r24
  d0:	ea e7       	ldi	r30, 0x7A	; 122
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	80 64       	ori	r24, 0x40	; 64
  d8:	80 83       	st	Z, r24
  da:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  de:	86 fd       	sbrc	r24, 6
  e0:	fc cf       	rjmp	.-8      	; 0xda <readADC+0x18>
  e2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  e6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  ea:	08 95       	ret

000000ec <custom_delay_ms>:
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	00 d0       	rcall	.+0      	; 0xf2 <custom_delay_ms+0x6>
  f2:	cd b7       	in	r28, 0x3d	; 61
  f4:	de b7       	in	r29, 0x3e	; 62
  f6:	40 e0       	ldi	r20, 0x00	; 0
  f8:	50 e0       	ldi	r21, 0x00	; 0
  fa:	11 c0       	rjmp	.+34     	; 0x11e <custom_delay_ms+0x32>
  fc:	1a 82       	std	Y+2, r1	; 0x02
  fe:	19 82       	std	Y+1, r1	; 0x01
 100:	07 c0       	rjmp	.+14     	; 0x110 <custom_delay_ms+0x24>
 102:	00 00       	nop
 104:	29 81       	ldd	r18, Y+1	; 0x01
 106:	3a 81       	ldd	r19, Y+2	; 0x02
 108:	2f 5f       	subi	r18, 0xFF	; 255
 10a:	3f 4f       	sbci	r19, 0xFF	; 255
 10c:	3a 83       	std	Y+2, r19	; 0x02
 10e:	29 83       	std	Y+1, r18	; 0x01
 110:	29 81       	ldd	r18, Y+1	; 0x01
 112:	3a 81       	ldd	r19, Y+2	; 0x02
 114:	22 35       	cpi	r18, 0x52	; 82
 116:	33 40       	sbci	r19, 0x03	; 3
 118:	a0 f3       	brcs	.-24     	; 0x102 <custom_delay_ms+0x16>
 11a:	4f 5f       	subi	r20, 0xFF	; 255
 11c:	5f 4f       	sbci	r21, 0xFF	; 255
 11e:	48 17       	cp	r20, r24
 120:	59 07       	cpc	r21, r25
 122:	60 f3       	brcs	.-40     	; 0xfc <custom_delay_ms+0x10>
 124:	0f 90       	pop	r0
 126:	0f 90       	pop	r0
 128:	df 91       	pop	r29
 12a:	cf 91       	pop	r28
 12c:	08 95       	ret

0000012e <init_USART>:
 12e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 132:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 136:	88 e1       	ldi	r24, 0x18	; 24
 138:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 13c:	86 e0       	ldi	r24, 0x06	; 6
 13e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 142:	08 95       	ret

00000144 <transferMessage>:
 144:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 148:	95 ff       	sbrs	r25, 5
 14a:	fc cf       	rjmp	.-8      	; 0x144 <transferMessage>
 14c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 150:	08 95       	ret

00000152 <receiveMessage>:
 152:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 156:	88 23       	and	r24, r24
 158:	1c f4       	brge	.+6      	; 0x160 <receiveMessage+0xe>
 15a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 15e:	08 95       	ret
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	08 95       	ret

00000164 <init_driving_PWM>:
 164:	8a b1       	in	r24, 0x0a	; 10
 166:	80 66       	ori	r24, 0x60	; 96
 168:	8a b9       	out	0x0a, r24	; 10
 16a:	84 b5       	in	r24, 0x24	; 36
 16c:	83 6a       	ori	r24, 0xA3	; 163
 16e:	84 bd       	out	0x24, r24	; 36
 170:	85 b5       	in	r24, 0x25	; 37
 172:	83 60       	ori	r24, 0x03	; 3
 174:	85 bd       	out	0x25, r24	; 37
 176:	84 b1       	in	r24, 0x04	; 4
 178:	8c 60       	ori	r24, 0x0C	; 12
 17a:	84 b9       	out	0x04, r24	; 4
 17c:	08 95       	ret

0000017e <setMotorASpeed>:
 17e:	81 11       	cpse	r24, r1
 180:	02 c0       	rjmp	.+4      	; 0x186 <setMotorASpeed+0x8>
 182:	18 bc       	out	0x28, r1	; 40
 184:	08 95       	ret
 186:	88 bd       	out	0x28, r24	; 40
 188:	08 95       	ret

0000018a <setMotorBSpeed>:
 18a:	81 11       	cpse	r24, r1
 18c:	02 c0       	rjmp	.+4      	; 0x192 <setMotorBSpeed+0x8>
 18e:	17 bc       	out	0x27, r1	; 39
 190:	08 95       	ret
 192:	87 bd       	out	0x27, r24	; 39
 194:	08 95       	ret

00000196 <setMotorADirection>:
 196:	81 30       	cpi	r24, 0x01	; 1
 198:	21 f4       	brne	.+8      	; 0x1a2 <setMotorADirection+0xc>
 19a:	85 b1       	in	r24, 0x05	; 5
 19c:	84 60       	ori	r24, 0x04	; 4
 19e:	85 b9       	out	0x05, r24	; 5
 1a0:	08 95       	ret
 1a2:	85 b1       	in	r24, 0x05	; 5
 1a4:	8b 7f       	andi	r24, 0xFB	; 251
 1a6:	85 b9       	out	0x05, r24	; 5
 1a8:	08 95       	ret

000001aa <setMotorBDirection>:
 1aa:	81 30       	cpi	r24, 0x01	; 1
 1ac:	21 f4       	brne	.+8      	; 0x1b6 <setMotorBDirection+0xc>
 1ae:	85 b1       	in	r24, 0x05	; 5
 1b0:	88 60       	ori	r24, 0x08	; 8
 1b2:	85 b9       	out	0x05, r24	; 5
 1b4:	08 95       	ret
 1b6:	85 b1       	in	r24, 0x05	; 5
 1b8:	87 7f       	andi	r24, 0xF7	; 247
 1ba:	85 b9       	out	0x05, r24	; 5
 1bc:	08 95       	ret

000001be <Forward>:
 1be:	cf 93       	push	r28
 1c0:	df 93       	push	r29
 1c2:	83 ec       	ldi	r24, 0xC3	; 195
 1c4:	99 e0       	ldi	r25, 0x09	; 9
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <Forward+0x8>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <Forward+0xe>
 1cc:	00 00       	nop
 1ce:	ce e0       	ldi	r28, 0x0E	; 14
 1d0:	d1 e0       	ldi	r29, 0x01	; 1
 1d2:	88 81       	ld	r24, Y
 1d4:	0e 94 bf 00 	call	0x17e	; 0x17e <setMotorASpeed>
 1d8:	88 81       	ld	r24, Y
 1da:	0e 94 c5 00 	call	0x18a	; 0x18a <setMotorBSpeed>
 1de:	83 ec       	ldi	r24, 0xC3	; 195
 1e0:	99 e0       	ldi	r25, 0x09	; 9
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <Forward+0x24>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <Forward+0x2a>
 1e8:	00 00       	nop
 1ea:	df 91       	pop	r29
 1ec:	cf 91       	pop	r28
 1ee:	08 95       	ret

000001f0 <turnRight>:
 1f0:	83 ec       	ldi	r24, 0xC3	; 195
 1f2:	99 e0       	ldi	r25, 0x09	; 9
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <turnRight+0x4>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <turnRight+0xa>
 1fa:	00 00       	nop
 1fc:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <turningSpeed>
 200:	0e 94 bf 00 	call	0x17e	; 0x17e <setMotorASpeed>
 204:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <driveSpeedFull>
 208:	0e 94 c5 00 	call	0x18a	; 0x18a <setMotorBSpeed>
 20c:	83 ec       	ldi	r24, 0xC3	; 195
 20e:	99 e0       	ldi	r25, 0x09	; 9
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <turnRight+0x20>
 214:	00 c0       	rjmp	.+0      	; 0x216 <turnRight+0x26>
 216:	00 00       	nop
 218:	08 95       	ret

0000021a <turnHardRight>:
 21a:	83 ec       	ldi	r24, 0xC3	; 195
 21c:	99 e0       	ldi	r25, 0x09	; 9
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <turnHardRight+0x4>
 222:	00 c0       	rjmp	.+0      	; 0x224 <turnHardRight+0xa>
 224:	00 00       	nop
 226:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <hardTurningSPeed>
 22a:	0e 94 bf 00 	call	0x17e	; 0x17e <setMotorASpeed>
 22e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <driveSpeedTruning>
 232:	0e 94 c5 00 	call	0x18a	; 0x18a <setMotorBSpeed>
 236:	83 ec       	ldi	r24, 0xC3	; 195
 238:	99 e0       	ldi	r25, 0x09	; 9
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <turnHardRight+0x20>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <turnHardRight+0x26>
 240:	00 00       	nop
 242:	08 95       	ret

00000244 <turnLeft>:
 244:	83 ec       	ldi	r24, 0xC3	; 195
 246:	99 e0       	ldi	r25, 0x09	; 9
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <turnLeft+0x4>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <turnLeft+0xa>
 24e:	00 00       	nop
 250:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <driveSpeedTruning>
 254:	0e 94 bf 00 	call	0x17e	; 0x17e <setMotorASpeed>
 258:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <hardTurningSPeed>
 25c:	0e 94 c5 00 	call	0x18a	; 0x18a <setMotorBSpeed>
 260:	83 ec       	ldi	r24, 0xC3	; 195
 262:	99 e0       	ldi	r25, 0x09	; 9
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <turnLeft+0x20>
 268:	00 c0       	rjmp	.+0      	; 0x26a <turnLeft+0x26>
 26a:	00 00       	nop
 26c:	08 95       	ret

0000026e <move>:
 26e:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <whiteOuterLimit>
 272:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <whiteOuterLimit+0x1>
 276:	82 17       	cp	r24, r18
 278:	93 07       	cpc	r25, r19
 27a:	1c f4       	brge	.+6      	; 0x282 <move+0x14>
 27c:	0e 94 0d 01 	call	0x21a	; 0x21a <turnHardRight>
 280:	08 95       	ret
 282:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <whiteInnerLimit>
 286:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <whiteInnerLimit+0x1>
 28a:	82 17       	cp	r24, r18
 28c:	93 07       	cpc	r25, r19
 28e:	1c f4       	brge	.+6      	; 0x296 <move+0x28>
 290:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <turnRight>
 294:	08 95       	ret
 296:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 29a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 29e:	28 17       	cp	r18, r24
 2a0:	39 07       	cpc	r19, r25
 2a2:	1c f4       	brge	.+6      	; 0x2aa <move+0x3c>
 2a4:	0e 94 22 01 	call	0x244	; 0x244 <turnLeft>
 2a8:	08 95       	ret
 2aa:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <blackOuterLimit>
 2ae:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <blackOuterLimit+0x1>
 2b2:	28 17       	cp	r18, r24
 2b4:	39 07       	cpc	r19, r25
 2b6:	1c f4       	brge	.+6      	; 0x2be <move+0x50>
 2b8:	0e 94 0d 01 	call	0x21a	; 0x21a <turnHardRight>
 2bc:	08 95       	ret
 2be:	0e 94 df 00 	call	0x1be	; 0x1be <Forward>
 2c2:	08 95       	ret

000002c4 <main>:
#include "turning.h"

int main(void)
{
    
	init_ADC();
 2c4:	0e 94 53 00 	call	0xa6	; 0xa6 <init_ADC>
	init_USART(MYUBRR);
 2c8:	87 e6       	ldi	r24, 0x67	; 103
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	0e 94 97 00 	call	0x12e	; 0x12e <init_USART>
 	init_driving_PWM();
 2d0:	0e 94 b2 00 	call	0x164	; 0x164 <init_driving_PWM>
	
	char var;
	
	setMotorADirection(1);
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	0e 94 cb 00 	call	0x196	; 0x196 <setMotorADirection>
	setMotorBDirection(1);
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	0e 94 d5 00 	call	0x1aa	; 0x1aa <setMotorBDirection>
	setMotorASpeed(0);
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	0e 94 bf 00 	call	0x17e	; 0x17e <setMotorASpeed>
	setMotorBSpeed(0);
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	0e 94 c5 00 	call	0x18a	; 0x18a <setMotorBSpeed>
	
	sei();
 2ec:	78 94       	sei
// 		for (i=180;i>=0;i--){
// 			servo_set_angle(i,180);
// 			_delay_ms(40);
// 		}
		
		int sensorLeft = (int)(readADC(SENSOR_LEFT_CHANNEL) - 30);
 2ee:	80 e0       	ldi	r24, 0x00	; 0
 2f0:	0e 94 61 00 	call	0xc2	; 0xc2 <readADC>
 2f4:	4e 97       	sbiw	r24, 0x1e	; 30
 2f6:	6c 01       	movw	r12, r24
		int lineTrackingSensorLeft = (int)readADC(LINE_TRACKING_SENSOR_LEFT_CHANNEL);
 2f8:	85 e0       	ldi	r24, 0x05	; 5
 2fa:	0e 94 61 00 	call	0xc2	; 0xc2 <readADC>
 2fe:	ec 01       	movw	r28, r24
		int lineTrackingSensorMiddle = (int)readADC(LINE_TRACKING_SENSOR_MIDDLE_CHANNEL);
 300:	82 e0       	ldi	r24, 0x02	; 2
 302:	0e 94 61 00 	call	0xc2	; 0xc2 <readADC>
 306:	7c 01       	movw	r14, r24
		int lineTrackingSensorRight = (int)(readADC(LINE_TRACKING_SENSOR_RIGHT_CHANNEL) - 30);
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	0e 94 61 00 	call	0xc2	; 0xc2 <readADC>
 30e:	8c 01       	movw	r16, r24
 310:	0e 51       	subi	r16, 0x1E	; 30
 312:	11 09       	sbc	r17, r1
		int sensorRight = (int)(readADC(SENSOR_RIGHT_CHANNEL) - 20);
 314:	83 e0       	ldi	r24, 0x03	; 3
 316:	0e 94 61 00 	call	0xc2	; 0xc2 <readADC>
 31a:	44 97       	sbiw	r24, 0x14	; 20
		
		int averageValue = (sensorLeft + lineTrackingSensorLeft + lineTrackingSensorMiddle + lineTrackingSensorRight +sensorRight) / 5;
 31c:	96 01       	movw	r18, r12
 31e:	2c 0f       	add	r18, r28
 320:	3d 1f       	adc	r19, r29
 322:	e7 01       	movw	r28, r14
 324:	c2 0f       	add	r28, r18
 326:	d3 1f       	adc	r29, r19
 328:	c0 0f       	add	r28, r16
 32a:	d1 1f       	adc	r29, r17
 32c:	8c 0f       	add	r24, r28
 32e:	9d 1f       	adc	r25, r29
 330:	65 e0       	ldi	r22, 0x05	; 5
 332:	70 e0       	ldi	r23, 0x00	; 0
 334:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <__divmodhi4>
 338:	eb 01       	movw	r28, r22
		
		custom_delay_ms(20);
 33a:	84 e1       	ldi	r24, 0x14	; 20
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	0e 94 76 00 	call	0xec	; 0xec <custom_delay_ms>
		
		move(averageValue);
 342:	ce 01       	movw	r24, r28
 344:	0e 94 37 01 	call	0x26e	; 0x26e <move>
// 		for (int i = 0; buffer[i] != '\0'; i++) {
// 			transferMessage(buffer[i]);
// 		}
// 		_delay_ms(20);
		// Delay before next measurement
		var = receiveMessage();
 348:	0e 94 a9 00 	call	0x152	; 0x152 <receiveMessage>
		if(var != '\0'){receivedMessage = var;}
 34c:	81 11       	cpse	r24, r1
 34e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
 352:	87 e8       	ldi	r24, 0x87	; 135
 354:	93 e1       	ldi	r25, 0x13	; 19
 356:	01 97       	sbiw	r24, 0x01	; 1
 358:	f1 f7       	brne	.-4      	; 0x356 <main+0x92>
 35a:	00 c0       	rjmp	.+0      	; 0x35c <main+0x98>
 35c:	00 00       	nop
		
		_delay_ms(20);
		if(receivedMessage == 'A'){
 35e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 362:	81 34       	cpi	r24, 0x41	; 65
 364:	19 f4       	brne	.+6      	; 0x36c <main+0xa8>
			transferMessage(receivedMessage);
 366:	0e 94 a2 00 	call	0x144	; 0x144 <transferMessage>
 36a:	c1 cf       	rjmp	.-126    	; 0x2ee <main+0x2a>
		}else if(receivedMessage == 'B'){
 36c:	82 34       	cpi	r24, 0x42	; 66
 36e:	71 f4       	brne	.+28     	; 0x38c <main+0xc8>
			setMotorASpeed(0);
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	0e 94 bf 00 	call	0x17e	; 0x17e <setMotorASpeed>
			setMotorBSpeed(0);
 376:	80 e0       	ldi	r24, 0x00	; 0
 378:	0e 94 c5 00 	call	0x18a	; 0x18a <setMotorBSpeed>
			custom_delay_ms(5000);
 37c:	88 e8       	ldi	r24, 0x88	; 136
 37e:	93 e1       	ldi	r25, 0x13	; 19
 380:	0e 94 76 00 	call	0xec	; 0xec <custom_delay_ms>
			receivedMessage = 'A';
 384:	81 e4       	ldi	r24, 0x41	; 65
 386:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
 38a:	b1 cf       	rjmp	.-158    	; 0x2ee <main+0x2a>
		}else if(receivedMessage == 'C'){
 38c:	83 34       	cpi	r24, 0x43	; 67
 38e:	09 f0       	breq	.+2      	; 0x392 <main+0xce>
 390:	ae cf       	rjmp	.-164    	; 0x2ee <main+0x2a>
			setMotorASpeed(0);
 392:	80 e0       	ldi	r24, 0x00	; 0
 394:	0e 94 bf 00 	call	0x17e	; 0x17e <setMotorASpeed>
			setMotorBSpeed(0);
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	0e 94 c5 00 	call	0x18a	; 0x18a <setMotorBSpeed>
 39e:	a7 cf       	rjmp	.-178    	; 0x2ee <main+0x2a>

000003a0 <__divmodhi4>:
 3a0:	97 fb       	bst	r25, 7
 3a2:	07 2e       	mov	r0, r23
 3a4:	16 f4       	brtc	.+4      	; 0x3aa <__divmodhi4+0xa>
 3a6:	00 94       	com	r0
 3a8:	07 d0       	rcall	.+14     	; 0x3b8 <__divmodhi4_neg1>
 3aa:	77 fd       	sbrc	r23, 7
 3ac:	09 d0       	rcall	.+18     	; 0x3c0 <__divmodhi4_neg2>
 3ae:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <__udivmodhi4>
 3b2:	07 fc       	sbrc	r0, 7
 3b4:	05 d0       	rcall	.+10     	; 0x3c0 <__divmodhi4_neg2>
 3b6:	3e f4       	brtc	.+14     	; 0x3c6 <__divmodhi4_exit>

000003b8 <__divmodhi4_neg1>:
 3b8:	90 95       	com	r25
 3ba:	81 95       	neg	r24
 3bc:	9f 4f       	sbci	r25, 0xFF	; 255
 3be:	08 95       	ret

000003c0 <__divmodhi4_neg2>:
 3c0:	70 95       	com	r23
 3c2:	61 95       	neg	r22
 3c4:	7f 4f       	sbci	r23, 0xFF	; 255

000003c6 <__divmodhi4_exit>:
 3c6:	08 95       	ret

000003c8 <__udivmodhi4>:
 3c8:	aa 1b       	sub	r26, r26
 3ca:	bb 1b       	sub	r27, r27
 3cc:	51 e1       	ldi	r21, 0x11	; 17
 3ce:	07 c0       	rjmp	.+14     	; 0x3de <__udivmodhi4_ep>

000003d0 <__udivmodhi4_loop>:
 3d0:	aa 1f       	adc	r26, r26
 3d2:	bb 1f       	adc	r27, r27
 3d4:	a6 17       	cp	r26, r22
 3d6:	b7 07       	cpc	r27, r23
 3d8:	10 f0       	brcs	.+4      	; 0x3de <__udivmodhi4_ep>
 3da:	a6 1b       	sub	r26, r22
 3dc:	b7 0b       	sbc	r27, r23

000003de <__udivmodhi4_ep>:
 3de:	88 1f       	adc	r24, r24
 3e0:	99 1f       	adc	r25, r25
 3e2:	5a 95       	dec	r21
 3e4:	a9 f7       	brne	.-22     	; 0x3d0 <__udivmodhi4_loop>
 3e6:	80 95       	com	r24
 3e8:	90 95       	com	r25
 3ea:	bc 01       	movw	r22, r24
 3ec:	cd 01       	movw	r24, r26
 3ee:	08 95       	ret

000003f0 <_exit>:
 3f0:	f8 94       	cli

000003f2 <__stop_program>:
 3f2:	ff cf       	rjmp	.-2      	; 0x3f2 <__stop_program>
